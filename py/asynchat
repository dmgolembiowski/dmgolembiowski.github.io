<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`asynchat` --- Asynchronous socket command/response handler</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-asynchat-asynchronous-socket-command-response-handler">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`asynchat`</span></a> --- Asynchronous socket command/response handler</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: asynchat
   :synopsis: Support for asynchronous command/response protocols.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 7)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Sam Rushing &lt;rushing&#64;nightmare.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 8)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Steve Holden &lt;sholden&#64;holdenweb.com&gt;

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/asynchat.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 10); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 12)</p>
<p>Unknown directive type &quot;deprecated&quot;.</p>
<pre class="literal-block">
.. deprecated:: 3.6
   Please use :mod:`asyncio` instead.

</pre>
</div>
<hr class="docutils" />
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>This module exists for backwards compatibility only.  For new code we
recommend using <a href="#id5"><span class="problematic" id="id6">:mod:`asyncio`</span></a>.</p>
<div class="last system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 19); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
</div>
<p>This module builds on the <a href="#id7"><span class="problematic" id="id8">:mod:`asyncore`</span></a> infrastructure, simplifying
asynchronous clients and servers and making it easier to handle protocols
whose elements are terminated by arbitrary strings, or are of variable length.
<a href="#id9"><span class="problematic" id="id10">:mod:`asynchat`</span></a> defines the abstract class <a href="#id11"><span class="problematic" id="id12">:class:`async_chat`</span></a> that you
subclass, providing implementations of the <a href="#id13"><span class="problematic" id="id14">:meth:`collect_incoming_data`</span></a> and
<a href="#id15"><span class="problematic" id="id16">:meth:`found_terminator`</span></a> methods. It uses the same asynchronous loop as
<a href="#id17"><span class="problematic" id="id18">:mod:`asyncore`</span></a>, and the two types of channel, <a href="#id19"><span class="problematic" id="id20">:class:`asyncore.dispatcher`</span></a>
and <a href="#id21"><span class="problematic" id="id22">:class:`asynchat.async_chat`</span></a>, can freely be mixed in the channel map.
Typically an <a href="#id23"><span class="problematic" id="id24">:class:`asyncore.dispatcher`</span></a> server channel generates new
<a href="#id25"><span class="problematic" id="id26">:class:`asynchat.async_chat`</span></a> channel objects as it receives incoming
connection requests.</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 22); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="async-chat">This class is an abstract subclass of <a href="#id27"><span class="problematic" id="id28">:class:`asyncore.dispatcher`</span></a>. To make
practical use of the code you must subclass <a href="#id29"><span class="problematic" id="id30">:class:`async_chat`</span></a>, providing
meaningful <a href="#id31"><span class="problematic" id="id32">:meth:`collect_incoming_data`</span></a> and <a href="#id33"><span class="problematic" id="id34">:meth:`found_terminator`</span></a>
methods.
The <a href="#id35"><span class="problematic" id="id36">:class:`asyncore.dispatcher`</span></a> methods can be used, although not all make
sense in a message/response context.</p>
<div class="async-chat system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 37); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 37); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 37); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="async-chat system-message" id="id33">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 37); <em><a href="#id34">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="async-chat system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 37); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="async-chat">Like <a href="#id37"><span class="problematic" id="id38">:class:`asyncore.dispatcher`</span></a>, <a href="#id39"><span class="problematic" id="id40">:class:`async_chat`</span></a> defines a set of
events that are generated by an analysis of socket conditions after a
<a href="#id41"><span class="problematic" id="id42">:c:func:`select`</span></a> call. Once the polling loop has been started the
<a href="#id43"><span class="problematic" id="id44">:class:`async_chat`</span></a> object's methods are called by the event-processing
framework with no action on the part of the programmer.</p>
<div class="async-chat system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 44); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id39">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 44); <em><a href="#id40">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id41">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 44); <em><a href="#id42">backlink</a></em></p>
Unknown interpreted text role &quot;c:func&quot;.</div>
<div class="async-chat system-message" id="id43">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 44); <em><a href="#id44">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="async-chat">Two class attributes can be modified, to improve performance, or possibly
even to conserve memory.</p>
<div class="async-chat system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 54)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: ac_in_buffer_size

   The asynchronous input buffer size (default ``4096``).


</pre>
</div>
<div class="async-chat system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 59)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: ac_out_buffer_size

   The asynchronous output buffer size (default ``4096``).

</pre>
</div>
<p class="async-chat">Unlike <a href="#id45"><span class="problematic" id="id46">:class:`asyncore.dispatcher`</span></a>, <a href="#id47"><span class="problematic" id="id48">:class:`async_chat`</span></a> allows you to
define a <a href="#id49"><span class="problematic" id="id50">:abbr:`FIFO (first-in, first-out)`</span></a> queue of <em>producers</em>. A producer need
have only one method, <a href="#id51"><span class="problematic" id="id52">:meth:`more`</span></a>, which should return data to be
transmitted on the channel.
The producer indicates exhaustion (<em>i.e.</em> that it contains no more data) by
having its <a href="#id53"><span class="problematic" id="id54">:meth:`more`</span></a> method return the empty bytes object. At this point
the <a href="#id55"><span class="problematic" id="id56">:class:`async_chat`</span></a> object removes the producer from the queue and starts
using the next producer, if any. When the producer queue is empty the
<a href="#id57"><span class="problematic" id="id58">:meth:`handle_write`</span></a> method does nothing. You use the channel object's
<a href="#id59"><span class="problematic" id="id60">:meth:`set_terminator`</span></a> method to describe how to recognize the end of, or
an important breakpoint in, an incoming transmission from the remote
endpoint.</p>
<div class="async-chat system-message" id="id45">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id46">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id47">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id48">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id49">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id50">backlink</a></em></p>
Unknown interpreted text role &quot;abbr&quot;.</div>
<div class="async-chat system-message" id="id51">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id52">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="async-chat system-message" id="id53">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id54">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="async-chat system-message" id="id55">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id56">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id57">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id58">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="async-chat system-message" id="id59">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 63); <em><a href="#id60">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<p class="async-chat">To build a functioning <a href="#id61"><span class="problematic" id="id62">:class:`async_chat`</span></a> subclass your  input methods
<a href="#id63"><span class="problematic" id="id64">:meth:`collect_incoming_data`</span></a> and <a href="#id65"><span class="problematic" id="id66">:meth:`found_terminator`</span></a> must handle the
data that the channel receives asynchronously. The methods are described
below.</p>
<div class="async-chat system-message" id="id61">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 76); <em><a href="#id62">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="async-chat system-message" id="id63">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 76); <em><a href="#id64">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="async-chat system-message" id="id65">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 76); <em><a href="#id66">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 82)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.close_when_done()

   Pushes a ``None`` on to the producer queue. When this producer is popped off
   the queue it causes the channel to be closed.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 88)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.collect_incoming_data(data)

   Called with *data* holding an arbitrary amount of received data.  The
   default method, which must be overridden, raises a
   :exc:`NotImplementedError` exception.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 95)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.discard_buffers()

   In emergencies this method will discard any data held in the input and/or
   output buffers and the producer queue.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 101)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.found_terminator()

   Called when the incoming data stream  matches the termination condition set
   by :meth:`set_terminator`. The default method, which must be overridden,
   raises a :exc:`NotImplementedError` exception. The buffered input data
   should be available via an instance attribute.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 109)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.get_terminator()

   Returns the current terminator for the channel.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 114)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.push(data)

   Pushes data on to the channel's queue to ensure its transmission.
   This is all you need to do to have the channel write the data out to the
   network, although it is possible to use your own producers in more complex
   schemes to implement encryption and chunking, for example.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 122)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.push_with_producer(producer)

   Takes a producer object and adds it to the producer queue associated with
   the channel.  When all currently-pushed producers have been exhausted the
   channel will consume this producer's data by calling its :meth:`more`
   method and send the data to the remote endpoint.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 130)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: async_chat.set_terminator(term)

   Sets the terminating condition to be recognized on the channel.  ``term``
   may be any of three types of value, corresponding to three different ways
   to handle incoming protocol data.

   +-----------+---------------------------------------------+
   | term      | Description                                 |
   +===========+=============================================+
   | *string*  | Will call :meth:`found_terminator` when the |
   |           | string is found in the input stream         |
   +-----------+---------------------------------------------+
   | *integer* | Will call :meth:`found_terminator` when the |
   |           | indicated number of characters have been    |
   |           | received                                    |
   +-----------+---------------------------------------------+
   | ``None``  | The channel continues to collect data       |
   |           | forever                                     |
   +-----------+---------------------------------------------+

   Note that any data following the terminator will be available for reading
   by the channel after :meth:`found_terminator` is called.


</pre>
</div>
<div class="section" id="id67">
<span id="asynchat-example"></span><h1>asynchat Example</h1>
<p>The following partial example shows how HTTP requests can be read with
<a href="#id68"><span class="problematic" id="id69">:class:`async_chat`</span></a>.  A web server might create an
<a href="#id70"><span class="problematic" id="id71">:class:`http_request_handler`</span></a> object for each incoming client connection.
Notice that initially the channel terminator is set to match the blank line at
the end of the HTTP headers, and a flag indicates that the headers are being
read.</p>
<div class="system-message" id="id68">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 159); <em><a href="#id69">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id70">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 159); <em><a href="#id71">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>Once the headers have been read, if the request is of type POST (indicating
that further data are present in the input stream) then the
<tt class="docutils literal"><span class="pre">Content-Length:</span></tt> header is used to set a numeric terminator to read the
right amount of data from the channel.</p>
<p>The <a href="#id72"><span class="problematic" id="id73">:meth:`handle_request`</span></a> method is called once all relevant input has been
marshalled, after setting the channel terminator to <tt class="docutils literal">None</tt> to ensure that
any extraneous data sent by the web client are ignored.</p>
<div class="system-message" id="id72">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asynchat.rst</tt>, line 171); <em><a href="#id73">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<pre class="literal-block">
import asynchat

class http_request_handler(asynchat.async_chat):

    def __init__(self, sock, addr, sessions, log):
        asynchat.async_chat.__init__(self, sock=sock)
        self.addr = addr
        self.sessions = sessions
        self.ibuffer = []
        self.obuffer = b&quot;&quot;
        self.set_terminator(b&quot;\r\n\r\n&quot;)
        self.reading_headers = True
        self.handling = False
        self.cgi_data = None
        self.log = log

    def collect_incoming_data(self, data):
        &quot;&quot;&quot;Buffer the data&quot;&quot;&quot;
        self.ibuffer.append(data)

    def found_terminator(self):
        if self.reading_headers:
            self.reading_headers = False
            self.parse_headers(b&quot;&quot;.join(self.ibuffer))
            self.ibuffer = []
            if self.op.upper() == b&quot;POST&quot;:
                clen = self.headers.getheader(&quot;content-length&quot;)
                self.set_terminator(int(clen))
            else:
                self.handling = True
                self.set_terminator(None)
                self.handle_request()
        elif not self.handling:
            self.set_terminator(None)  # browsers sometimes over-send
            self.cgi_data = parse(self.headers, b&quot;&quot;.join(self.ibuffer))
            self.handling = True
            self.ibuffer = []
            self.handle_request()
</pre>
</div>
</div>
</body>
</html>
