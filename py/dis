<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`dis` --- Disassembler for Python bytecode</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-dis-disassembler-for-python-bytecode">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`dis`</span></a> --- Disassembler for Python bytecode</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: dis
   :synopsis: Disassembler for Python bytecode.

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/dis.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 7); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<hr class="docutils" />
<p>The <a href="#id5"><span class="problematic" id="id6">:mod:`dis`</span></a> module supports the analysis of CPython <a href="#id7"><span class="problematic" id="id8">:term:`bytecode`</span></a> by
disassembling it. The CPython bytecode which this module takes as an input is
defined in the file <a href="#id9"><span class="problematic" id="id10">:file:`Include/opcode.h`</span></a> and used by the compiler and the
interpreter.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 11); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 11); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 11); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 16)</p>
<p>Unknown directive type &quot;impl-detail&quot;.</p>
<pre class="literal-block">
.. impl-detail::

   Bytecode is an implementation detail of the CPython interpreter.  No
   guarantees are made that bytecode will not be added, removed, or changed
   between versions of Python.  Use of this module should not be considered to
   work across Python VMs or Python releases.

   .. versionchanged:: 3.6
      Use 2 bytes for each instruction. Previously the number of bytes varied
      by instruction.


</pre>
</div>
<p>Example: Given the function <a href="#id11"><span class="problematic" id="id12">:func:`myfunc`</span></a>:</p>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 28); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
def myfunc(alist):
    return len(alist)
</pre>
<p>the following command can be used to display the disassembly of
<a href="#id13"><span class="problematic" id="id14">:func:`myfunc`</span></a>:</p>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 33); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; dis.dis(myfunc)
  2           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (alist)
              4 CALL_FUNCTION            1
              6 RETURN_VALUE
</pre>
<p>(The &quot;2&quot; is a line number).</p>
<div class="section" id="bytecode-analysis">
<h1>Bytecode analysis</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 47)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.4

</pre>
</div>
<p>The bytecode analysis API allows pieces of Python code to be wrapped in a
<a href="#id15"><span class="problematic" id="id16">:class:`Bytecode`</span></a> object that provides easy access to details of the compiled
code.</p>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 49); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 53)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;Bytecode(x, *, first_line=None, current_offset=None)&quot;.</p>
<pre class="literal-block">
.. class:: Bytecode(x, *, first_line=None, current_offset=None)


   Analyse the bytecode corresponding to a function, generator, asynchronous
   generator, coroutine, method, string of source code, or a code object (as
   returned by :func:`compile`).

   This is a convenience wrapper around many of the functions listed below, most
   notably :func:`get_instructions`, as iterating over a :class:`Bytecode`
   instance yields the bytecode operations as :class:`Instruction` instances.

   If *first_line* is not ``None``, it indicates the line number that should be
   reported for the first source line in the disassembled code.  Otherwise, the
   source line information (if any) is taken directly from the disassembled code
   object.

   If *current_offset* is not ``None``, it refers to an instruction offset in the
   disassembled code. Setting this means :meth:`.dis` will display a &quot;current
   instruction&quot; marker against the specified opcode.

   .. classmethod:: from_traceback(tb)

      Construct a :class:`Bytecode` instance from the given traceback, setting
      *current_offset* to the instruction responsible for the exception.

   .. data:: codeobj

      The compiled code object.

   .. data:: first_line

      The first source line of the code object (if available)

   .. method:: dis()

      Return a formatted view of the bytecode operations (the same as printed by
      :func:`dis.dis`, but returned as a multi-line string).

   .. method:: info()

      Return a formatted multi-line string with detailed information about the
      code object, like :func:`code_info`.

   .. versionchanged:: 3.7
      This can now handle coroutine and asynchronous generator objects.

</pre>
</div>
<p>Example:</p>
<pre class="literal-block">
&gt;&gt;&gt; bytecode = dis.Bytecode(myfunc)
&gt;&gt;&gt; for instr in bytecode:
...     print(instr.opname)
...
LOAD_GLOBAL
LOAD_FAST
CALL_FUNCTION
RETURN_VALUE
</pre>
</div>
<div class="section" id="analysis-functions">
<h1>Analysis functions</h1>
<p>The <a href="#id17"><span class="problematic" id="id18">:mod:`dis`</span></a> module also defines the following analysis functions that convert
the input directly to the desired output. They can be useful if only a single
operation is being performed, so the intermediate analysis object isn't useful:</p>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 114); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 118)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: code_info(x)

   Return a formatted multi-line string with detailed code object information
   for the supplied function, generator, asynchronous generator, coroutine,
   method, source code string or code object.

   Note that the exact contents of code info strings are highly implementation
   dependent and they may change arbitrarily across Python VMs or Python
   releases.

   .. versionadded:: 3.2

   .. versionchanged:: 3.7
      This can now handle coroutine and asynchronous generator objects.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 134)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: show_code(x, *, file=None)

   Print detailed code object information for the supplied function, method,
   source code string or code object to *file* (or ``sys.stdout`` if *file*
   is not specified).

   This is a convenient shorthand for ``print(code_info(x), file=file)``,
   intended for interactive exploration at the interpreter prompt.

   .. versionadded:: 3.2

   .. versionchanged:: 3.4
      Added *file* parameter.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 149)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: dis(x=None, *, file=None, depth=None)

   Disassemble the *x* object.  *x* can denote either a module, a class, a
   method, a function, a generator, an asynchronous generator, a coroutine,
   a code object, a string of source code or a byte sequence of raw bytecode.
   For a module, it disassembles all functions. For a class, it disassembles
   all methods (including class and static methods). For a code object or
   sequence of raw bytecode, it prints one line per bytecode instruction.
   It also recursively disassembles nested code objects (the code of
   comprehensions, generator expressions and nested functions, and the code
   used for building nested classes).
   Strings are first compiled to code objects with the :func:`compile`
   built-in function before being disassembled.  If no object is provided, this
   function disassembles the last traceback.

   The disassembly is written as text to the supplied *file* argument if
   provided and to ``sys.stdout`` otherwise.

   The maximal depth of recursion is limited by *depth* unless it is ``None``.
   ``depth=0`` means no recursion.

   .. versionchanged:: 3.4
      Added *file* parameter.

   .. versionchanged:: 3.7
      Implemented recursive disassembling and added *depth* parameter.

   .. versionchanged:: 3.7
      This can now handle coroutine and asynchronous generator objects.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 180)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: distb(tb=None, *, file=None)

   Disassemble the top-of-stack function of a traceback, using the last
   traceback if none was passed.  The instruction causing the exception is
   indicated.

   The disassembly is written as text to the supplied *file* argument if
   provided and to ``sys.stdout`` otherwise.

   .. versionchanged:: 3.4
      Added *file* parameter.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 193)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: disassemble(code, lasti=-1, *, file=None)
              disco(code, lasti=-1, *, file=None)

   Disassemble a code object, indicating the last instruction if *lasti* was
   provided.  The output is divided in the following columns:

   #. the line number, for the first instruction of each line
   #. the current instruction, indicated as ``--&gt;``,
   #. a labelled instruction, indicated with ``&gt;&gt;``,
   #. the address of the instruction,
   #. the operation code name,
   #. operation parameters, and
   #. interpretation of the parameters in parentheses.

   The parameter interpretation recognizes local and global variable names,
   constant values, branch targets, and compare operators.

   The disassembly is written as text to the supplied *file* argument if
   provided and to ``sys.stdout`` otherwise.

   .. versionchanged:: 3.4
      Added *file* parameter.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 217)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: get_instructions(x, *, first_line=None)

   Return an iterator over the instructions in the supplied function, method,
   source code string or code object.

   The iterator generates a series of :class:`Instruction` named tuples giving
   the details of each operation in the supplied code.

   If *first_line* is not ``None``, it indicates the line number that should be
   reported for the first source line in the disassembled code.  Otherwise, the
   source line information (if any) is taken directly from the disassembled code
   object.

   .. versionadded:: 3.4


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 233)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: findlinestarts(code)

   This generator function uses the ``co_firstlineno`` and ``co_lnotab``
   attributes of the code object *code* to find the offsets which are starts of
   lines in the source code.  They are generated as ``(offset, lineno)`` pairs.
   See :source:`Objects/lnotab_notes.txt` for the ``co_lnotab`` format and
   how to decode it.

   .. versionchanged:: 3.6
      Line numbers can be decreasing. Before, they were always increasing.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 245)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: findlabels(code)

   Detect all offsets in the raw compiled bytecode string *code* which are jump targets, and
   return a list of these offsets.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 251)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: stack_effect(opcode, oparg=None, *, jump=None)

   Compute the stack effect of *opcode* with argument *oparg*.

   If the code has a jump target and *jump* is ``True``, :func:`~stack_effect`
   will return the stack effect of jumping.  If *jump* is ``False``,
   it will return the stack effect of not jumping. And if *jump* is
   ``None`` (default), it will return the maximal stack effect of both cases.

   .. versionadded:: 3.4

   .. versionchanged:: 3.8
      Added *jump* parameter.


</pre>
</div>
</div>
<div class="section" id="python-bytecode-instructions">
<span id="bytecodes"></span><h1>Python Bytecode Instructions</h1>
<p>The <a href="#id19"><span class="problematic" id="id20">:func:`get_instructions`</span></a> function and <a href="#id21"><span class="problematic" id="id22">:class:`Bytecode`</span></a> class provide
details of bytecode instructions as <a href="#id23"><span class="problematic" id="id24">:class:`Instruction`</span></a> instances:</p>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 271); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 271); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 271); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="instruction">Details for a bytecode operation</p>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 278)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: opcode

   numeric code for operation, corresponding to the opcode values listed
   below and the bytecode values in the :ref:`opcode_collections`.


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 284)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: opname

   human readable name for operation


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 289)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: arg

   numeric argument to operation (if any), otherwise ``None``


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 294)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: argval

   resolved arg value (if known), otherwise same as arg


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 299)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: argrepr

   human readable description of operation argument


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 304)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: offset

   start index of operation within bytecode sequence


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 309)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: starts_line

   line started by this opcode (if any), otherwise ``None``


</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 314)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: is_jump_target

   ``True`` if other code jumps to here, otherwise ``False``

</pre>
</div>
<div class="instruction system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 318)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.4
</pre>
</div>
<p>The Python compiler currently generates the following bytecode instructions.</p>
<p><strong>General instructions</strong></p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 326)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: NOP

   Do nothing code.  Used as a placeholder by the bytecode optimizer.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 331)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: POP_TOP

   Removes the top-of-stack (TOS) item.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 336)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: ROT_TWO

   Swaps the two top-most stack items.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 341)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: ROT_THREE

   Lifts second and third stack item one position up, moves top down to position
   three.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 347)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: ROT_FOUR

   Lifts second, third and fourth stack items one position up, moves top down
   to position four.

   .. versionadded:: 3.8


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 355)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DUP_TOP

   Duplicates the reference on top of the stack.

   .. versionadded:: 3.2


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 362)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DUP_TOP_TWO

   Duplicates the two references on top of the stack, leaving them in the
   same order.

   .. versionadded:: 3.2


</pre>
</div>
<p><strong>Unary operations</strong></p>
<p>Unary operations take the top of the stack, apply the operation, and push the
result back on the stack.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 375)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: UNARY_POSITIVE

   Implements ``TOS = +TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 380)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: UNARY_NEGATIVE

   Implements ``TOS = -TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 385)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: UNARY_NOT

   Implements ``TOS = not TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 390)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: UNARY_INVERT

   Implements ``TOS = ~TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 395)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: GET_ITER

   Implements ``TOS = iter(TOS)``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 400)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: GET_YIELD_FROM_ITER

   If ``TOS`` is a :term:`generator iterator` or :term:`coroutine` object
   it is left as is.  Otherwise, implements ``TOS = iter(TOS)``.

   .. versionadded:: 3.5


</pre>
</div>
<p><strong>Binary operations</strong></p>
<p>Binary operations remove the top of the stack (TOS) and the second top-most
stack item (TOS1) from the stack.  They perform the operation, and put the
result back on the stack.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 414)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_POWER

   Implements ``TOS = TOS1 ** TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 419)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_MULTIPLY

   Implements ``TOS = TOS1 * TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 424)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_MATRIX_MULTIPLY

   Implements ``TOS = TOS1 &#64; TOS``.

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 431)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_FLOOR_DIVIDE

   Implements ``TOS = TOS1 // TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 436)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_TRUE_DIVIDE

   Implements ``TOS = TOS1 / TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 441)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_MODULO

   Implements ``TOS = TOS1 % TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 446)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_ADD

   Implements ``TOS = TOS1 + TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 451)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_SUBTRACT

   Implements ``TOS = TOS1 - TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 456)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_SUBSCR

   Implements ``TOS = TOS1[TOS]``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 461)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_LSHIFT

   Implements ``TOS = TOS1 &lt;&lt; TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 466)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_RSHIFT

   Implements ``TOS = TOS1 &gt;&gt; TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 471)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_AND

   Implements ``TOS = TOS1 &amp; TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 476)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_XOR

   Implements ``TOS = TOS1 ^ TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 481)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BINARY_OR

   Implements ``TOS = TOS1 | TOS``.


</pre>
</div>
<p><strong>In-place operations</strong></p>
<p>In-place operations are like binary operations, in that they remove TOS and
TOS1, and push the result back on the stack, but the operation is done in-place
when TOS1 supports it, and the resulting TOS may be (but does not have to be)
the original TOS1.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 493)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_POWER

   Implements in-place ``TOS = TOS1 ** TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 498)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_MULTIPLY

   Implements in-place ``TOS = TOS1 * TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 503)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_MATRIX_MULTIPLY

   Implements in-place ``TOS = TOS1 &#64; TOS``.

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 510)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_FLOOR_DIVIDE

   Implements in-place ``TOS = TOS1 // TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 515)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_TRUE_DIVIDE

   Implements in-place ``TOS = TOS1 / TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 520)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_MODULO

   Implements in-place ``TOS = TOS1 % TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 525)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_ADD

   Implements in-place ``TOS = TOS1 + TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 530)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_SUBTRACT

   Implements in-place ``TOS = TOS1 - TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 535)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_LSHIFT

   Implements in-place ``TOS = TOS1 &lt;&lt; TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 540)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_RSHIFT

   Implements in-place ``TOS = TOS1 &gt;&gt; TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 545)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_AND

   Implements in-place ``TOS = TOS1 &amp; TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 550)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_XOR

   Implements in-place ``TOS = TOS1 ^ TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 555)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: INPLACE_OR

   Implements in-place ``TOS = TOS1 | TOS``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 560)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: STORE_SUBSCR

   Implements ``TOS1[TOS] = TOS2``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 565)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DELETE_SUBSCR

   Implements ``del TOS1[TOS]``.


</pre>
</div>
<p><strong>Coroutine opcodes</strong></p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 572)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: GET_AWAITABLE

   Implements ``TOS = get_awaitable(TOS)``, where ``get_awaitable(o)``
   returns ``o`` if ``o`` is a coroutine object or a generator object with
   the CO_ITERABLE_COROUTINE flag, or resolves
   ``o.__await__``.

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 582)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: GET_AITER

   Implements ``TOS = TOS.__aiter__()``.

   .. versionadded:: 3.5
   .. versionchanged:: 3.7
      Returning awaitable objects from ``__aiter__`` is no longer
      supported.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 592)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: GET_ANEXT

   Implements ``PUSH(get_awaitable(TOS.__anext__()))``.  See ``GET_AWAITABLE``
   for details about ``get_awaitable``

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 600)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: END_ASYNC_FOR

   Terminates an :keyword:`async for` loop.  Handles an exception raised
   when awaiting a next item.  If TOS is :exc:`StopAsyncIteration` pop 7
   values from the stack and restore the exception state using the second
   three of them.  Otherwise re-raise the exception using the three values
   from the stack.  An exception handler block is removed from the block stack.

   .. versionadded:: 3.8


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 611)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BEFORE_ASYNC_WITH

   Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the
   stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack.

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 619)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: SETUP_ASYNC_WITH

   Creates a new frame object.

   .. versionadded:: 3.5



</pre>
</div>
<p><strong>Miscellaneous opcodes</strong></p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 629)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: PRINT_EXPR

   Implements the expression statement for the interactive mode.  TOS is removed
   from the stack and printed.  In non-interactive mode, an expression statement
   is terminated with :opcode:`POP_TOP`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 636)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: SET_ADD (i)

   Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 641)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LIST_APPEND (i)

   Calls ``list.append(TOS1[-i], TOS)``.  Used to implement list comprehensions.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 646)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: MAP_ADD (i)

   Calls ``dict.__setitem__(TOS1[-i], TOS1, TOS)``.  Used to implement dict
   comprehensions.

   .. versionadded:: 3.1
   .. versionchanged:: 3.8
      Map value is TOS and map key is TOS1. Before, those were reversed.

</pre>
</div>
<p>For all of the <a href="#id25"><span class="problematic" id="id26">:opcode:`SET_ADD`</span></a>, <a href="#id27"><span class="problematic" id="id28">:opcode:`LIST_APPEND`</span></a> and <a href="#id29"><span class="problematic" id="id30">:opcode:`MAP_ADD`</span></a>
instructions, while the added value or key/value pair is popped off, the
container object remains on the stack so that it is available for further
iterations of the loop.</p>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 655); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;opcode&quot;.</div>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 655); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;opcode&quot;.</div>
<div class="system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 655); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;opcode&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 661)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: RETURN_VALUE

   Returns with TOS to the caller of the function.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 666)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: YIELD_VALUE

   Pops TOS and yields it from a :term:`generator`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 671)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: YIELD_FROM

   Pops TOS and delegates to it as a subiterator from a :term:`generator`.

   .. versionadded:: 3.3


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 678)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: SETUP_ANNOTATIONS

   Checks whether ``__annotations__`` is defined in ``locals()``, if not it is
   set up to an empty ``dict``. This opcode is only emitted if a class
   or module body contains :term:`variable annotations &lt;variable annotation&gt;`
   statically.

   .. versionadded:: 3.6


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 688)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: IMPORT_STAR

   Loads all symbols not starting with ``'_'`` directly from the module TOS to
   the local namespace. The module is popped after loading all names. This
   opcode implements ``from module import *``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 695)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: POP_BLOCK

   Removes one block from the block stack.  Per frame, there is a stack of
   blocks, denoting :keyword:`try` statements, and such.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 701)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: POP_EXCEPT

   Removes one block from the block stack. The popped block must be an exception
   handler block, as implicitly created when entering an except handler.  In
   addition to popping extraneous values from the frame stack, the last three
   popped values are used to restore the exception state.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 709)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: RERAISE

    Re-raises the exception currently on top of the stack.

    .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 716)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: WITH_EXCEPT_START

    Calls the function in position 7 on the stack with the top three
    items on the stack as arguments.
    Used to implement the call ``context_manager.__exit__(*exc_info())`` when an exception
    has occurred in a :keyword:`with` statement.

    .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 726)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_ASSERTION_ERROR

   Pushes :exc:`AssertionError` onto the stack.  Used by the :keyword:`assert`
   statement.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 734)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_BUILD_CLASS

   Pushes :func:`builtins.__build_class__` onto the stack.  It is later called
   by :opcode:`CALL_FUNCTION` to construct a class.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 740)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: SETUP_WITH (delta)

   This opcode performs several operations before a with block starts.  First,
   it loads :meth:`~object.__exit__` from the context manager and pushes it onto
   the stack for later use by :opcode:`WITH_CLEANUP_START`.  Then,
   :meth:`~object.__enter__` is called, and a finally block pointing to *delta*
   is pushed.  Finally, the result of calling the ``__enter__()`` method is pushed onto
   the stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), or
   store it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or
   :opcode:`UNPACK_SEQUENCE`).

   .. versionadded:: 3.2


</pre>
</div>
<p>All of the following opcodes use their arguments.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 756)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: STORE_NAME (namei)

   Implements ``name = TOS``. *namei* is the index of *name* in the attribute
   :attr:`co_names` of the code object. The compiler tries to use
   :opcode:`STORE_FAST` or :opcode:`STORE_GLOBAL` if possible.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 763)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DELETE_NAME (namei)

   Implements ``del name``, where *namei* is the index into :attr:`co_names`
   attribute of the code object.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 769)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: UNPACK_SEQUENCE (count)

   Unpacks TOS into *count* individual values, which are put onto the stack
   right-to-left.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 775)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: UNPACK_EX (counts)

   Implements assignment with a starred target: Unpacks an iterable in TOS into
   individual values, where the total number of values can be smaller than the
   number of items in the iterable: one of the new values will be a list of all
   leftover items.

   The low byte of *counts* is the number of values before the list value, the
   high byte of *counts* the number of values after it.  The resulting values
   are put onto the stack right-to-left.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 787)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: STORE_ATTR (namei)

   Implements ``TOS.name = TOS1``, where *namei* is the index of name in
   :attr:`co_names`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 793)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DELETE_ATTR (namei)

   Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 798)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: STORE_GLOBAL (namei)

   Works as :opcode:`STORE_NAME`, but stores the name as a global.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 803)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DELETE_GLOBAL (namei)

   Works as :opcode:`DELETE_NAME`, but deletes a global name.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 808)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_CONST (consti)

   Pushes ``co_consts[consti]`` onto the stack.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 813)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_NAME (namei)

   Pushes the value associated with ``co_names[namei]`` onto the stack.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 818)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_TUPLE (count)

   Creates a tuple consuming *count* items from the stack, and pushes the
   resulting tuple onto the stack.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 824)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_LIST (count)

   Works as :opcode:`BUILD_TUPLE`, but creates a list.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 829)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_SET (count)

   Works as :opcode:`BUILD_TUPLE`, but creates a set.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 834)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_MAP (count)

   Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items
   so that the dictionary holds *count* entries:
   ``{..., TOS3: TOS2, TOS1: TOS}``.

   .. versionchanged:: 3.5
      The dictionary is created from stack items instead of creating an
      empty dictionary pre-sized to hold *count* items.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 845)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_CONST_KEY_MAP (count)

   The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the
   top element on the stack which contains a tuple of keys, then starting from
   ``TOS1``, pops *count* values to form values in the built dictionary.

   .. versionadded:: 3.6


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 854)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_STRING (count)

   Concatenates *count* strings from the stack and pushes the resulting string
   onto the stack.

   .. versionadded:: 3.6


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 862)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LIST_TO_TUPLE

   Pops a list from the stack and pushes a tuple containing the same values.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 869)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LIST_EXTEND (i)

   Calls ``list.extend(TOS1[-i], TOS)``.  Used to build lists.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 876)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: SET_UPDATE (i)

   Calls ``set.update(TOS1[-i], TOS)``.  Used to build sets.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 883)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DICT_UPDATE (i)

   Calls ``dict.update(TOS1[-i], TOS)``.  Used to build dicts.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 890)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DICT_MERGE

   Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 897)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_ATTR (namei)

   Replaces TOS with ``getattr(TOS, co_names[namei])``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 902)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: COMPARE_OP (opname)

   Performs a Boolean operation.  The operation name can be found in
   ``cmp_op[opname]``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 908)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: IS_OP (invert)

   Performs ``is`` comparison, or ``is not`` if ``invert`` is 1.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 915)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: CONTAINS_OP (invert)

   Performs ``in`` comparison, or ``not in`` if ``invert`` is 1.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 922)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: IMPORT_NAME (namei)

   Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide
   the *fromlist* and *level* arguments of :func:`__import__`.  The module
   object is pushed onto the stack.  The current namespace is not affected: for
   a proper import statement, a subsequent :opcode:`STORE_FAST` instruction
   modifies the namespace.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 931)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: IMPORT_FROM (namei)

   Loads the attribute ``co_names[namei]`` from the module found in TOS. The
   resulting object is pushed onto the stack, to be subsequently stored by a
   :opcode:`STORE_FAST` instruction.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 938)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: JUMP_FORWARD (delta)

   Increments bytecode counter by *delta*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 943)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: POP_JUMP_IF_TRUE (target)

   If TOS is true, sets the bytecode counter to *target*.  TOS is popped.

   .. versionadded:: 3.1


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 950)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: POP_JUMP_IF_FALSE (target)

   If TOS is false, sets the bytecode counter to *target*.  TOS is popped.

   .. versionadded:: 3.1

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 956)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: JUMP_IF_NOT_EXC_MATCH (target)

   Tests whether the second value on the stack is an exception matching TOS,
   and jumps if it is not. Pops two values from the stack.

   .. versionadded:: 3.9


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 964)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: JUMP_IF_TRUE_OR_POP (target)

   If TOS is true, sets the bytecode counter to *target* and leaves TOS on the
   stack.  Otherwise (TOS is false), TOS is popped.

   .. versionadded:: 3.1


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 972)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: JUMP_IF_FALSE_OR_POP (target)

   If TOS is false, sets the bytecode counter to *target* and leaves TOS on the
   stack.  Otherwise (TOS is true), TOS is popped.

   .. versionadded:: 3.1


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 980)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: JUMP_ABSOLUTE (target)

   Set bytecode counter to *target*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 985)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: FOR_ITER (delta)

   TOS is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.  If
   this yields a new value, push it on the stack (leaving the iterator below
   it).  If the iterator indicates it is exhausted, TOS is popped, and the byte
   code counter is incremented by *delta*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 993)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_GLOBAL (namei)

   Loads the global named ``co_names[namei]`` onto the stack.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 998)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: SETUP_FINALLY (delta)

   Pushes a try block from a try-finally or try-except clause onto the block
   stack.  *delta* points to the finally block or the first except block.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1004)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_FAST (var_num)

   Pushes a reference to the local ``co_varnames[var_num]`` onto the stack.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1009)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: STORE_FAST (var_num)

   Stores TOS into the local ``co_varnames[var_num]``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1014)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DELETE_FAST (var_num)

   Deletes local ``co_varnames[var_num]``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1019)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_CLOSURE (i)

   Pushes a reference to the cell contained in slot *i* of the cell and free
   variable storage.  The name of the variable is ``co_cellvars[i]`` if *i* is
   less than the length of *co_cellvars*.  Otherwise it is ``co_freevars[i -
   len(co_cellvars)]``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1027)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_DEREF (i)

   Loads the cell contained in slot *i* of the cell and free variable storage.
   Pushes a reference to the object the cell contains on the stack.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1033)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_CLASSDEREF (i)

   Much like :opcode:`LOAD_DEREF` but first checks the locals dictionary before
   consulting the cell.  This is used for loading free variables in class
   bodies.

   .. versionadded:: 3.4


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1042)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: STORE_DEREF (i)

   Stores TOS into the cell contained in slot *i* of the cell and free variable
   storage.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1048)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: DELETE_DEREF (i)

   Empties the cell contained in slot *i* of the cell and free variable storage.
   Used by the :keyword:`del` statement.

   .. versionadded:: 3.2


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1056)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: RAISE_VARARGS (argc)

   Raises an exception using one of the 3 forms of the ``raise`` statement,
   depending on the value of *argc*:

   * 0: ``raise`` (re-raise previous exception)
   * 1: ``raise TOS`` (raise exception instance or type at ``TOS``)
   * 2: ``raise TOS1 from TOS`` (raise exception instance or type at ``TOS1``
     with ``__cause__`` set to ``TOS``)


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1067)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: CALL_FUNCTION (argc)

   Calls a callable object with positional arguments.
   *argc* indicates the number of positional arguments.
   The top of the stack contains positional arguments, with the right-most
   argument on top.  Below the arguments is a callable object to call.
   ``CALL_FUNCTION`` pops all arguments and the callable object off the stack,
   calls the callable object with those arguments, and pushes the return value
   returned by the callable object.

   .. versionchanged:: 3.6
      This opcode is used only for calls with positional arguments.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1081)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: CALL_FUNCTION_KW (argc)

   Calls a callable object with positional (if any) and keyword arguments.
   *argc* indicates the total number of positional and keyword arguments.
   The top element on the stack contains a tuple with the names of the
   keyword arguments, which must be strings.
   Below that are the values for the keyword arguments,
   in the order corresponding to the tuple.
   Below that are positional arguments, with the right-most parameter on
   top.  Below the arguments is a callable object to call.
   ``CALL_FUNCTION_KW`` pops all arguments and the callable object off the stack,
   calls the callable object with those arguments, and pushes the return value
   returned by the callable object.

   .. versionchanged:: 3.6
      Keyword arguments are packed in a tuple instead of a dictionary,
      *argc* indicates the total number of arguments.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1100)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: CALL_FUNCTION_EX (flags)

   Calls a callable object with variable set of positional and keyword
   arguments.  If the lowest bit of *flags* is set, the top of the stack
   contains a mapping object containing additional keyword arguments.
   Before the callable is called, the mapping object and iterable object
   are each &quot;unpacked&quot; and their contents passed in as keyword and
   positional arguments respectively.
   ``CALL_FUNCTION_EX`` pops all arguments and the callable object off the stack,
   calls the callable object with those arguments, and pushes the return value
   returned by the callable object.

   .. versionadded:: 3.6


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1115)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: LOAD_METHOD (namei)

   Loads a method named ``co_names[namei]`` from the TOS object. TOS is popped.
   This bytecode distinguishes two cases: if TOS has a method with the correct
   name, the bytecode pushes the unbound method and TOS. TOS will be used as
   the first argument (``self``) by :opcode:`CALL_METHOD` when calling the
   unbound method. Otherwise, ``NULL`` and the object return by the attribute
   lookup are pushed.

   .. versionadded:: 3.7


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1127)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: CALL_METHOD (argc)

   Calls a method.  *argc* is the number of positional arguments.
   Keyword arguments are not supported.  This opcode is designed to be used
   with :opcode:`LOAD_METHOD`.  Positional arguments are on top of the stack.
   Below them, the two items described in :opcode:`LOAD_METHOD` are on the
   stack (either ``self`` and an unbound method object or ``NULL`` and an
   arbitrary callable). All of them are popped and the return value is pushed.

   .. versionadded:: 3.7


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1139)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: MAKE_FUNCTION (flags)

   Pushes a new function object on the stack.  From bottom to top, the consumed
   stack must consist of values if the argument carries a specified flag value

   * ``0x01`` a tuple of default values for positional-only and
     positional-or-keyword parameters in positional order
   * ``0x02`` a dictionary of keyword-only parameters' default values
   * ``0x04`` an annotation dictionary
   * ``0x08`` a tuple containing cells for free variables, making a closure
   * the code associated with the function (at TOS1)
   * the :term:`qualified name` of the function (at TOS)


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1153)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: BUILD_SLICE (argc)

   .. index:: builtin: slice

   Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2,
   ``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is
   pushed. See the :func:`slice` built-in function for more information.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1162)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: EXTENDED_ARG (ext)

   Prefixes any opcode which has an argument too big to fit into the default one
   byte. *ext* holds an additional byte which act as higher bits in the argument.
   For each opcode, at most three prefixal ``EXTENDED_ARG`` are allowed, forming
   an argument from two-byte to four-byte.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1170)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: FORMAT_VALUE (flags)

   Used for implementing formatted literal strings (f-strings).  Pops
   an optional *fmt_spec* from the stack, then a required *value*.
   *flags* is interpreted as follows:

   * ``(flags &amp; 0x03) == 0x00``: *value* is formatted as-is.
   * ``(flags &amp; 0x03) == 0x01``: call :func:`str` on *value* before
     formatting it.
   * ``(flags &amp; 0x03) == 0x02``: call :func:`repr` on *value* before
     formatting it.
   * ``(flags &amp; 0x03) == 0x03``: call :func:`ascii` on *value* before
     formatting it.
   * ``(flags &amp; 0x04) == 0x04``: pop *fmt_spec* from the stack and use
     it, else use an empty *fmt_spec*.

   Formatting is performed using :c:func:`PyObject_Format`.  The
   result is pushed on the stack.

   .. versionadded:: 3.6


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1192)</p>
<p>Unknown directive type &quot;opcode&quot;.</p>
<pre class="literal-block">
.. opcode:: HAVE_ARGUMENT

   This is not really an opcode.  It identifies the dividing line between
   opcodes which don't use their argument and those that do
   (``&lt; HAVE_ARGUMENT`` and ``&gt;= HAVE_ARGUMENT``, respectively).

   .. versionchanged:: 3.6
      Now every instruction has an argument, but opcodes ``&lt; HAVE_ARGUMENT``
      ignore it. Before, only opcodes ``&gt;= HAVE_ARGUMENT`` had an argument.


</pre>
</div>
</div>
<div class="section" id="id31">
<span id="opcode-collections"></span><h1>Opcode collections</h1>
<p>These collections are provided for automatic introspection of bytecode
instructions:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1211)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: opname

   Sequence of operation names, indexable using the bytecode.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1216)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: opmap

   Dictionary mapping operation names to bytecodes.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1221)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: cmp_op

   Sequence of all compare operation names.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1226)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: hasconst

   Sequence of bytecodes that access a constant.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1231)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: hasfree

   Sequence of bytecodes that access a free variable (note that 'free' in this
   context refers to names in the current scope that are referenced by inner
   scopes or names in outer scopes that are referenced from this scope.  It does
   *not* include references to global or builtin scopes).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1239)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: hasname

   Sequence of bytecodes that access an attribute by name.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1244)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: hasjrel

   Sequence of bytecodes that have a relative jump target.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1249)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: hasjabs

   Sequence of bytecodes that have an absolute jump target.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1254)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: haslocal

   Sequence of bytecodes that access a local variable.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">dis.rst</tt>, line 1259)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: hascompare

   Sequence of bytecodes of Boolean operations.
</pre>
</div>
</div>
</div>
</body>
</html>
