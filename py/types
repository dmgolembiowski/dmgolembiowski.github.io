<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`types` --- Dynamic type creation and names for built-in types</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-types-dynamic-type-creation-and-names-for-built-in-types">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`types`</span></a> --- Dynamic type creation and names for built-in types</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: types
   :synopsis: Names for built-in types.

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/types.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 7); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<hr class="docutils" />
<p>This module defines utility functions to assist in dynamic creation of
new types.</p>
<p>It also defines names for some object types that are used by the standard
Python interpreter, but not exposed as builtins like <a href="#id5"><span class="problematic" id="id6">:class:`int`</span></a> or
<a href="#id7"><span class="problematic" id="id8">:class:`str`</span></a> are.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 14); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 14); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>Finally, it provides some additional type-related utility classes and functions
that are not fundamental enough to be builtins.</p>
<div class="section" id="dynamic-type-creation">
<h1>Dynamic Type Creation</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 25)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: new_class(name, bases=(), kwds=None, exec_body=None)

   Creates a class object dynamically using the appropriate metaclass.

   The first three arguments are the components that make up a class
   definition header: the class name, the base classes (in order), the
   keyword arguments (such as ``metaclass``).

   The *exec_body* argument is a callback that is used to populate the
   freshly created class namespace. It should accept the class namespace
   as its sole argument and update the namespace directly with the class
   contents. If no callback is provided, it has the same effect as passing
   in ``lambda ns: ns``.

   .. versionadded:: 3.3

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 41)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: prepare_class(name, bases=(), kwds=None)

   Calculates the appropriate metaclass and creates the class namespace.

   The arguments are the components that make up a class definition header:
   the class name, the base classes (in order) and the keyword arguments
   (such as ``metaclass``).

   The return value is a 3-tuple: ``metaclass, namespace, kwds``

   *metaclass* is the appropriate metaclass, *namespace* is the
   prepared class namespace and *kwds* is an updated copy of the passed
   in *kwds* argument with any ``'metaclass'`` entry removed. If no *kwds*
   argument is passed in, this will be an empty dict.

   .. versionadded:: 3.3

   .. versionchanged:: 3.6

      The default value for the ``namespace`` element of the returned
      tuple has changed.  Now an insertion-order-preserving mapping is
      used when the metaclass does not have a ``__prepare__`` method.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 64)</p>
<p>Unknown directive type &quot;seealso&quot;.</p>
<pre class="literal-block">
.. seealso::

   :ref:`metaclasses`
      Full details of the class creation process supported by these functions

   :pep:`3115` - Metaclasses in Python 3000
      Introduced the ``__prepare__`` namespace hook

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 72)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: resolve_bases(bases)

   Resolve MRO entries dynamically as specified by :pep:`560`.

   This function looks for items in *bases* that are not instances of
   :class:`type`, and returns a tuple where each such object that has
   an ``__mro_entries__`` method is replaced with an unpacked result of
   calling this method.  If a *bases* item is an instance of :class:`type`,
   or it doesn't have an ``__mro_entries__`` method, then it is included in
   the return tuple unchanged.

   .. versionadded:: 3.7

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 85)</p>
<p>Unknown directive type &quot;seealso&quot;.</p>
<pre class="literal-block">
.. seealso::

   :pep:`560` - Core support for typing module and generic types


</pre>
</div>
</div>
<div class="section" id="standard-interpreter-types">
<h1>Standard Interpreter Types</h1>
<p>This module provides names for many of the types that are required to
implement a Python interpreter. It deliberately avoids including some of
the types that arise only incidentally during processing such as the
<tt class="docutils literal">listiterator</tt> type.</p>
<p>Typical use of these names is for <a href="#id9"><span class="problematic" id="id10">:func:`isinstance`</span></a> or
<a href="#id11"><span class="problematic" id="id12">:func:`issubclass`</span></a> checks.</p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 98); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 98); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>If you instantiate any of these types, note that signatures may vary between Python versions.</p>
<p>Standard names are defined for the following types:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 106)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: FunctionType
          LambdaType

   The type of user-defined functions and functions created by
   :keyword:`lambda`  expressions.

   .. audit-event:: function.__new__ code types.FunctionType

   The audit event only occurs for direct instantiation of function objects,
   and is not raised for normal compilation.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 118)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: GeneratorType

   The type of :term:`generator`-iterator objects, created by
   generator functions.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 124)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: CoroutineType

   The type of :term:`coroutine` objects, created by
   :keyword:`async def` functions.

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 132)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: AsyncGeneratorType

   The type of :term:`asynchronous generator`-iterator objects, created by
   asynchronous generator functions.

   .. versionadded:: 3.6


</pre>
</div>
<div class="codetype-kwargs system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 142)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index:: builtin: compile

</pre>
</div>
<p class="codetype-kwargs">The type for code objects such as returned by <a href="#id13"><span class="problematic" id="id14">:func:`compile`</span></a>.</p>
<div class="codetype-kwargs system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 144); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="codetype-kwargs system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 146)</p>
<p>Unknown directive type &quot;audit-event&quot;.</p>
<pre class="literal-block">
.. audit-event:: code.__new__ code,filename,name,argcount,posonlyargcount,kwonlyargcount,nlocals,stacksize,flags types.CodeType

</pre>
</div>
<p class="codetype-kwargs">Note that the audited arguments may not match the names or positions
required by the initializer.  The audit event only occurs for direct
instantiation of code objects, and is not raised for normal compilation.</p>
<div class="codetype-kwargs system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 152)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: CodeType.replace(**kwargs)

  Return a copy of the code object with new values for the specified fields.

  .. versionadded:: 3.8
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 158)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: CellType

   The type for cell objects: such objects are used as containers for
   a function's free variables.

   .. versionadded:: 3.8


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 166)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: MethodType

   The type of methods of user-defined class instances.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 171)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: BuiltinFunctionType
          BuiltinMethodType

   The type of built-in functions like :func:`len` or :func:`sys.exit`, and
   methods of built-in classes.  (Here, the term &quot;built-in&quot; means &quot;written in
   C&quot;.)


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 179)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: WrapperDescriptorType

   The type of methods of some built-in data types and base classes such as
   :meth:`object.__init__` or :meth:`object.__lt__`.

   .. versionadded:: 3.7


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 187)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: MethodWrapperType

   The type of *bound* methods of some built-in data types and base classes.
   For example it is the type of :code:`object().__str__`.

   .. versionadded:: 3.7


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 195)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: MethodDescriptorType

   The type of methods of some built-in data types such as :meth:`str.join`.

   .. versionadded:: 3.7


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 202)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: ClassMethodDescriptorType

   The type of *unbound* class methods of some built-in data types such as
   ``dict.__dict__['fromkeys']``.

   .. versionadded:: 3.7


</pre>
</div>
<p class="moduletype-name doc-none">The type of <a href="#id15"><span class="problematic" id="id16">:term:`modules &lt;module&gt;`</span></a>. The constructor takes the name of the
module to be created and optionally its <a href="#id17"><span class="problematic" id="id18">:term:`docstring`</span></a>.</p>
<div class="moduletype-name doc-none system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 212); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="moduletype-name doc-none system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 212); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="admonition moduletype-name doc-none note">
<p class="first admonition-title">Note</p>
<p>Use <a href="#id19"><span class="problematic" id="id20">:func:`importlib.util.module_from_spec`</span></a> to create a new module if you
wish to set the various import-controlled attributes.</p>
<div class="last system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 216); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</div>
<div class="moduletype-name doc-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 219)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: __doc__

   The :term:`docstring` of the module. Defaults to ``None``.

</pre>
</div>
<div class="moduletype-name doc-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 223)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: __loader__

   The :term:`loader` which loaded the module. Defaults to ``None``.

   This attribute is to match :attr:`importlib.machinery.ModuleSpec.loader`
   as stored in the attr:`__spec__` object.

   .. note::
      A future version of Python may stop setting this attribute by default.
      To guard against this potential change, preferrably read from the
      :attr:`__spec__` attribute instead or use
      ``getattr(module, &quot;__loader__&quot;, None)`` if you explicitly need to use
      this attribute.

   .. versionchanged:: 3.4
      Defaults to ``None``. Previously the attribute was optional.

</pre>
</div>
<div class="moduletype-name doc-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 240)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: __name__

   The name of the module. Expected to match
   :attr:`importlib.machinery.ModuleSpec.name`.

</pre>
</div>
<div class="moduletype-name doc-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 245)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: __package__

   Which :term:`package` a module belongs to. If the module is top-level
   (i.e. not a part of any specific package) then the attribute should be set
   to ``''``, else it should be set to the name of the package (which can be
   :attr:`__name__` if the module is a package itself). Defaults to ``None``.

   This attribute is to match :attr:`importlib.machinery.ModuleSpec.parent`
   as stored in the attr:`__spec__` object.

   .. note::
      A future version of Python may stop setting this attribute by default.
      To guard against this potential change, preferrably read from the
      :attr:`__spec__` attribute instead or use
      ``getattr(module, &quot;__package__&quot;, None)`` if you explicitly need to use
      this attribute.

   .. versionchanged:: 3.4
      Defaults to ``None``. Previously the attribute was optional.

</pre>
</div>
<div class="moduletype-name doc-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 265)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: __spec__

   A record of the the module's import-system-related state. Expected to be
   an instance of :class:`importlib.machinery.ModuleSpec`.

   .. versionadded:: 3.4
</pre>
</div>
<p class="genericalias-t-origin t-args">The type of <a href="#id21"><span class="problematic" id="id22">:ref:`parameterized generics &lt;types-genericalias&gt;`</span></a> such as
<tt class="docutils literal">list[int]</tt>.</p>
<div class="genericalias-t-origin t-args system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 275); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<p class="genericalias-t-origin t-args"><tt class="docutils literal">t_origin</tt> should be a non-parameterized generic class, such as <tt class="docutils literal">list</tt>,
<tt class="docutils literal">tuple</tt> or <tt class="docutils literal">dict</tt>.  <tt class="docutils literal">t_args</tt> should be a <a href="#id23"><span class="problematic" id="id24">:class:`tuple`</span></a> (possibly of
length 1) of types which parameterize <tt class="docutils literal">t_origin</tt>:</p>
<div class="genericalias-t-origin t-args system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 278); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="genericalias-t-origin t-args literal-block">
&gt;&gt;&gt; from types import GenericAlias

&gt;&gt;&gt; list[int] == GenericAlias(list, (int,))
True
&gt;&gt;&gt; dict[str, int] == GenericAlias(dict, (str, int))
True
</pre>
<div class="genericalias-t-origin t-args system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 289)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.9

</pre>
</div>
<div class="genericalias-t-origin t-args system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 291)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.9.2
   This type can now be subclassed.
</pre>
</div>
<p class="tracebacktype-tb-next tb-frame tb-lasti tb-lineno">The type of traceback objects such as found in <tt class="docutils literal"><span class="pre">sys.exc_info()[2]</span></tt>.</p>
<p class="tracebacktype-tb-next tb-frame tb-lasti tb-lineno">See <a href="#id25"><span class="problematic" id="id26">:ref:`the language reference &lt;traceback-objects&gt;`</span></a> for details of the
available attributes and operations, and guidance on creating tracebacks
dynamically.</p>
<div class="tracebacktype-tb-next tb-frame tb-lasti tb-lineno system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 299); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 304)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: FrameType

   The type of frame objects such as found in ``tb.tb_frame`` if ``tb`` is a
   traceback object.

   See :ref:`the language reference &lt;frame-objects&gt;` for details of the
   available attributes and operations.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 313)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: GetSetDescriptorType

   The type of objects defined in extension modules with ``PyGetSetDef``, such
   as ``FrameType.f_locals`` or ``array.array.typecode``.  This type is used as
   descriptor for object attributes; it has the same purpose as the
   :class:`property` type, but for classes defined in extension modules.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 321)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: MemberDescriptorType

   The type of objects defined in extension modules with ``PyMemberDef``, such
   as ``datetime.timedelta.days``.  This type is used as descriptor for simple C
   data members which use standard conversion functions; it has the same purpose
   as the :class:`property` type, but for classes defined in extension modules.

   .. impl-detail::

      In other implementations of Python, this type may be identical to
      ``GetSetDescriptorType``.

</pre>
</div>
<p class="mappingproxytype-mapping">Read-only proxy of a mapping. It provides a dynamic view on the mapping's
entries, which means that when the mapping changes, the view reflects these
changes.</p>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 339)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.3

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 341)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.9

   Updated to support the new union (``|``) operator from :pep:`584`, which
   simply delegates to the underlying mapping.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 346)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: key in proxy

   Return ``True`` if the underlying mapping has a key *key*, else
   ``False``.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 351)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: proxy[key]

   Return the item of the underlying mapping with key *key*.  Raises a
   :exc:`KeyError` if *key* is not in the underlying mapping.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 356)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: iter(proxy)

   Return an iterator over the keys of the underlying mapping.  This is a
   shortcut for ``iter(proxy.keys())``.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 361)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: len(proxy)

   Return the number of items in the underlying mapping.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 365)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: copy()

   Return a shallow copy of the underlying mapping.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 369)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get(key[, default])

   Return the value for *key* if *key* is in the underlying mapping, else
   *default*.  If *default* is not given, it defaults to ``None``, so that
   this method never raises a :exc:`KeyError`.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 375)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: items()

   Return a new view of the underlying mapping's items (``(key, value)``
   pairs).

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 380)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: keys()

   Return a new view of the underlying mapping's keys.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 384)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: values()

   Return a new view of the underlying mapping's values.

</pre>
</div>
<div class="mappingproxytype-mapping system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 388)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: reversed(proxy)

   Return a reverse iterator over the keys of the underlying mapping.

   .. versionadded:: 3.9
</pre>
</div>
</div>
<div class="section" id="additional-utility-classes-and-functions">
<h1>Additional Utility Classes and Functions</h1>
<p class="simplenamespace">A simple <a href="#id27"><span class="problematic" id="id28">:class:`object`</span></a> subclass that provides attribute access to its
namespace, as well as a meaningful repr.</p>
<div class="simplenamespace system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 400); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="simplenamespace">Unlike <a href="#id29"><span class="problematic" id="id30">:class:`object`</span></a>, with <tt class="docutils literal">SimpleNamespace</tt> you can add and remove
attributes.  If a <tt class="docutils literal">SimpleNamespace</tt> object is initialized with keyword
arguments, those are directly added to the underlying namespace.</p>
<div class="simplenamespace system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 403); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="simplenamespace">The type is roughly equivalent to the following code:</p>
<pre class="simplenamespace literal-block">
class SimpleNamespace:
    def __init__(self, /, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
        items = (f&quot;{k}={v!r}&quot; for k, v in self.__dict__.items())
        return &quot;{}({})&quot;.format(type(self).__name__, &quot;, &quot;.join(items))

    def __eq__(self, other):
        if isinstance(self, SimpleNamespace) and isinstance(other, SimpleNamespace):
           return self.__dict__ == other.__dict__
        return NotImplemented
</pre>
<p class="simplenamespace"><tt class="docutils literal">SimpleNamespace</tt> may be useful as a replacement for <tt class="docutils literal">class NS: pass</tt>.
However, for a structured record type use <a href="#id31"><span class="problematic" id="id32">:func:`~collections.namedtuple`</span></a>
instead.</p>
<div class="simplenamespace system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 422); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="simplenamespace system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 426)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.3

</pre>
</div>
<div class="simplenamespace system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 428)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.9
   Attribute order in the repr changed from alphabetical to insertion (like
   ``dict``).
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 432)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)

   Route attribute access on a class to __getattr__.

   This is a descriptor, used to define attributes that act differently when
   accessed through an instance and through a class.  Instance access remains
   normal, but access to an attribute through a class will be routed to the
   class's __getattr__ method; this is done by raising AttributeError.

   This allows one to have properties active on an instance, and have virtual
   attributes on the class with the same name (see :class:`enum.Enum` for an example).

   .. versionadded:: 3.4


</pre>
</div>
</div>
<div class="section" id="coroutine-utility-functions">
<h1>Coroutine Utility Functions</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">types.rst</tt>, line 450)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: coroutine(gen_func)

   This function transforms a :term:`generator` function into a
   :term:`coroutine function` which returns a generator-based coroutine.
   The generator-based coroutine is still a :term:`generator iterator`,
   but is also considered to be a :term:`coroutine` object and is
   :term:`awaitable`.  However, it may not necessarily implement
   the :meth:`__await__` method.

   If *gen_func* is a generator function, it will be modified in-place.

   If *gen_func* is not a generator function, it will be wrapped. If it
   returns an instance of :class:`collections.abc.Generator`, the instance
   will be wrapped in an *awaitable* proxy object.  All other types
   of objects will be returned as is.

   .. versionadded:: 3.5
</pre>
</div>
</div>
</div>
</body>
</html>
