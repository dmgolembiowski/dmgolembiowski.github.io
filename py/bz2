<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`bz2` --- Support for :program:`bzip2` compression</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-bz2-support-for-program-bzip2-compression">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`bz2`</span></a> --- Support for <a href="#id3"><span class="problematic" id="id4">:program:`bzip2`</span></a> compression</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 1); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: bz2
   :synopsis: Interfaces for bzip2 compression and decompression.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 7)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Gustavo Niemeyer &lt;niemeyer&#64;conectiva.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 8)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Nadeem Vawda &lt;nadeem.vawda&#64;gmail.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 9)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Gustavo Niemeyer &lt;niemeyer&#64;conectiva.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 10)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Nadeem Vawda &lt;nadeem.vawda&#64;gmail.com&gt;

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id5"><span class="problematic" id="id6">:source:`Lib/bz2.py`</span></a></p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 12); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<hr class="docutils" />
<p>This module provides a comprehensive interface for compressing and
decompressing data using the bzip2 compression algorithm.</p>
<p>The <a href="#id7"><span class="problematic" id="id8">:mod:`bz2`</span></a> module contains:</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 19); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<ul>
<li><p class="first">The <a href="#id9"><span class="problematic" id="id10">:func:`.open`</span></a> function and <a href="#id11"><span class="problematic" id="id12">:class:`BZ2File`</span></a> class for reading and
writing compressed files.</p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 21); <em><a href="#id10">backlink</a></em></p>
<p>Unknown interpreted text role &quot;func&quot;.</p>
</div>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 21); <em><a href="#id12">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first">The <a href="#id13"><span class="problematic" id="id14">:class:`BZ2Compressor`</span></a> and <a href="#id15"><span class="problematic" id="id16">:class:`BZ2Decompressor`</span></a> classes for
incremental (de)compression.</p>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 23); <em><a href="#id14">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 23); <em><a href="#id16">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first">The <a href="#id17"><span class="problematic" id="id18">:func:`compress`</span></a> and <a href="#id19"><span class="problematic" id="id20">:func:`decompress`</span></a> functions for one-shot
(de)compression.</p>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 25); <em><a href="#id18">backlink</a></em></p>
<p>Unknown interpreted text role &quot;func&quot;.</p>
</div>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 25); <em><a href="#id20">backlink</a></em></p>
<p>Unknown interpreted text role &quot;func&quot;.</p>
</div>
</li>
</ul>
<p>All of the classes in this module may safely be accessed from multiple threads.</p>
<div class="section" id="de-compression-of-files">
<h1>(De)compression of files</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 34)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)

   Open a bzip2-compressed file in binary or text mode, returning a :term:`file
   object`.

   As with the constructor for :class:`BZ2File`, the *filename* argument can be
   an actual filename (a :class:`str` or :class:`bytes` object), or an existing
   file object to read from or write to.

   The *mode* argument can be any of ``'r'``, ``'rb'``, ``'w'``, ``'wb'``,
   ``'x'``, ``'xb'``, ``'a'`` or ``'ab'`` for binary mode, or ``'rt'``,
   ``'wt'``, ``'xt'``, or ``'at'`` for text mode. The default is ``'rb'``.

   The *compresslevel* argument is an integer from 1 to 9, as for the
   :class:`BZ2File` constructor.

   For binary mode, this function is equivalent to the :class:`BZ2File`
   constructor: ``BZ2File(filename, mode, compresslevel=compresslevel)``. In
   this case, the *encoding*, *errors* and *newline* arguments must not be
   provided.

   For text mode, a :class:`BZ2File` object is created, and wrapped in an
   :class:`io.TextIOWrapper` instance with the specified encoding, error
   handling behavior, and line ending(s).

   .. versionadded:: 3.3

   .. versionchanged:: 3.4
      The ``'x'`` (exclusive creation) mode was added.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 68)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;BZ2File(filename, mode='r', *, compresslevel=9)&quot;.</p>
<pre class="literal-block">
.. class:: BZ2File(filename, mode='r', *, compresslevel=9)

   Open a bzip2-compressed file in binary mode.

   If *filename* is a :class:`str` or :class:`bytes` object, open the named file
   directly. Otherwise, *filename* should be a :term:`file object`, which will
   be used to read or write the compressed data.

   The *mode* argument can be either ``'r'`` for reading (default), ``'w'`` for
   overwriting, ``'x'`` for exclusive creation, or ``'a'`` for appending. These
   can equivalently be given as ``'rb'``, ``'wb'``, ``'xb'`` and ``'ab'``
   respectively.

   If *filename* is a file object (rather than an actual file name), a mode of
   ``'w'`` does not truncate the file, and is instead equivalent to ``'a'``.

   If *mode* is ``'w'`` or ``'a'``, *compresslevel* can be an integer between
   ``1`` and ``9`` specifying the level of compression: ``1`` produces the
   least compression, and ``9`` (default) produces the most compression.

   If *mode* is ``'r'``, the input file may be the concatenation of multiple
   compressed streams.

   :class:`BZ2File` provides all of the members specified by the
   :class:`io.BufferedIOBase`, except for :meth:`detach` and :meth:`truncate`.
   Iteration and the :keyword:`with` statement are supported.

   :class:`BZ2File` also provides the following method:

   .. method:: peek([n])

      Return buffered data without advancing the file position. At least one
      byte of data will be returned (unless at EOF). The exact number of bytes
      returned is unspecified.

      .. note:: While calling :meth:`peek` does not change the file position of
         the :class:`BZ2File`, it may change the position of the underlying file
         object (e.g. if the :class:`BZ2File` was constructed by passing a file
         object for *filename*).

      .. versionadded:: 3.3


   .. versionchanged:: 3.1
      Support for the :keyword:`with` statement was added.

   .. versionchanged:: 3.3
      The :meth:`fileno`, :meth:`readable`, :meth:`seekable`, :meth:`writable`,
      :meth:`read1` and :meth:`readinto` methods were added.

   .. versionchanged:: 3.3
      Support was added for *filename* being a :term:`file object` instead of an
      actual filename.

   .. versionchanged:: 3.3
      The ``'a'`` (append) mode was added, along with support for reading
      multi-stream files.

   .. versionchanged:: 3.4
      The ``'x'`` (exclusive creation) mode was added.

   .. versionchanged:: 3.5
      The :meth:`~io.BufferedIOBase.read` method now accepts an argument of
      ``None``.

   .. versionchanged:: 3.6
      Accepts a :term:`path-like object`.

   .. versionchanged:: 3.9
      The *buffering* parameter has been removed. It was ignored and deprecated
      since Python 3.0. Pass an open file object to control how the file is
      opened.

      The *compresslevel* parameter became keyword-only.


</pre>
</div>
</div>
<div class="section" id="incremental-de-compression">
<h1>Incremental (de)compression</h1>
<p class="bz2compressor-compresslevel-9">Create a new compressor object. This object may be used to compress data
incrementally. For one-shot compression, use the <a href="#id21"><span class="problematic" id="id22">:func:`compress`</span></a> function
instead.</p>
<div class="bz2compressor-compresslevel-9 system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 149); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p class="bz2compressor-compresslevel-9"><em>compresslevel</em>, if given, must be an integer between <tt class="docutils literal">1</tt> and <tt class="docutils literal">9</tt>. The
default is <tt class="docutils literal">9</tt>.</p>
<div class="bz2compressor-compresslevel-9 system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 156)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: compress(data)

   Provide data to the compressor object. Returns a chunk of compressed data
   if possible, or an empty byte string otherwise.

   When you have finished providing data to the compressor, call the
   :meth:`flush` method to finish the compression process.


</pre>
</div>
<div class="bz2compressor-compresslevel-9 system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 165)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: flush()

   Finish the compression process. Returns the compressed data left in
   internal buffers.

   The compressor object may not be used after this method has been called.
</pre>
</div>
<p class="bz2decompressor">Create a new decompressor object. This object may be used to decompress data
incrementally. For one-shot compression, use the <a href="#id23"><span class="problematic" id="id24">:func:`decompress`</span></a> function
instead.</p>
<div class="bz2decompressor system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 175); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="admonition bz2decompressor note">
<p class="first admonition-title">Note</p>
<p>This class does not transparently handle inputs containing multiple
compressed streams, unlike <a href="#id25"><span class="problematic" id="id26">:func:`decompress`</span></a> and <a href="#id27"><span class="problematic" id="id28">:class:`BZ2File`</span></a>. If
you need to decompress a multi-stream input with <a href="#id29"><span class="problematic" id="id30">:class:`BZ2Decompressor`</span></a>,
you must use a new decompressor for each stream.</p>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 180); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 180); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="last system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 180); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</div>
<div class="bz2decompressor system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 185)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: decompress(data, max_length=-1)

   Decompress *data* (a :term:`bytes-like object`), returning
   uncompressed data as bytes. Some of *data* may be buffered
   internally, for use in later calls to :meth:`decompress`. The
   returned data should be concatenated with the output of any
   previous calls to :meth:`decompress`.

   If *max_length* is nonnegative, returns at most *max_length*
   bytes of decompressed data. If this limit is reached and further
   output can be produced, the :attr:`~.needs_input` attribute will
   be set to ``False``. In this case, the next call to
   :meth:`~.decompress` may provide *data* as ``b''`` to obtain
   more of the output.

   If all of the input data was decompressed and returned (either
   because this was less than *max_length* bytes, or because
   *max_length* was negative), the :attr:`~.needs_input` attribute
   will be set to ``True``.

   Attempting to decompress data after the end of stream is reached
   raises an `EOFError`.  Any data found after the end of the
   stream is ignored and saved in the :attr:`~.unused_data` attribute.

   .. versionchanged:: 3.5
      Added the *max_length* parameter.

</pre>
</div>
<div class="bz2decompressor system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 212)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: eof

   ``True`` if the end-of-stream marker has been reached.

   .. versionadded:: 3.3


</pre>
</div>
<div class="bz2decompressor system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 219)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: unused_data

   Data found after the end of the compressed stream.

   If this attribute is accessed before the end of the stream has been
   reached, its value will be ``b''``.

</pre>
</div>
<div class="bz2decompressor system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 226)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: needs_input

   ``False`` if the :meth:`.decompress` method can provide more
   decompressed data before requiring new uncompressed input.

   .. versionadded:: 3.5
</pre>
</div>
</div>
<div class="section" id="one-shot-de-compression">
<h1>One-shot (de)compression</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 237)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: compress(data, compresslevel=9)

   Compress *data*, a :term:`bytes-like object &lt;bytes-like object&gt;`.

   *compresslevel*, if given, must be an integer between ``1`` and ``9``. The
   default is ``9``.

   For incremental compression, use a :class:`BZ2Compressor` instead.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 247)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: decompress(data)

   Decompress *data*, a :term:`bytes-like object &lt;bytes-like object&gt;`.

   If *data* is the concatenation of multiple compressed streams, decompress
   all of the streams.

   For incremental decompression, use a :class:`BZ2Decompressor` instead.

   .. versionchanged:: 3.3
      Support for multi-stream inputs was added.

</pre>
</div>
</div>
<div class="section" id="examples-of-usage">
<span id="bz2-usage-examples"></span><h1>Examples of usage</h1>
<p>Below are some examples of typical usage of the <a href="#id31"><span class="problematic" id="id32">:mod:`bz2`</span></a> module.</p>
<div class="system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 264); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>Using <a href="#id33"><span class="problematic" id="id34">:func:`compress`</span></a> and <a href="#id35"><span class="problematic" id="id36">:func:`decompress`</span></a> to demonstrate round-trip compression:</p>
<div class="system-message" id="id33">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 266); <em><a href="#id34">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 266); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<blockquote>
<pre class="doctest-block">
&gt;&gt;&gt; import bz2
&gt;&gt;&gt; data = b&quot;&quot;&quot;\
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum.&quot;&quot;&quot;
&gt;&gt;&gt; c = bz2.compress(data)
&gt;&gt;&gt; len(data) / len(c)  # Data compression ratio
1.513595166163142
&gt;&gt;&gt; d = bz2.decompress(c)
&gt;&gt;&gt; data == d  # Check equality to original object after round-trip
True
</pre>
</blockquote>
<p>Using <a href="#id37"><span class="problematic" id="id38">:class:`BZ2Compressor`</span></a> for incremental compression:</p>
<div class="system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bz2.rst</tt>, line 284); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<blockquote>
<pre class="doctest-block">
&gt;&gt;&gt; import bz2
&gt;&gt;&gt; def gen_data(chunks=10, chunksize=1000):
...     &quot;&quot;&quot;Yield incremental blocks of chunksize bytes.&quot;&quot;&quot;
...     for _ in range(chunks):
...         yield b&quot;z&quot; * chunksize
...
&gt;&gt;&gt; comp = bz2.BZ2Compressor()
&gt;&gt;&gt; out = b&quot;&quot;
&gt;&gt;&gt; for chunk in gen_data():
...     # Provide data to the compressor object
...     out = out + comp.compress(chunk)
...
&gt;&gt;&gt; # Finish the compression process.  Call this once you have
&gt;&gt;&gt; # finished providing data to the compressor.
&gt;&gt;&gt; out = out + comp.flush()
</pre>
</blockquote>
<p>The example above uses a very &quot;nonrandom&quot; stream of data
(a stream of <cite>b&quot;z&quot;</cite> chunks).  Random data tends to compress poorly,
while ordered, repetitive data usually yields a high compression ratio.</p>
<p>Writing and reading a bzip2-compressed file in binary mode:</p>
<blockquote>
<pre class="doctest-block">
&gt;&gt;&gt; import bz2
&gt;&gt;&gt; data = b&quot;&quot;&quot;\
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum.&quot;&quot;&quot;
&gt;&gt;&gt; with bz2.open(&quot;myfile.bz2&quot;, &quot;wb&quot;) as f:
...     # Write compressed data to file
...     unused = f.write(data)
&gt;&gt;&gt; with bz2.open(&quot;myfile.bz2&quot;, &quot;rb&quot;) as f:
...     # Decompress data from file
...     content = f.read()
&gt;&gt;&gt; content == data  # Check equality to original object after round-trip
True
</pre>
</blockquote>
</div>
</div>
</body>
</html>
