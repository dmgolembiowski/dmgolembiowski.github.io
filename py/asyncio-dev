<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>Developing with asyncio</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="developing-with-asyncio">
<span id="asyncio-dev"></span>
<h1 class="title">Developing with asyncio</h1>

<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 1)</p>
<p>Unknown directive type &quot;currentmodule&quot;.</p>
<pre class="literal-block">
.. currentmodule:: asyncio

</pre>
</div>
<p>Asynchronous programming is different from classic &quot;sequential&quot;
programming.</p>
<p>This page lists common mistakes and traps and explains how
to avoid them.</p>
<div class="section" id="debug-mode">
<span id="asyncio-debug-mode"></span><h1>Debug Mode</h1>
<p>By default asyncio runs in production mode.  In order to ease
the development asyncio has a <em>debug mode</em>.</p>
<p>There are several ways to enable asyncio debug mode:</p>
<ul>
<li><p class="first">Setting the <a href="#id1"><span class="problematic" id="id2">:envvar:`PYTHONASYNCIODEBUG`</span></a> environment variable to <tt class="docutils literal">1</tt>.</p>
<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 26); <em><a href="#id2">backlink</a></em></p>
<p>Unknown interpreted text role &quot;envvar&quot;.</p>
</div>
</li>
<li><p class="first">Using the <a href="#id3"><span class="problematic" id="id4">:ref:`Python Development Mode &lt;devmode&gt;`</span></a>.</p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 28); <em><a href="#id4">backlink</a></em></p>
<p>Unknown interpreted text role &quot;ref&quot;.</p>
</div>
</li>
<li><p class="first">Passing <tt class="docutils literal">debug=True</tt> to <a href="#id5"><span class="problematic" id="id6">:func:`asyncio.run`</span></a>.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 30); <em><a href="#id6">backlink</a></em></p>
<p>Unknown interpreted text role &quot;func&quot;.</p>
</div>
</li>
<li><p class="first">Calling <a href="#id7"><span class="problematic" id="id8">:meth:`loop.set_debug`</span></a>.</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 32); <em><a href="#id8">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
</li>
</ul>
<p>In addition to enabling the debug mode, consider also:</p>
<ul>
<li><p class="first">setting the log level of the <a href="#id9"><span class="problematic" id="id10">:ref:`asyncio logger &lt;asyncio-logger&gt;`</span></a> to
<a href="#id11"><span class="problematic" id="id12">:py:data:`logging.DEBUG`</span></a>, for example the following snippet of code
can be run at startup of the application:</p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 36); <em><a href="#id10">backlink</a></em></p>
<p>Unknown interpreted text role &quot;ref&quot;.</p>
</div>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 36); <em><a href="#id12">backlink</a></em></p>
<p>Unknown interpreted text role &quot;py:data&quot;.</p>
</div>
<pre class="literal-block">
logging.basicConfig(level=logging.DEBUG)
</pre>
</li>
<li><p class="first">configuring the <a href="#id13"><span class="problematic" id="id14">:mod:`warnings`</span></a> module to display
<a href="#id15"><span class="problematic" id="id16">:exc:`ResourceWarning`</span></a> warnings.  One way of doing that is by
using the <a href="#id17"><span class="problematic" id="id18">:option:`-W`</span></a> <tt class="docutils literal">default</tt> command line option.</p>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 42); <em><a href="#id14">backlink</a></em></p>
<p>Unknown interpreted text role &quot;mod&quot;.</p>
</div>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 42); <em><a href="#id16">backlink</a></em></p>
<p>Unknown interpreted text role &quot;exc&quot;.</p>
</div>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 42); <em><a href="#id18">backlink</a></em></p>
<p>Unknown interpreted text role &quot;option&quot;.</p>
</div>
</li>
</ul>
<p>When the debug mode is enabled:</p>
<ul>
<li><p class="first">asyncio checks for <a href="#id19"><span class="problematic" id="id20">:ref:`coroutines that were not awaited
&lt;asyncio-coroutine-not-scheduled&gt;`</span></a> and logs them; this mitigates
the &quot;forgotten await&quot; pitfall.</p>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 49); <em><a href="#id20">backlink</a></em></p>
<p>Unknown interpreted text role &quot;ref&quot;.</p>
</div>
</li>
<li><p class="first">Many non-threadsafe asyncio APIs (such as <a href="#id21"><span class="problematic" id="id22">:meth:`loop.call_soon`</span></a> and
<a href="#id23"><span class="problematic" id="id24">:meth:`loop.call_at`</span></a> methods) raise an exception if they are called
from a wrong thread.</p>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 53); <em><a href="#id22">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 53); <em><a href="#id24">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
</li>
<li><p class="first">The execution time of the I/O selector is logged if it takes too long to
perform an I/O operation.</p>
</li>
<li><p class="first">Callbacks taking longer than 100ms are logged.  The
<a href="#id25"><span class="problematic" id="id26">:attr:`loop.slow_callback_duration`</span></a> attribute can be used to set the
minimum execution duration in seconds that is considered &quot;slow&quot;.</p>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 60); <em><a href="#id26">backlink</a></em></p>
<p>Unknown interpreted text role &quot;attr&quot;.</p>
</div>
</li>
</ul>
</div>
<div class="section" id="concurrency-and-multithreading">
<span id="asyncio-multithreading"></span><h1>Concurrency and Multithreading</h1>
<p>An event loop runs in a thread (typically the main thread) and executes
all callbacks and Tasks in its thread.  While a Task is running in the
event loop, no other Tasks can run in the same thread.  When a Task
executes an <tt class="docutils literal">await</tt> expression, the running Task gets suspended, and
the event loop executes the next Task.</p>
<p>To schedule a <a href="#id27"><span class="problematic" id="id28">:term:`callback`</span></a> from another OS thread, the
<a href="#id29"><span class="problematic" id="id30">:meth:`loop.call_soon_threadsafe`</span></a> method should be used. Example:</p>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 76); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 76); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<pre class="literal-block">
loop.call_soon_threadsafe(callback, *args)
</pre>
<p>Almost all asyncio objects are not thread safe, which is typically
not a problem unless there is code that works with them from outside
of a Task or a callback.  If there's a need for such code to call a
low-level asyncio API, the <a href="#id31"><span class="problematic" id="id32">:meth:`loop.call_soon_threadsafe`</span></a> method
should be used, e.g.:</p>
<div class="system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 81); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<pre class="literal-block">
loop.call_soon_threadsafe(fut.cancel)
</pre>
<p>To schedule a coroutine object from a different OS thread, the
<a href="#id33"><span class="problematic" id="id34">:func:`run_coroutine_threadsafe`</span></a> function should be used. It returns a
<a href="#id35"><span class="problematic" id="id36">:class:`concurrent.futures.Future`</span></a> to access the result:</p>
<div class="system-message" id="id33">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 89); <em><a href="#id34">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 89); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="literal-block">
async def coro_func():
     return await asyncio.sleep(1, 42)

# Later in another OS thread:

future = asyncio.run_coroutine_threadsafe(coro_func(), loop)
# Wait for the result:
result = future.result()
</pre>
<p>To handle signals and to execute subprocesses, the event loop must be
run in the main thread.</p>
<p>The <a href="#id37"><span class="problematic" id="id38">:meth:`loop.run_in_executor`</span></a> method can be used with a
<a href="#id39"><span class="problematic" id="id40">:class:`concurrent.futures.ThreadPoolExecutor`</span></a> to execute
blocking code in a different OS thread without blocking the OS thread
that the event loop runs in.</p>
<div class="system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 105); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id39">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 105); <em><a href="#id40">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>There is currently no way to schedule coroutines or callbacks directly
from a different process (such as one started with
<a href="#id41"><span class="problematic" id="id42">:mod:`multiprocessing`</span></a>). The <a href="#id43"><span class="problematic" id="id44">:ref:`Event Loop Methods &lt;asyncio-event-loop&gt;`</span></a>
section lists APIs that can read from pipes and watch file descriptors
without blocking the event loop. In addition, asyncio's
<a href="#id45"><span class="problematic" id="id46">:ref:`Subprocess &lt;asyncio-subprocess&gt;`</span></a> APIs provide a way to start a
process and communicate with it from the event loop. Lastly, the
aforementioned <a href="#id47"><span class="problematic" id="id48">:meth:`loop.run_in_executor`</span></a> method can also be used
with a <a href="#id49"><span class="problematic" id="id50">:class:`concurrent.futures.ProcessPoolExecutor`</span></a> to execute
code in a different process.</p>
<div class="system-message" id="id41">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 110); <em><a href="#id42">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id43">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 110); <em><a href="#id44">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="system-message" id="id45">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 110); <em><a href="#id46">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="system-message" id="id47">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 110); <em><a href="#id48">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id49">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 110); <em><a href="#id50">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</div>
<div class="section" id="running-blocking-code">
<span id="asyncio-handle-blocking"></span><h1>Running Blocking Code</h1>
<p>Blocking (CPU-bound) code should not be called directly.  For example,
if a function performs a CPU-intensive calculation for 1 second,
all concurrent asyncio Tasks and IO operations would be delayed
by 1 second.</p>
<p>An executor can be used to run a task in a different thread or even in
a different process to avoid blocking the OS thread with the
event loop.  See the <a href="#id51"><span class="problematic" id="id52">:meth:`loop.run_in_executor`</span></a> method for more
details.</p>
<div class="system-message" id="id51">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 131); <em><a href="#id52">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
</div>
<div class="section" id="logging">
<span id="asyncio-logger"></span><h1>Logging</h1>
<p>asyncio uses the <a href="#id53"><span class="problematic" id="id54">:mod:`logging`</span></a> module and all logging is performed
via the <tt class="docutils literal">&quot;asyncio&quot;</tt> logger.</p>
<div class="system-message" id="id53">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 142); <em><a href="#id54">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>The default log level is <a href="#id55"><span class="problematic" id="id56">:py:data:`logging.INFO`</span></a>, which can be easily
adjusted:</p>
<div class="system-message" id="id55">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 145); <em><a href="#id56">backlink</a></em></p>
Unknown interpreted text role &quot;py:data&quot;.</div>
<pre class="literal-block">
logging.getLogger(&quot;asyncio&quot;).setLevel(logging.WARNING)
</pre>
</div>
<div class="section" id="detect-never-awaited-coroutines">
<span id="asyncio-coroutine-not-scheduled"></span><h1>Detect never-awaited coroutines</h1>
<p>When a coroutine function is called, but not awaited
(e.g. <tt class="docutils literal">coro()</tt> instead of <tt class="docutils literal">await coro()</tt>)
or the coroutine is not scheduled with <a href="#id57"><span class="problematic" id="id58">:meth:`asyncio.create_task`</span></a>, asyncio
will emit a <a href="#id59"><span class="problematic" id="id60">:exc:`RuntimeWarning`</span></a>:</p>
<div class="system-message" id="id57">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 156); <em><a href="#id58">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id59">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 156); <em><a href="#id60">backlink</a></em></p>
Unknown interpreted text role &quot;exc&quot;.</div>
<pre class="literal-block">
import asyncio

async def test():
    print(&quot;never scheduled&quot;)

async def main():
    test()

asyncio.run(main())
</pre>
<p>Output:</p>
<pre class="literal-block">
test.py:7: RuntimeWarning: coroutine 'test' was never awaited
  test()
</pre>
<p>Output in debug mode:</p>
<pre class="literal-block">
test.py:7: RuntimeWarning: coroutine 'test' was never awaited
Coroutine created at (most recent call last)
  File &quot;../t.py&quot;, line 9, in &lt;module&gt;
    asyncio.run(main(), debug=True)

  &lt; .. &gt;

  File &quot;../t.py&quot;, line 7, in main
    test()
  test()
</pre>
<p>The usual fix is to either await the coroutine or call the
<a href="#id61"><span class="problematic" id="id62">:meth:`asyncio.create_task`</span></a> function:</p>
<div class="system-message" id="id61">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 189); <em><a href="#id62">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<pre class="literal-block">
async def main():
    await test()
</pre>
</div>
<div class="section" id="detect-never-retrieved-exceptions">
<h1>Detect never-retrieved exceptions</h1>
<p>If a <a href="#id63"><span class="problematic" id="id64">:meth:`Future.set_exception`</span></a> is called but the Future object is
never awaited on, the exception would never be propagated to the
user code.  In this case, asyncio would emit a log message when the
Future object is garbage collected.</p>
<div class="system-message" id="id63">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 199); <em><a href="#id64">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<p>Example of an unhandled exception:</p>
<pre class="literal-block">
import asyncio

async def bug():
    raise Exception(&quot;not consumed&quot;)

async def main():
    asyncio.create_task(bug())

asyncio.run(main())
</pre>
<p>Output:</p>
<pre class="literal-block">
Task exception was never retrieved
future: &lt;Task finished coro=&lt;bug() done, defined at test.py:3&gt;
  exception=Exception('not consumed')&gt;

Traceback (most recent call last):
  File &quot;test.py&quot;, line 4, in bug
    raise Exception(&quot;not consumed&quot;)
Exception: not consumed
</pre>
<p><a href="#id65"><span class="problematic" id="id66">:ref:`Enable the debug mode &lt;asyncio-debug-mode&gt;`</span></a> to get the
traceback where the task was created:</p>
<div class="system-message" id="id65">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-dev.rst</tt>, line 227); <em><a href="#id66">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<pre class="literal-block">
asyncio.run(main(), debug=True)
</pre>
<p>Output in debug mode:</p>
<pre class="literal-block">
Task exception was never retrieved
future: &lt;Task finished coro=&lt;bug() done, defined at test.py:3&gt;
    exception=Exception('not consumed') created at asyncio/tasks.py:321&gt;

source_traceback: Object created at (most recent call last):
  File &quot;../t.py&quot;, line 9, in &lt;module&gt;
    asyncio.run(main(), debug=True)

&lt; .. &gt;

Traceback (most recent call last):
  File &quot;../t.py&quot;, line 4, in bug
    raise Exception(&quot;not consumed&quot;)
Exception: not consumed
</pre>
</div>
</div>
</body>
</html>
