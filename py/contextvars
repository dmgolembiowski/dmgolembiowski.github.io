<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`contextvars` --- Context Variables</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-contextvars-context-variables">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`contextvars`</span></a> --- Context Variables</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: contextvars
   :synopsis: Context Variables

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 7)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Yury Selivanov &lt;yury&#64;magic.io&gt;

</pre>
</div>
<hr class="docutils" />
<p>This module provides APIs to manage, store, and access context-local
state.  The <a href="#id3"><span class="problematic" id="id4">:class:`~contextvars.ContextVar`</span></a> class is used to declare
and work with <em>Context Variables</em>.  The <a href="#id5"><span class="problematic" id="id6">:func:`~contextvars.copy_context`</span></a>
function and the <a href="#id7"><span class="problematic" id="id8">:class:`~contextvars.Context`</span></a> class should be used to
manage the current context in asynchronous frameworks.</p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 11); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 11); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 11); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>Context managers that have state should use Context Variables
instead of <a href="#id9"><span class="problematic" id="id10">:func:`threading.local()`</span></a> to prevent their state from
bleeding to other code unexpectedly, when used in concurrent code.</p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 17); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>See also <a class="reference external" href="http://www.python.org/dev/peps/pep-0567">PEP 567</a> for additional details.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 23)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.7


</pre>
</div>
<div class="section" id="context-variables">
<h1>Context Variables</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 29)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;ContextVar(name, [*, default])&quot;.</p>
<pre class="literal-block">
.. class:: ContextVar(name, [*, default])

   This class is used to declare a new Context Variable, e.g.::

       var: ContextVar[int] = ContextVar('var', default=42)

   The required *name* parameter is used for introspection and debug
   purposes.

   The optional keyword-only *default* parameter is returned by
   :meth:`ContextVar.get` when no value for the variable is found
   in the current context.

   **Important:** Context Variables should be created at the top module
   level and never in closures.  :class:`Context` objects hold strong
   references to context variables which prevents context variables
   from being properly garbage collected.

   .. attribute:: ContextVar.name

      The name of the variable.  This is a read-only property.

      .. versionadded:: 3.7.1

   .. method:: get([default])

      Return a value for the context variable for the current context.

      If there is no value for the variable in the current context,
      the method will:

      * return the value of the *default* argument of the method,
        if provided; or

      * return the default value for the context variable,
        if it was created with one; or

      * raise a :exc:`LookupError`.

   .. method:: set(value)

      Call to set a new value for the context variable in the current
      context.

      The required *value* argument is the new value for the context
      variable.

      Returns a :class:`~contextvars.Token` object that can be used
      to restore the variable to its previous value via the
      :meth:`ContextVar.reset` method.

   .. method:: reset(token)

      Reset the context variable to the value it had before the
      :meth:`ContextVar.set` that created the *token* was used.

      For example::

          var = ContextVar('var')

          token = var.set('new value')
          # code that uses 'var'; var.get() returns 'new value'.
          var.reset(token)

          # After the reset call the var has no value again, so
          # var.get() would raise a LookupError.


</pre>
</div>
<p class="contextvars-token"><em>Token</em> objects are returned by the <a href="#id11"><span class="problematic" id="id12">:meth:`ContextVar.set`</span></a> method.
They can be passed to the <a href="#id13"><span class="problematic" id="id14">:meth:`ContextVar.reset`</span></a> method to revert
the value of the variable to what it was before the corresponding
<em>set</em>.</p>
<div class="contextvars-token system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 99); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="contextvars-token system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 99); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="contextvars-token system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 104)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: Token.var

   A read-only property.  Points to the :class:`ContextVar` object
   that created the token.

</pre>
</div>
<div class="contextvars-token system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 109)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: Token.old_value

   A read-only property.  Set to the value the variable had before
   the :meth:`ContextVar.set` method call that created the token.
   It points to :attr:`Token.MISSING` is the variable was not set
   before the call.

</pre>
</div>
<div class="contextvars-token system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 116)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: Token.MISSING

   A marker object used by :attr:`Token.old_value`.
</pre>
</div>
</div>
<div class="section" id="manual-context-management">
<h1>Manual Context Management</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 124)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: copy_context()

   Returns a copy of the current :class:`~contextvars.Context` object.

   The following snippet gets a copy of the current context and prints
   all variables and their values that are set in it::

      ctx: Context = copy_context()
      print(list(ctx.items()))

   The function has an O(1) complexity, i.e. works equally fast for
   contexts with a few context variables and for contexts that have
   a lot of them.


</pre>
</div>
<p class="context">A mapping of <a href="#id15"><span class="problematic" id="id16">:class:`ContextVars &lt;ContextVar&gt;`</span></a> to their values.</p>
<div class="context system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 141); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="context"><tt class="docutils literal">Context()</tt> creates an empty context with no values in it.
To get a copy of the current context use the
<a href="#id17"><span class="problematic" id="id18">:func:`~contextvars.copy_context`</span></a> function.</p>
<div class="context system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 143); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p class="context">Context implements the <a href="#id19"><span class="problematic" id="id20">:class:`collections.abc.Mapping`</span></a> interface.</p>
<div class="context system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 147); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 149)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: run(callable, *args, **kwargs)

   Execute ``callable(*args, **kwargs)`` code in the context object
   the *run* method is called on.  Return the result of the execution
   or propagate an exception if one occurred.

   Any changes to any context variables that *callable* makes will
   be contained in the context object::

     var = ContextVar('var')
     var.set('spam')

     def main():
         # 'var' was set to 'spam' before
         # calling 'copy_context()' and 'ctx.run(main)', so:
         # var.get() == ctx[var] == 'spam'

         var.set('ham')

         # Now, after setting 'var' to 'ham':
         # var.get() == ctx[var] == 'ham'

     ctx = copy_context()

     # Any changes that the 'main' function makes to 'var'
     # will be contained in 'ctx'.
     ctx.run(main)

     # The 'main()' function was run in the 'ctx' context,
     # so changes to 'var' are contained in it:
     # ctx[var] == 'ham'

     # However, outside of 'ctx', 'var' is still set to 'spam':
     # var.get() == 'spam'

   The method raises a :exc:`RuntimeError` when called on the same
   context object from more than one OS thread, or when called
   recursively.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 188)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: copy()

   Return a shallow copy of the context object.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 192)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: var in context

   Return ``True`` if the *context* has a value for *var* set;
   return ``False`` otherwise.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 197)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: context[var]

   Return the value of the *var* :class:`ContextVar` variable.
   If the variable is not set in the context object, a
   :exc:`KeyError` is raised.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 203)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get(var, [default])

   Return the value for *var* if *var* has the value in the context
   object.  Return *default* otherwise.  If *default* is not given,
   return ``None``.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 209)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: iter(context)

   Return an iterator over the variables stored in the context
   object.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 214)</p>
<p>Unknown directive type &quot;describe&quot;.</p>
<pre class="literal-block">
.. describe:: len(proxy)

   Return the number of variables set in the context object.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 218)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: keys()

   Return a list of all variables in the context object.

</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 222)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: values()

   Return a list of all variables' values in the context object.


</pre>
</div>
<div class="context system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 227)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: items()

   Return a list of 2-tuples containing all variables and their
   values in the context object.
</pre>
</div>
</div>
<div class="section" id="asyncio-support">
<h1>asyncio support</h1>
<p>Context variables are natively supported in <a href="#id21"><span class="problematic" id="id22">:mod:`asyncio`</span></a> and are
ready to be used without any extra configuration.  For example, here
is a simple echo server, that uses a context variable to make the
address of a remote client available in the Task that handles that
client:</p>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">contextvars.rst</tt>, line 236); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
import asyncio
import contextvars

client_addr_var = contextvars.ContextVar('client_addr')

def render_goodbye():
    # The address of the currently handled client can be accessed
    # without passing it explicitly to this function.

    client_addr = client_addr_var.get()
    return f'Good bye, client &#64; {client_addr}\n'.encode()

async def handle_request(reader, writer):
    addr = writer.transport.get_extra_info('socket').getpeername()
    client_addr_var.set(addr)

    # In any code that we call is now possible to get
    # client's address by calling 'client_addr_var.get()'.

    while True:
        line = await reader.readline()
        print(line)
        if not line.strip():
            break
        writer.write(line)

    writer.write(render_goodbye())
    writer.close()

async def main():
    srv = await asyncio.start_server(
        handle_request, '127.0.0.1', 8081)

    async with srv:
        await srv.serve_forever()

asyncio.run(main())

# To test it you can use telnet:
#     telnet 127.0.0.1 8081
</pre>
</div>
</div>
</body>
</html>
