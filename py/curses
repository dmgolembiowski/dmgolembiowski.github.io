<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>curses.rst</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document">


<div class="section" id="mod-curses-terminal-handling-for-character-cell-displays">
<h1><a href="#id1"><span class="problematic" id="id2">:mod:`curses`</span></a> --- Terminal handling for character-cell displays</h1>
<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: curses
   :synopsis: An interface to the curses library, providing portable
              terminal handling.
   :platform: Unix

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 9)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Moshe Zadka &lt;moshez&#64;zadka.site.co.il&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 10)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Eric Raymond &lt;esr&#64;thyrsus.com&gt;

</pre>
</div>
<hr class="docutils" />
<p>The <a href="#id3"><span class="problematic" id="id4">:mod:`curses`</span></a> module provides an interface to the curses library, the
de-facto standard for portable advanced terminal handling.</p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 14); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>While curses is most widely used in the Unix environment, versions are available
for Windows, DOS, and possibly other systems as well.  This extension module is
designed to match the API of ncurses, an open-source curses library hosted on
Linux and the BSD variants of Unix.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Whenever the documentation mentions a <em>character</em> it can be specified
as an integer, a one-character Unicode string or a one-byte byte string.</p>
<p class="last">Whenever the documentation mentions a <em>character string</em> it can be specified
as a Unicode string or a byte string.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Since version 5.4, the ncurses library decides how to interpret non-ASCII data
using the <tt class="docutils literal">nl_langinfo</tt> function.  That means that you have to call
<a href="#id5"><span class="problematic" id="id6">:func:`locale.setlocale`</span></a> in the application and encode Unicode strings
using one of the system's available encodings.  This example uses the
system's default encoding:</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 32); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
import locale
locale.setlocale(locale.LC_ALL, '')
code = locale.getpreferredencoding()
</pre>
<p>Then use <em>code</em> as the encoding for <a href="#id7"><span class="problematic" id="id8">:meth:`str.encode`</span></a> calls.</p>
<div class="last system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 42); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 44)</p>
<p>Unknown directive type &quot;seealso&quot;.</p>
<pre class="literal-block">
.. seealso::

   Module :mod:`curses.ascii`
      Utilities for working with ASCII characters, regardless of your locale settings.

   Module :mod:`curses.panel`
      A panel stack extension that adds depth to  curses windows.

   Module :mod:`curses.textpad`
      Editable text widget for curses supporting  :program:`Emacs`\ -like bindings.

   :ref:`curses-howto`
      Tutorial material on using curses with Python, by Andrew Kuchling and Eric
      Raymond.

   The :source:`Tools/demo/` directory in the Python source distribution contains
   some example programs using the curses bindings provided by this module.


</pre>
</div>
<div class="section" id="functions">
<span id="curses-functions"></span><h2>Functions</h2>
<p>The module <a href="#id9"><span class="problematic" id="id10">:mod:`curses`</span></a> defines the following exception:</p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 68); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 71)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: error

   Exception raised when a curses library function returns an error.

</pre>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Whenever <em>x</em> or <em>y</em> arguments to a function or a method are optional, they
default to the current cursor location. Whenever <em>attr</em> is optional, it defaults
to <a href="#id11"><span class="problematic" id="id12">:const:`A_NORMAL`</span></a>.</p>
<div class="last system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 77); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
</div>
<p>The module <a href="#id13"><span class="problematic" id="id14">:mod:`curses`</span></a> defines the following functions:</p>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 81); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 84)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: baudrate()

   Return the output speed of the terminal in bits per second.  On software
   terminal emulators it will have a fixed high value. Included for historical
   reasons; in former times, it was used to  write output loops for time delays and
   occasionally to change interfaces depending on the line speed.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 92)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: beep()

   Emit a short attention sound.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 97)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: can_change_color()

   Return ``True`` or ``False``, depending on whether the programmer can change the colors
   displayed by the terminal.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 103)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: cbreak()

   Enter cbreak mode.  In cbreak mode (sometimes called &quot;rare&quot; mode) normal tty
   line buffering is turned off and characters are available to be read one by one.
   However, unlike raw mode, special characters (interrupt, quit, suspend, and flow
   control) retain their effects on the tty driver and calling program.  Calling
   first :func:`raw` then :func:`cbreak` leaves the terminal in cbreak mode.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 112)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: color_content(color_number)

   Return the intensity of the red, green, and blue (RGB) components in the color
   *color_number*, which must be between ``0`` and ``COLORS - 1``.  Return a 3-tuple,
   containing the R,G,B values for the given color, which will be between
   ``0`` (no component) and ``1000`` (maximum amount of component).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 120)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: color_pair(pair_number)

   Return the attribute value for displaying text in the specified color pair.
   Only the first 256 color pairs are supported. This
   attribute value can be combined with :const:`A_STANDOUT`, :const:`A_REVERSE`,
   and the other :const:`A_\*` attributes.  :func:`pair_number` is the counterpart
   to this function.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 129)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: curs_set(visibility)

   Set the cursor state.  *visibility* can be set to ``0``, ``1``, or ``2``, for invisible,
   normal, or very visible.  If the terminal supports the visibility requested, return the
   previous cursor state; otherwise raise an exception.  On many
   terminals, the &quot;visible&quot; mode is an underline cursor and the &quot;very visible&quot; mode
   is a block cursor.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 138)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: def_prog_mode()

   Save the current terminal mode as the &quot;program&quot; mode, the mode when the running
   program is using curses.  (Its counterpart is the &quot;shell&quot; mode, for when the
   program is not in curses.)  Subsequent calls to :func:`reset_prog_mode` will
   restore this mode.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 146)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: def_shell_mode()

   Save the current terminal mode as the &quot;shell&quot; mode, the mode when the running
   program is not using curses.  (Its counterpart is the &quot;program&quot; mode, when the
   program is using curses capabilities.) Subsequent calls to
   :func:`reset_shell_mode` will restore this mode.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 154)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: delay_output(ms)

   Insert an *ms* millisecond pause in output.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 159)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: doupdate()

   Update the physical screen.  The curses library keeps two data structures, one
   representing the current physical screen contents and a virtual screen
   representing the desired next state.  The :func:`doupdate` ground updates the
   physical screen to match the virtual screen.

   The virtual screen may be updated by a :meth:`~window.noutrefresh` call after write
   operations such as :meth:`~window.addstr` have been performed on a window.  The normal
   :meth:`~window.refresh` call is simply :meth:`!noutrefresh` followed by :func:`!doupdate`;
   if you have to update multiple windows, you can speed performance and perhaps
   reduce screen flicker by issuing :meth:`!noutrefresh` calls on all windows,
   followed by a single :func:`!doupdate`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 174)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: echo()

   Enter echo mode.  In echo mode, each character input is echoed to the screen as
   it is entered.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 180)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: endwin()

   De-initialize the library, and return terminal to normal status.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 185)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: erasechar()

   Return the user's current erase character as a one-byte bytes object.  Under Unix operating systems this
   is a property of the controlling tty of the curses program, and is not set by
   the curses library itself.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 192)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: filter()

   The :func:`.filter` routine, if used, must be called before :func:`initscr` is
   called.  The effect is that, during those calls, :envvar:`LINES` is set to ``1``; the
   capabilities ``clear``, ``cup``, ``cud``, ``cud1``, ``cuu1``, ``cuu``, ``vpa`` are disabled; and the ``home``
   string is set to the value of ``cr``. The effect is that the cursor is confined to
   the current line, and so are screen updates.  This may be used for enabling
   character-at-a-time  line editing without touching the rest of the screen.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 202)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: flash()

   Flash the screen.  That is, change it to reverse-video and then change it back
   in a short interval.  Some people prefer such as 'visible bell' to the audible
   attention signal produced by :func:`beep`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 209)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: flushinp()

   Flush all input buffers.  This throws away any  typeahead  that  has been typed
   by the user and has not yet been processed by the program.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 215)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: getmouse()

   After :meth:`~window.getch` returns :const:`KEY_MOUSE` to signal a mouse event, this
   method should be called to retrieve the queued mouse event, represented as a
   5-tuple ``(id, x, y, z, bstate)``. *id* is an ID value used to distinguish
   multiple devices, and *x*, *y*, *z* are the event's coordinates.  (*z* is
   currently unused.)  *bstate* is an integer value whose bits will be set to
   indicate the type of event, and will be the bitwise OR of one or more of the
   following constants, where *n* is the button number from 1 to 4:
   :const:`BUTTONn_PRESSED`, :const:`BUTTONn_RELEASED`, :const:`BUTTONn_CLICKED`,
   :const:`BUTTONn_DOUBLE_CLICKED`, :const:`BUTTONn_TRIPLE_CLICKED`,
   :const:`BUTTON_SHIFT`, :const:`BUTTON_CTRL`, :const:`BUTTON_ALT`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 229)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: getsyx()

   Return the current coordinates of the virtual screen cursor as a tuple
   ``(y, x)``.  If :meth:`leaveok &lt;window.leaveok&gt;` is currently ``True``, then return ``(-1, -1)``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 235)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: getwin(file)

   Read window related data stored in the file by an earlier :func:`putwin` call.
   The routine then creates and initializes a new window using that data, returning
   the new window object.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 242)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: has_colors()

   Return ``True`` if the terminal can display colors; otherwise, return ``False``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 247)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: has_ic()

   Return ``True`` if the terminal has insert- and delete-character capabilities.
   This function is included for historical reasons only, as all modern software
   terminal emulators have such capabilities.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 254)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: has_il()

   Return ``True`` if the terminal has insert- and delete-line capabilities, or can
   simulate  them  using scrolling regions. This function is included for
   historical reasons only, as all modern software terminal emulators have such
   capabilities.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 262)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: has_key(ch)

   Take a key value *ch*, and return ``True`` if the current terminal type recognizes
   a key with that value.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 268)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: halfdelay(tenths)

   Used for half-delay mode, which is similar to cbreak mode in that characters
   typed by the user are immediately available to the program. However, after
   blocking for *tenths* tenths of seconds, raise an exception if nothing has
   been typed.  The value of *tenths* must be a number between ``1`` and ``255``.  Use
   :func:`nocbreak` to leave half-delay mode.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 277)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: init_color(color_number, r, g, b)

   Change the definition of a color, taking the number of the color to be changed
   followed by three RGB values (for the amounts of red, green, and blue
   components).  The value of *color_number* must be between ``0`` and
   `COLORS - 1`.  Each of *r*, *g*, *b*, must be a value between ``0`` and
   ``1000``.  When :func:`init_color` is used, all occurrences of that color on the
   screen immediately change to the new definition.  This function is a no-op on
   most terminals; it is active only if :func:`can_change_color` returns ``True``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 288)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: init_pair(pair_number, fg, bg)

   Change the definition of a color-pair.  It takes three arguments: the number of
   the color-pair to be changed, the foreground color number, and the background
   color number.  The value of *pair_number* must be between ``1`` and
   ``COLOR_PAIRS - 1`` (the ``0`` color pair is wired to white on black and cannot
   be changed).  The value of *fg* and *bg* arguments must be between ``0`` and
   ``COLORS - 1``, or, after calling :func:`use_default_colors`, ``-1``.
   If the color-pair was previously initialized, the screen is
   refreshed and all occurrences of that color-pair are changed to the new
   definition.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 301)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: initscr()

   Initialize the library. Return a :ref:`window &lt;curses-window-objects&gt;` object
   which represents the whole screen.

   .. note::

      If there is an error opening the terminal, the underlying curses library may
      cause the interpreter to exit.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 312)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: is_term_resized(nlines, ncols)

   Return ``True`` if :func:`resize_term` would modify the window structure,
   ``False`` otherwise.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 318)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: isendwin()

   Return ``True`` if :func:`endwin` has been called (that is, the  curses library has
   been deinitialized).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 324)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: keyname(k)

   Return the name of the key numbered *k* as a bytes object.  The name of a key generating printable
   ASCII character is the key's character.  The name of a control-key combination
   is a two-byte bytes object consisting of a caret (``b'^'``) followed by the corresponding
   printable ASCII character.  The name of an alt-key combination (128--255) is a
   bytes object consisting of the prefix ``b'M-'`` followed by the name of the corresponding
   ASCII character.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 334)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: killchar()

   Return the user's current line kill character as a one-byte bytes object. Under Unix operating systems
   this is a property of the controlling tty of the curses program, and is not set
   by the curses library itself.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 341)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: longname()

   Return a bytes object containing the terminfo long name field describing the current
   terminal.  The maximum length of a verbose description is 128 characters.  It is
   defined only after the call to :func:`initscr`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 348)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: meta(flag)

   If *flag* is ``True``, allow 8-bit characters to be input.  If
   *flag* is ``False``,  allow only 7-bit chars.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 354)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: mouseinterval(interval)

   Set the maximum time in milliseconds that can elapse between press and release
   events in order for them to be recognized as a click, and return the previous
   interval value.  The default value is 200 msec, or one fifth of a second.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 361)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: mousemask(mousemask)

   Set the mouse events to be reported, and return a tuple ``(availmask,
   oldmask)``.   *availmask* indicates which of the specified mouse events can be
   reported; on complete failure it returns ``0``.  *oldmask* is the previous value of
   the given window's mouse event mask.  If this function is never called, no mouse
   events are ever reported.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 370)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: napms(ms)

   Sleep for *ms* milliseconds.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 375)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: newpad(nlines, ncols)

   Create and return a pointer to a new pad data structure with the given number
   of lines and columns.  Return a pad as a window object.

   A pad is like a window, except that it is not restricted by the screen size, and
   is not necessarily associated with a particular part of the screen.  Pads can be
   used when a large window is needed, and only a part of the window will be on the
   screen at one time.  Automatic refreshes of pads (such as from scrolling or
   echoing of input) do not occur.  The :meth:`~window.refresh` and :meth:`~window.noutrefresh`
   methods of a pad require 6 arguments to specify the part of the pad to be
   displayed and the location on the screen to be used for the display. The
   arguments are *pminrow*, *pmincol*, *sminrow*, *smincol*, *smaxrow*, *smaxcol*; the *p*
   arguments refer to the upper left corner of the pad region to be displayed and
   the *s* arguments define a clipping box on the screen within which the pad region
   is to be displayed.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 393)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: newwin(nlines, ncols)
              newwin(nlines, ncols, begin_y, begin_x)

   Return a new :ref:`window &lt;curses-window-objects&gt;`, whose left-upper corner
   is at  ``(begin_y, begin_x)``, and whose height/width is  *nlines*/*ncols*.

   By default, the window will extend from the  specified position to the lower
   right corner of the screen.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 403)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: nl()

   Enter newline mode.  This mode translates the return key into newline on input,
   and translates newline into return and line-feed on output. Newline mode is
   initially on.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 410)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: nocbreak()

   Leave cbreak mode.  Return to normal &quot;cooked&quot; mode with line buffering.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 415)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: noecho()

   Leave echo mode.  Echoing of input characters is turned off.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 420)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: nonl()

   Leave newline mode.  Disable translation of return into newline on input, and
   disable low-level translation of newline into newline/return on output (but this
   does not change the behavior of ``addch('\n')``, which always does the
   equivalent of return and line feed on the virtual screen).  With translation
   off, curses can sometimes speed up vertical motion a little; also, it will be
   able to detect the return key on input.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 430)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: noqiflush()

   When the :func:`!noqiflush` routine is used, normal flush of input and output queues
   associated with the ``INTR``, ``QUIT`` and ``SUSP`` characters will not be done.  You may
   want to call :func:`!noqiflush` in a signal handler if you want output to
   continue as though the interrupt had not occurred, after the handler exits.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 438)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: noraw()

   Leave raw mode. Return to normal &quot;cooked&quot; mode with line buffering.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 443)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: pair_content(pair_number)

   Return a tuple ``(fg, bg)`` containing the colors for the requested color pair.
   The value of *pair_number* must be between ``0`` and ``COLOR_PAIRS - 1``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 449)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: pair_number(attr)

   Return the number of the color-pair set by the attribute value *attr*.
   :func:`color_pair` is the counterpart to this function.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 455)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: putp(str)

   Equivalent to ``tputs(str, 1, putchar)``; emit the value of a specified
   terminfo capability for the current terminal.  Note that the output of :func:`putp`
   always goes to standard output.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 462)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: qiflush([flag])

   If *flag* is ``False``, the effect is the same as calling :func:`noqiflush`. If
   *flag* is ``True``, or no argument is provided, the queues will be flushed when
   these control characters are read.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 469)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: raw()

   Enter raw mode.  In raw mode, normal line buffering and  processing of
   interrupt, quit, suspend, and flow control keys are turned off; characters are
   presented to curses input functions one by one.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 476)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: reset_prog_mode()

   Restore the  terminal  to &quot;program&quot; mode, as previously saved  by
   :func:`def_prog_mode`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 482)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: reset_shell_mode()

   Restore the  terminal  to &quot;shell&quot; mode, as previously saved  by
   :func:`def_shell_mode`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 488)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: resetty()

   Restore the state of the terminal modes to what it was at the last call to
   :func:`savetty`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 494)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: resize_term(nlines, ncols)

   Backend function used by :func:`resizeterm`, performing most of the work;
   when resizing the windows, :func:`resize_term` blank-fills the areas that are
   extended.  The calling application should fill in these areas with
   appropriate data.  The :func:`!resize_term` function attempts to resize all
   windows.  However, due to the calling convention of pads, it is not possible
   to resize these without additional interaction with the application.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 504)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: resizeterm(nlines, ncols)

   Resize the standard and current windows to the specified dimensions, and
   adjusts other bookkeeping data used by the curses library that record the
   window dimensions (in particular the SIGWINCH handler).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 511)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: savetty()

   Save the current state of the terminal modes in a buffer, usable by
   :func:`resetty`.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 516)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: get_escdelay()

   Retrieves the value set by :func:`set_escdelay`.

   .. versionadded:: 3.9

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 522)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: set_escdelay(ms)

   Sets the number of milliseconds to wait after reading an escape character,
   to distinguish between an individual escape character entered on the
   keyboard from escape sequences sent by cursor and function keys.

   .. versionadded:: 3.9

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 530)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: get_tabsize()

   Retrieves the value set by :func:`set_tabsize`.

   .. versionadded:: 3.9

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 536)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: set_tabsize(size)

   Sets the number of columns used by the curses library when converting a tab
   character to spaces as it adds the tab to a window.

   .. versionadded:: 3.9

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 543)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: setsyx(y, x)

   Set the virtual screen cursor to *y*, *x*. If *y* and *x* are both ``-1``, then
   :meth:`leaveok &lt;window.leaveok&gt;` is set ``True``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 549)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: setupterm(term=None, fd=-1)

   Initialize the terminal.  *term* is a string giving
   the terminal name, or ``None``; if omitted or ``None``, the value of the
   :envvar:`TERM` environment variable will be used.  *fd* is the
   file descriptor to which any initialization sequences will be sent; if not
   supplied or ``-1``, the file descriptor for ``sys.stdout`` will be used.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 558)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: start_color()

   Must be called if the programmer wants to use colors, and before any other color
   manipulation routine is called.  It is good practice to call this routine right
   after :func:`initscr`.

   :func:`start_color` initializes eight basic colors (black, red,  green, yellow,
   blue, magenta, cyan, and white), and two global variables in the :mod:`curses`
   module, :const:`COLORS` and :const:`COLOR_PAIRS`, containing the maximum number
   of colors and color-pairs the terminal can support.  It also restores the colors
   on the terminal to the values they had when the terminal was just turned on.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 571)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: termattrs()

   Return a logical OR of all video attributes supported by the terminal.  This
   information is useful when a curses program needs complete control over the
   appearance of the screen.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 578)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: termname()

   Return the value of the environment variable :envvar:`TERM`, as a bytes object,
   truncated to 14 characters.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 584)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: tigetflag(capname)

   Return the value of the Boolean capability corresponding to the terminfo
   capability name *capname* as an integer.  Return the value ``-1`` if *capname* is not a
   Boolean capability, or ``0`` if it is canceled or absent from the terminal
   description.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 592)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: tigetnum(capname)

   Return the value of the numeric capability corresponding to the terminfo
   capability name *capname* as an integer.  Return the value ``-2`` if *capname* is not a
   numeric capability, or ``-1`` if it is canceled or absent from the terminal
   description.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 600)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: tigetstr(capname)

   Return the value of the string capability corresponding to the terminfo
   capability name *capname* as a bytes object.  Return ``None`` if *capname*
   is not a terminfo &quot;string capability&quot;, or is canceled or absent from the
   terminal description.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 608)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: tparm(str[, ...])

   Instantiate the bytes object *str* with the supplied parameters, where *str* should
   be a parameterized string obtained from the terminfo database.  E.g.
   ``tparm(tigetstr(&quot;cup&quot;), 5, 3)`` could result in ``b'\033[6;4H'``, the exact
   result depending on terminal type.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 616)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: typeahead(fd)

   Specify that the file descriptor *fd* be used for typeahead checking.  If *fd*
   is ``-1``, then no typeahead checking is done.

   The curses library does &quot;line-breakout optimization&quot; by looking for typeahead
   periodically while updating the screen.  If input is found, and it is coming
   from a tty, the current update is postponed until refresh or doupdate is called
   again, allowing faster response to commands typed in advance. This function
   allows specifying a different file descriptor for typeahead checking.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 628)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: unctrl(ch)

   Return a bytes object which is a printable representation of the character *ch*.
   Control characters are represented as a caret followed by the character, for
   example as ``b'^C'``. Printing characters are left as they are.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 635)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: ungetch(ch)

   Push *ch* so the next :meth:`~window.getch` will return it.

   .. note::

      Only one *ch* can be pushed before :meth:`!getch` is called.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 644)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: update_lines_cols()

   Update :envvar:`LINES` and :envvar:`COLS`. Useful for detecting manual screen resize.

   .. versionadded:: 3.5


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 651)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: unget_wch(ch)

   Push *ch* so the next :meth:`~window.get_wch` will return it.

   .. note::

      Only one *ch* can be pushed before :meth:`!get_wch` is called.

   .. versionadded:: 3.3


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 662)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: ungetmouse(id, x, y, z, bstate)

   Push a :const:`KEY_MOUSE` event onto the input queue, associating the given
   state data with it.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 668)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: use_env(flag)

   If used, this function should be called before :func:`initscr` or newterm are
   called.  When *flag* is ``False``, the values of lines and columns specified in the
   terminfo database will be used, even if environment variables :envvar:`LINES`
   and :envvar:`COLUMNS` (used by default) are set, or if curses is running in a
   window (in which case default behavior would be to use the window size if
   :envvar:`LINES` and :envvar:`COLUMNS` are not set).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 678)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: use_default_colors()

   Allow use of default values for colors on terminals supporting this feature. Use
   this to support transparency in your application.  The default color is assigned
   to the color number ``-1``. After calling this function,  ``init_pair(x,
   curses.COLOR_RED, -1)`` initializes, for instance, color pair *x* to a red
   foreground color on the default background.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 687)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: wrapper(func, /, *args, **kwargs)

   Initialize curses and call another callable object, *func*, which should be the
   rest of your curses-using application.  If the application raises an exception,
   this function will restore the terminal to a sane state before re-raising the
   exception and generating a traceback.  The callable object *func* is then passed
   the main window 'stdscr' as its first argument, followed by any other arguments
   passed to :func:`!wrapper`.  Before calling *func*, :func:`!wrapper` turns on
   cbreak mode, turns off echo, enables the terminal keypad, and initializes colors
   if the terminal has color support.  On exit (whether normally or by exception)
   it restores cooked mode, turns on echo, and disables the terminal keypad.


</pre>
</div>
</div>
<div class="section" id="window-objects">
<span id="curses-window-objects"></span><h2>Window Objects</h2>
<p>Window objects, as returned by <a href="#id15"><span class="problematic" id="id16">:func:`initscr`</span></a> and <a href="#id17"><span class="problematic" id="id18">:func:`newwin`</span></a> above, have
the following methods and attributes:</p>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 705); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 705); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 709)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.addch(ch[, attr])
            window.addch(y, x, ch[, attr])

   Paint character *ch* at ``(y, x)`` with attributes *attr*, overwriting any
   character previously painted at that location.  By default, the character
   position and attributes are the current settings for the window object.

   .. note::

      Writing outside the window, subwindow, or pad raises a :exc:`curses.error`.
      Attempting to write to the lower right corner of a window, subwindow,
      or pad will cause an exception to be raised after the character is printed.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 723)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.addnstr(str, n[, attr])
            window.addnstr(y, x, str, n[, attr])

   Paint at most *n* characters of the character string *str* at
   ``(y, x)`` with attributes
   *attr*, overwriting anything previously on the display.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 731)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.addstr(str[, attr])
            window.addstr(y, x, str[, attr])

   Paint the character string *str* at ``(y, x)`` with attributes
   *attr*, overwriting anything previously on the display.

   .. note::

      * Writing outside the window, subwindow, or pad raises :exc:`curses.error`.
        Attempting to write to the lower right corner of a window, subwindow,
        or pad will cause an exception to be raised after the string is printed.

      * A `bug in ncurses &lt;https://bugs.python.org/issue35924&gt;`_, the backend
        for this Python module, can cause SegFaults when resizing windows. This
        is fixed in ncurses-6.1-20190511.  If you are stuck with an earlier
        ncurses, you can avoid triggering this if you do not call :func:`addstr`
        with a *str* that has embedded newlines.  Instead, call :func:`addstr`
        separately for each line.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 751)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.attroff(attr)

   Remove attribute *attr* from the &quot;background&quot; set applied to all writes to the
   current window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 757)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.attron(attr)

   Add attribute *attr* from the &quot;background&quot; set applied to all writes to the
   current window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 763)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.attrset(attr)

   Set the &quot;background&quot; set of attributes to *attr*.  This set is initially
   ``0`` (no attributes).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 769)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.bkgd(ch[, attr])

   Set the background property of the window to the character *ch*, with
   attributes *attr*.  The change is then applied to every character position in
   that window:

   * The attribute of every character in the window  is changed to the new
     background attribute.

   * Wherever  the  former background character appears, it is changed to the new
     background character.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 782)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.bkgdset(ch[, attr])

   Set the window's background.  A window's background consists of a character and
   any combination of attributes.  The attribute part of the background is combined
   (OR'ed) with all non-blank characters that are written into the window.  Both
   the character and attribute parts of the background are combined with the blank
   characters.  The background becomes a property of the character and moves with
   the character through any scrolling and insert/delete line/character operations.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 792)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])

   Draw a border around the edges of the window. Each parameter specifies  the
   character to use for a specific part of the border; see the table below for more
   details.

   .. note::

      A ``0`` value for any parameter will cause the default character to be used for
      that parameter.  Keyword parameters can *not* be used.  The defaults are listed
      in this table:

   +-----------+---------------------+-----------------------+
   | Parameter | Description         | Default value         |
   +===========+=====================+=======================+
   | *ls*      | Left side           | :const:`ACS_VLINE`    |
   +-----------+---------------------+-----------------------+
   | *rs*      | Right side          | :const:`ACS_VLINE`    |
   +-----------+---------------------+-----------------------+
   | *ts*      | Top                 | :const:`ACS_HLINE`    |
   +-----------+---------------------+-----------------------+
   | *bs*      | Bottom              | :const:`ACS_HLINE`    |
   +-----------+---------------------+-----------------------+
   | *tl*      | Upper-left corner   | :const:`ACS_ULCORNER` |
   +-----------+---------------------+-----------------------+
   | *tr*      | Upper-right corner  | :const:`ACS_URCORNER` |
   +-----------+---------------------+-----------------------+
   | *bl*      | Bottom-left corner  | :const:`ACS_LLCORNER` |
   +-----------+---------------------+-----------------------+
   | *br*      | Bottom-right corner | :const:`ACS_LRCORNER` |
   +-----------+---------------------+-----------------------+


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 825)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.box([vertch, horch])

   Similar to :meth:`border`, but both *ls* and *rs* are *vertch* and both *ts* and
   *bs* are *horch*.  The default corner characters are always used by this function.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 831)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.chgat(attr)
            window.chgat(num, attr)
            window.chgat(y, x, attr)
            window.chgat(y, x, num, attr)

   Set the attributes of *num* characters at the current cursor position, or at
   position ``(y, x)`` if supplied. If *num* is not given or is ``-1``,
   the attribute will be set on all the characters to the end of the line.  This
   function moves cursor to position ``(y, x)`` if supplied. The changed line
   will be touched using the :meth:`touchline` method so that the contents will
   be redisplayed by the next window refresh.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 844)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.clear()

   Like :meth:`erase`, but also cause the whole window to be repainted upon next
   call to :meth:`refresh`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 850)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.clearok(flag)

   If *flag* is ``True``, the next call to :meth:`refresh` will clear the window
   completely.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 856)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.clrtobot()

   Erase from cursor to the end of the window: all lines below the cursor are
   deleted, and then the equivalent of :meth:`clrtoeol` is performed.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 862)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.clrtoeol()

   Erase from cursor to the end of the line.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 867)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.cursyncup()

   Update the current cursor position of all the ancestors of the window to
   reflect the current cursor position of the window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 873)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.delch([y, x])

   Delete any character at ``(y, x)``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 878)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.deleteln()

   Delete the line under the cursor. All following lines are moved up by one line.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 883)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.derwin(begin_y, begin_x)
            window.derwin(nlines, ncols, begin_y, begin_x)

   An abbreviation for &quot;derive window&quot;, :meth:`derwin` is the same as calling
   :meth:`subwin`, except that *begin_y* and *begin_x* are relative to the origin
   of the window, rather than relative to the entire screen.  Return a window
   object for the derived window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 892)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.echochar(ch[, attr])

   Add character *ch* with attribute *attr*, and immediately  call :meth:`refresh`
   on the window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 898)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.enclose(y, x)

   Test whether the given pair of screen-relative character-cell coordinates are
   enclosed by the given window, returning ``True`` or ``False``.  It is useful for
   determining what subset of the screen windows enclose the location of a mouse
   event.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 906)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: window.encoding

   Encoding used to encode method arguments (Unicode strings and characters).
   The encoding attribute is inherited from the parent window when a subwindow
   is created, for example with :meth:`window.subwin`. By default, the locale
   encoding is used (see :func:`locale.getpreferredencoding`).

   .. versionadded:: 3.3


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 916)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.erase()

   Clear the window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 921)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getbegyx()

   Return a tuple ``(y, x)`` of co-ordinates of upper-left corner.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 926)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getbkgd()

   Return the given window's current background character/attribute pair.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 931)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getch([y, x])

   Get a character. Note that the integer returned does *not* have to be in ASCII
   range: function keys, keypad keys and so on are represented by numbers higher
   than 255.  In no-delay mode, return ``-1`` if there is no input, otherwise
   wait until a key is pressed.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 939)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.get_wch([y, x])

   Get a wide character. Return a character for most keys, or an integer for
   function keys, keypad keys, and other special keys.
   In no-delay mode, raise an exception if there is no input.

   .. versionadded:: 3.3


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 948)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getkey([y, x])

   Get a character, returning a string instead of an integer, as :meth:`getch`
   does. Function keys, keypad keys and other special keys return a multibyte
   string containing the key name.  In no-delay mode, raise an exception if
   there is no input.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 956)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getmaxyx()

   Return a tuple ``(y, x)`` of the height and width of the window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 961)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getparyx()

   Return the beginning coordinates of this window relative to its parent window
   as a tuple ``(y, x)``.  Return ``(-1, -1)`` if this window has no
   parent.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 968)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getstr()
            window.getstr(n)
            window.getstr(y, x)
            window.getstr(y, x, n)

   Read a bytes object from the user, with primitive line editing capacity.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 976)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.getyx()

   Return a tuple ``(y, x)`` of current cursor position  relative to the window's
   upper-left corner.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 982)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.hline(ch, n)
            window.hline(y, x, ch, n)

   Display a horizontal line starting at ``(y, x)`` with length *n* consisting of
   the character *ch*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 989)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.idcok(flag)

   If *flag* is ``False``, curses no longer considers using the hardware insert/delete
   character feature of the terminal; if *flag* is ``True``, use of character insertion
   and deletion is enabled.  When curses is first initialized, use of character
   insert/delete is enabled by default.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 997)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.idlok(flag)

   If *flag* is ``True``, :mod:`curses` will try and use hardware line
   editing facilities. Otherwise, line insertion/deletion are disabled.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1003)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.immedok(flag)

   If *flag* is ``True``, any change in the window image automatically causes the
   window to be refreshed; you no longer have to call :meth:`refresh` yourself.
   However, it may degrade performance considerably, due to repeated calls to
   wrefresh.  This option is disabled by default.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1011)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.inch([y, x])

   Return the character at the given position in the window. The bottom 8 bits are
   the character proper, and upper bits are the attributes.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1017)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.insch(ch[, attr])
            window.insch(y, x, ch[, attr])

   Paint character *ch* at ``(y, x)`` with attributes *attr*, moving the line from
   position *x* right by one character.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1024)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.insdelln(nlines)

   Insert *nlines* lines into the specified window above the current line.  The
   *nlines* bottom lines are lost.  For negative *nlines*, delete *nlines* lines
   starting with the one under the cursor, and move the remaining lines up.  The
   bottom *nlines* lines are cleared.  The current cursor position remains the
   same.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1033)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.insertln()

   Insert a blank line under the cursor. All following lines are moved down by one
   line.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1039)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.insnstr(str, n[, attr])
            window.insnstr(y, x, str, n[, attr])

   Insert a character string (as many characters as will fit on the line) before
   the character under the cursor, up to *n* characters.   If *n* is zero or
   negative, the entire string is inserted. All characters to the right of the
   cursor are shifted right, with the rightmost characters on the line being lost.
   The cursor position does not change (after moving to *y*, *x*, if specified).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1049)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.insstr(str[, attr])
            window.insstr(y, x, str[, attr])

   Insert a character string (as many characters as will fit on the line) before
   the character under the cursor.  All characters to the right of the cursor are
   shifted right, with the rightmost characters on the line being lost.  The cursor
   position does not change (after moving to *y*, *x*, if specified).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1058)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.instr([n])
            window.instr(y, x[, n])

   Return a bytes object of characters, extracted from the window starting at the
   current cursor position, or at *y*, *x* if specified. Attributes are stripped
   from the characters.  If *n* is specified, :meth:`instr` returns a string
   at most *n* characters long (exclusive of the trailing NUL).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1067)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.is_linetouched(line)

   Return ``True`` if the specified line was modified since the last call to
   :meth:`refresh`; otherwise return ``False``.  Raise a :exc:`curses.error`
   exception if *line* is not valid for the given window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1074)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.is_wintouched()

   Return ``True`` if the specified window was modified since the last call to
   :meth:`refresh`; otherwise return ``False``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1080)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.keypad(flag)

   If *flag* is ``True``, escape sequences generated by some keys (keypad,  function keys)
   will be interpreted by :mod:`curses`. If *flag* is ``False``, escape sequences will be
   left as is in the input stream.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1087)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.leaveok(flag)

   If *flag* is ``True``, cursor is left where it is on update, instead of being at &quot;cursor
   position.&quot;  This reduces cursor movement where possible. If possible the cursor
   will be made invisible.

   If *flag* is ``False``, cursor will always be at &quot;cursor position&quot; after an update.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1096)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.move(new_y, new_x)

   Move cursor to ``(new_y, new_x)``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1101)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.mvderwin(y, x)

   Move the window inside its parent window.  The screen-relative parameters of
   the window are not changed.  This routine is used to display different parts of
   the parent window at the same physical position on the screen.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1108)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.mvwin(new_y, new_x)

   Move the window so its upper-left corner is at ``(new_y, new_x)``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1113)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.nodelay(flag)

   If *flag* is ``True``, :meth:`getch` will be non-blocking.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1118)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.notimeout(flag)

   If *flag* is ``True``, escape sequences will not be timed out.

   If *flag* is ``False``, after a few milliseconds, an escape sequence will not be
   interpreted, and will be left in the input stream as is.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1126)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.noutrefresh()

   Mark for refresh but wait.  This function updates the data structure
   representing the desired state of the window, but does not force an update of
   the physical screen.  To accomplish that, call  :func:`doupdate`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1133)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.overlay(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])

   Overlay the window on top of *destwin*. The windows need not be the same size,
   only the overlapping region is copied. This copy is non-destructive, which means
   that the current background character does not overwrite the old contents of
   *destwin*.

   To get fine-grained control over the copied region, the second form of
   :meth:`overlay` can be used. *sminrow* and *smincol* are the upper-left
   coordinates of the source window, and the other variables mark a rectangle in
   the destination window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1146)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.overwrite(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])

   Overwrite the window on top of *destwin*. The windows need not be the same size,
   in which case only the overlapping region is copied. This copy is destructive,
   which means that the current background character overwrites the old contents of
   *destwin*.

   To get fine-grained control over the copied region, the second form of
   :meth:`overwrite` can be used. *sminrow* and *smincol* are the upper-left
   coordinates of the source window, the other variables mark a rectangle in the
   destination window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1159)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.putwin(file)

   Write all data associated with the window into the provided file object.  This
   information can be later retrieved using the :func:`getwin` function.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1165)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.redrawln(beg, num)

   Indicate that the *num* screen lines, starting at line *beg*, are corrupted and
   should be completely redrawn on the next :meth:`refresh` call.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1171)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.redrawwin()

   Touch the entire window, causing it to be completely redrawn on the next
   :meth:`refresh` call.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1177)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])

   Update the display immediately (sync actual screen with previous
   drawing/deleting methods).

   The 6 optional arguments can only be specified when the window is a pad created
   with :func:`newpad`.  The additional parameters are needed to indicate what part
   of the pad and screen are involved. *pminrow* and *pmincol* specify the upper
   left-hand corner of the rectangle to be displayed in the pad.  *sminrow*,
   *smincol*, *smaxrow*, and *smaxcol* specify the edges of the rectangle to be
   displayed on the screen.  The lower right-hand corner of the rectangle to be
   displayed in the pad is calculated from the screen coordinates, since the
   rectangles must be the same size.  Both rectangles must be entirely contained
   within their respective structures.  Negative values of *pminrow*, *pmincol*,
   *sminrow*, or *smincol* are treated as if they were zero.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1194)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.resize(nlines, ncols)

   Reallocate storage for a curses window to adjust its dimensions to the
   specified values.  If either dimension is larger than the current values, the
   window's data is filled with blanks that have the current background
   rendition (as set by :meth:`bkgdset`) merged into them.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1202)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.scroll([lines=1])

   Scroll the screen or scrolling region upward by *lines* lines.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1207)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.scrollok(flag)

   Control what happens when the cursor of a window is moved off the edge of the
   window or scrolling region, either as a result of a newline action on the bottom
   line, or typing the last character of the last line.  If *flag* is ``False``, the
   cursor is left on the bottom line.  If *flag* is ``True``, the window is scrolled up
   one line.  Note that in order to get the physical scrolling effect on the
   terminal, it is also necessary to call :meth:`idlok`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1217)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.setscrreg(top, bottom)

   Set the scrolling region from line *top* to line *bottom*. All scrolling actions
   will take place in this region.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1223)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.standend()

   Turn off the standout attribute.  On some terminals this has the side effect of
   turning off all attributes.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1229)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.standout()

   Turn on attribute *A_STANDOUT*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1234)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.subpad(begin_y, begin_x)
            window.subpad(nlines, ncols, begin_y, begin_x)

   Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and
   whose width/height is *ncols*/*nlines*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1241)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.subwin(begin_y, begin_x)
            window.subwin(nlines, ncols, begin_y, begin_x)

   Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and
   whose width/height is *ncols*/*nlines*.

   By default, the sub-window will extend from the specified position to the lower
   right corner of the window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1251)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.syncdown()

   Touch each location in the window that has been touched in any of its ancestor
   windows.  This routine is called by :meth:`refresh`, so it should almost never
   be necessary to call it manually.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1258)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.syncok(flag)

   If *flag* is ``True``, then :meth:`syncup` is called automatically
   whenever there is a change in the window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1264)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.syncup()

   Touch all locations in ancestors of the window that have been changed in  the
   window.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1270)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.timeout(delay)

   Set blocking or non-blocking read behavior for the window.  If *delay* is
   negative, blocking read is used (which will wait indefinitely for input).  If
   *delay* is zero, then non-blocking read is used, and :meth:`getch` will
   return ``-1`` if no input is waiting.  If *delay* is positive, then
   :meth:`getch` will block for *delay* milliseconds, and return ``-1`` if there is
   still no input at the end of that time.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1280)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.touchline(start, count[, changed])

   Pretend *count* lines have been changed, starting with line *start*.  If
   *changed* is supplied, it specifies whether the affected lines are marked as
   having been changed (*changed*\ ``=True``) or unchanged (*changed*\ ``=False``).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1287)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.touchwin()

   Pretend the whole window has been changed, for purposes of drawing
   optimizations.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1293)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.untouchwin()

   Mark all lines in  the  window  as unchanged since the last call to
   :meth:`refresh`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1299)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: window.vline(ch, n)
            window.vline(y, x, ch, n)

   Display a vertical line starting at ``(y, x)`` with length *n* consisting of the
   character *ch*.


</pre>
</div>
</div>
<div class="section" id="constants">
<h2>Constants</h2>
<p>The <a href="#id19"><span class="problematic" id="id20">:mod:`curses`</span></a> module defines the following data members:</p>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1309); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1312)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: ERR

   Some curses routines  that  return  an integer, such as :meth:`~window.getch`, return
   :const:`ERR` upon failure.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1318)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: OK

   Some curses routines  that  return  an integer, such as  :func:`napms`, return
   :const:`OK` upon success.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1324)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: version

   A bytes object representing the current version of the module.  Also available as
   :const:`__version__`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1330)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: ncurses_version

   A named tuple containing the three components of the ncurses library
   version: *major*, *minor*, and *patch*.  All values are integers.  The
   components can also be accessed by name,  so ``curses.ncurses_version[0]``
   is equivalent to ``curses.ncurses_version.major`` and so on.

   Availability: if the ncurses library is used.

   .. versionadded:: 3.8


</pre>
</div>
<p>Some constants are available to specify character cell attributes.
The exact constants available are system dependent.</p>
<table border="1" class="docutils">
<colgroup>
<col width="37%" />
<col width="63%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Attribute</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal">A_ALTCHARSET</tt></td>
<td>Alternate character set mode</td>
</tr>
<tr><td><tt class="docutils literal">A_BLINK</tt></td>
<td>Blink mode</td>
</tr>
<tr><td><tt class="docutils literal">A_BOLD</tt></td>
<td>Bold mode</td>
</tr>
<tr><td><tt class="docutils literal">A_DIM</tt></td>
<td>Dim mode</td>
</tr>
<tr><td><tt class="docutils literal">A_INVIS</tt></td>
<td>Invisible or blank mode</td>
</tr>
<tr><td><tt class="docutils literal">A_ITALIC</tt></td>
<td>Italic mode</td>
</tr>
<tr><td><tt class="docutils literal">A_NORMAL</tt></td>
<td>Normal attribute</td>
</tr>
<tr><td><tt class="docutils literal">A_PROTECT</tt></td>
<td>Protected mode</td>
</tr>
<tr><td><tt class="docutils literal">A_REVERSE</tt></td>
<td>Reverse background and
foreground colors</td>
</tr>
<tr><td><tt class="docutils literal">A_STANDOUT</tt></td>
<td>Standout mode</td>
</tr>
<tr><td><tt class="docutils literal">A_UNDERLINE</tt></td>
<td>Underline mode</td>
</tr>
<tr><td><tt class="docutils literal">A_HORIZONTAL</tt></td>
<td>Horizontal highlight</td>
</tr>
<tr><td><tt class="docutils literal">A_LEFT</tt></td>
<td>Left highlight</td>
</tr>
<tr><td><tt class="docutils literal">A_LOW</tt></td>
<td>Low highlight</td>
</tr>
<tr><td><tt class="docutils literal">A_RIGHT</tt></td>
<td>Right highlight</td>
</tr>
<tr><td><tt class="docutils literal">A_TOP</tt></td>
<td>Top highlight</td>
</tr>
<tr><td><tt class="docutils literal">A_VERTICAL</tt></td>
<td>Vertical highlight</td>
</tr>
<tr><td><tt class="docutils literal">A_CHARTEXT</tt></td>
<td>Bit-mask to extract a
character</td>
</tr>
</tbody>
</table>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1387)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.7
   ``A_ITALIC`` was added.

</pre>
</div>
<p>Several constants are available to extract corresponding attributes returned
by some methods.</p>
<table border="1" class="docutils">
<colgroup>
<col width="37%" />
<col width="63%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Bit-mask</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal">A_ATTRIBUTES</tt></td>
<td>Bit-mask to extract
attributes</td>
</tr>
<tr><td><tt class="docutils literal">A_CHARTEXT</tt></td>
<td>Bit-mask to extract a
character</td>
</tr>
<tr><td><tt class="docutils literal">A_COLOR</tt></td>
<td>Bit-mask to extract
color-pair field information</td>
</tr>
</tbody>
</table>
<p>Keys are referred to by integer constants with names starting with  <tt class="docutils literal">KEY_</tt>.
The exact keycaps available are system dependent.</p>
<!-- XXX this table is far too large! should it be alphabetized? -->
<table border="1" class="docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Key constant</th>
<th class="head">Key</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal">KEY_MIN</tt></td>
<td>Minimum key value</td>
</tr>
<tr><td><tt class="docutils literal">KEY_BREAK</tt></td>
<td>Break key (unreliable)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_DOWN</tt></td>
<td>Down-arrow</td>
</tr>
<tr><td><tt class="docutils literal">KEY_UP</tt></td>
<td>Up-arrow</td>
</tr>
<tr><td><tt class="docutils literal">KEY_LEFT</tt></td>
<td>Left-arrow</td>
</tr>
<tr><td><tt class="docutils literal">KEY_RIGHT</tt></td>
<td>Right-arrow</td>
</tr>
<tr><td><tt class="docutils literal">KEY_HOME</tt></td>
<td>Home key (upward+left arrow)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_BACKSPACE</tt></td>
<td>Backspace (unreliable)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_F0</tt></td>
<td>Function keys.  Up to 64 function keys are
supported.</td>
</tr>
<tr><td><tt class="docutils literal">KEY_Fn</tt></td>
<td>Value of function key <em>n</em></td>
</tr>
<tr><td><tt class="docutils literal">KEY_DL</tt></td>
<td>Delete line</td>
</tr>
<tr><td><tt class="docutils literal">KEY_IL</tt></td>
<td>Insert line</td>
</tr>
<tr><td><tt class="docutils literal">KEY_DC</tt></td>
<td>Delete character</td>
</tr>
<tr><td><tt class="docutils literal">KEY_IC</tt></td>
<td>Insert char or enter insert mode</td>
</tr>
<tr><td><tt class="docutils literal">KEY_EIC</tt></td>
<td>Exit insert char mode</td>
</tr>
<tr><td><tt class="docutils literal">KEY_CLEAR</tt></td>
<td>Clear screen</td>
</tr>
<tr><td><tt class="docutils literal">KEY_EOS</tt></td>
<td>Clear to end of screen</td>
</tr>
<tr><td><tt class="docutils literal">KEY_EOL</tt></td>
<td>Clear to end of line</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SF</tt></td>
<td>Scroll 1 line forward</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SR</tt></td>
<td>Scroll 1 line backward (reverse)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_NPAGE</tt></td>
<td>Next page</td>
</tr>
<tr><td><tt class="docutils literal">KEY_PPAGE</tt></td>
<td>Previous page</td>
</tr>
<tr><td><tt class="docutils literal">KEY_STAB</tt></td>
<td>Set tab</td>
</tr>
<tr><td><tt class="docutils literal">KEY_CTAB</tt></td>
<td>Clear tab</td>
</tr>
<tr><td><tt class="docutils literal">KEY_CATAB</tt></td>
<td>Clear all tabs</td>
</tr>
<tr><td><tt class="docutils literal">KEY_ENTER</tt></td>
<td>Enter or send (unreliable)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SRESET</tt></td>
<td>Soft (partial) reset (unreliable)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_RESET</tt></td>
<td>Reset or hard reset (unreliable)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_PRINT</tt></td>
<td>Print</td>
</tr>
<tr><td><tt class="docutils literal">KEY_LL</tt></td>
<td>Home down or bottom (lower left)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_A1</tt></td>
<td>Upper left of keypad</td>
</tr>
<tr><td><tt class="docutils literal">KEY_A3</tt></td>
<td>Upper right of keypad</td>
</tr>
<tr><td><tt class="docutils literal">KEY_B2</tt></td>
<td>Center of keypad</td>
</tr>
<tr><td><tt class="docutils literal">KEY_C1</tt></td>
<td>Lower left of keypad</td>
</tr>
<tr><td><tt class="docutils literal">KEY_C3</tt></td>
<td>Lower right of keypad</td>
</tr>
<tr><td><tt class="docutils literal">KEY_BTAB</tt></td>
<td>Back tab</td>
</tr>
<tr><td><tt class="docutils literal">KEY_BEG</tt></td>
<td>Beg (beginning)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_CANCEL</tt></td>
<td>Cancel</td>
</tr>
<tr><td><tt class="docutils literal">KEY_CLOSE</tt></td>
<td>Close</td>
</tr>
<tr><td><tt class="docutils literal">KEY_COMMAND</tt></td>
<td>Cmd (command)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_COPY</tt></td>
<td>Copy</td>
</tr>
<tr><td><tt class="docutils literal">KEY_CREATE</tt></td>
<td>Create</td>
</tr>
<tr><td><tt class="docutils literal">KEY_END</tt></td>
<td>End</td>
</tr>
<tr><td><tt class="docutils literal">KEY_EXIT</tt></td>
<td>Exit</td>
</tr>
<tr><td><tt class="docutils literal">KEY_FIND</tt></td>
<td>Find</td>
</tr>
<tr><td><tt class="docutils literal">KEY_HELP</tt></td>
<td>Help</td>
</tr>
<tr><td><tt class="docutils literal">KEY_MARK</tt></td>
<td>Mark</td>
</tr>
<tr><td><tt class="docutils literal">KEY_MESSAGE</tt></td>
<td>Message</td>
</tr>
<tr><td><tt class="docutils literal">KEY_MOVE</tt></td>
<td>Move</td>
</tr>
<tr><td><tt class="docutils literal">KEY_NEXT</tt></td>
<td>Next</td>
</tr>
<tr><td><tt class="docutils literal">KEY_OPEN</tt></td>
<td>Open</td>
</tr>
<tr><td><tt class="docutils literal">KEY_OPTIONS</tt></td>
<td>Options</td>
</tr>
<tr><td><tt class="docutils literal">KEY_PREVIOUS</tt></td>
<td>Prev (previous)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_REDO</tt></td>
<td>Redo</td>
</tr>
<tr><td><tt class="docutils literal">KEY_REFERENCE</tt></td>
<td>Ref (reference)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_REFRESH</tt></td>
<td>Refresh</td>
</tr>
<tr><td><tt class="docutils literal">KEY_REPLACE</tt></td>
<td>Replace</td>
</tr>
<tr><td><tt class="docutils literal">KEY_RESTART</tt></td>
<td>Restart</td>
</tr>
<tr><td><tt class="docutils literal">KEY_RESUME</tt></td>
<td>Resume</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SAVE</tt></td>
<td>Save</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SBEG</tt></td>
<td>Shifted Beg (beginning)</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SCANCEL</tt></td>
<td>Shifted Cancel</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SCOMMAND</tt></td>
<td>Shifted Command</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SCOPY</tt></td>
<td>Shifted Copy</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SCREATE</tt></td>
<td>Shifted Create</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SDC</tt></td>
<td>Shifted Delete char</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SDL</tt></td>
<td>Shifted Delete line</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SELECT</tt></td>
<td>Select</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SEND</tt></td>
<td>Shifted End</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SEOL</tt></td>
<td>Shifted Clear line</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SEXIT</tt></td>
<td>Shifted Exit</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SFIND</tt></td>
<td>Shifted Find</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SHELP</tt></td>
<td>Shifted Help</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SHOME</tt></td>
<td>Shifted Home</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SIC</tt></td>
<td>Shifted Input</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SLEFT</tt></td>
<td>Shifted Left arrow</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SMESSAGE</tt></td>
<td>Shifted Message</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SMOVE</tt></td>
<td>Shifted Move</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SNEXT</tt></td>
<td>Shifted Next</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SOPTIONS</tt></td>
<td>Shifted Options</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SPREVIOUS</tt></td>
<td>Shifted Prev</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SPRINT</tt></td>
<td>Shifted Print</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SREDO</tt></td>
<td>Shifted Redo</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SREPLACE</tt></td>
<td>Shifted Replace</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SRIGHT</tt></td>
<td>Shifted Right arrow</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SRSUME</tt></td>
<td>Shifted Resume</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SSAVE</tt></td>
<td>Shifted Save</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SSUSPEND</tt></td>
<td>Shifted Suspend</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SUNDO</tt></td>
<td>Shifted Undo</td>
</tr>
<tr><td><tt class="docutils literal">KEY_SUSPEND</tt></td>
<td>Suspend</td>
</tr>
<tr><td><tt class="docutils literal">KEY_UNDO</tt></td>
<td>Undo</td>
</tr>
<tr><td><tt class="docutils literal">KEY_MOUSE</tt></td>
<td>Mouse event has occurred</td>
</tr>
<tr><td><tt class="docutils literal">KEY_RESIZE</tt></td>
<td>Terminal resize event</td>
</tr>
<tr><td><tt class="docutils literal">KEY_MAX</tt></td>
<td>Maximum key value</td>
</tr>
</tbody>
</table>
<p>On VT100s and their software emulations, such as X terminal emulators, there are
normally at least four function keys (<a href="#id21"><span class="problematic" id="id22">:const:`KEY_F1`</span></a>, <a href="#id23"><span class="problematic" id="id24">:const:`KEY_F2`</span></a>,
<a href="#id25"><span class="problematic" id="id26">:const:`KEY_F3`</span></a>, <a href="#id27"><span class="problematic" id="id28">:const:`KEY_F4`</span></a>) available, and the arrow keys mapped to
<a href="#id29"><span class="problematic" id="id30">:const:`KEY_UP`</span></a>, <a href="#id31"><span class="problematic" id="id32">:const:`KEY_DOWN`</span></a>, <a href="#id33"><span class="problematic" id="id34">:const:`KEY_LEFT`</span></a> and <a href="#id35"><span class="problematic" id="id36">:const:`KEY_RIGHT`</span></a> in
the obvious way.  If your machine has a PC keyboard, it is safe to expect arrow
keys and twelve function keys (older PC keyboards may have only ten function
keys); also, the following keypad mappings are standard:</p>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id33">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id34">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<div class="system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1604); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;const&quot;.</div>
<table border="1" class="docutils">
<colgroup>
<col width="62%" />
<col width="38%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Keycap</th>
<th class="head">Constant</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><p class="first"><a href="#id37"><span class="problematic" id="id38">:kbd:`Insert`</span></a></p>
<div class="last system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1616); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;kbd&quot;.</div>
</td>
<td>KEY_IC</td>
</tr>
<tr><td><p class="first"><a href="#id39"><span class="problematic" id="id40">:kbd:`Delete`</span></a></p>
<div class="last system-message" id="id39">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1618); <em><a href="#id40">backlink</a></em></p>
Unknown interpreted text role &quot;kbd&quot;.</div>
</td>
<td>KEY_DC</td>
</tr>
<tr><td><p class="first"><a href="#id41"><span class="problematic" id="id42">:kbd:`Home`</span></a></p>
<div class="last system-message" id="id41">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1620); <em><a href="#id42">backlink</a></em></p>
Unknown interpreted text role &quot;kbd&quot;.</div>
</td>
<td>KEY_HOME</td>
</tr>
<tr><td><p class="first"><a href="#id43"><span class="problematic" id="id44">:kbd:`End`</span></a></p>
<div class="last system-message" id="id43">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1622); <em><a href="#id44">backlink</a></em></p>
Unknown interpreted text role &quot;kbd&quot;.</div>
</td>
<td>KEY_END</td>
</tr>
<tr><td><p class="first"><a href="#id45"><span class="problematic" id="id46">:kbd:`Page Up`</span></a></p>
<div class="last system-message" id="id45">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1624); <em><a href="#id46">backlink</a></em></p>
Unknown interpreted text role &quot;kbd&quot;.</div>
</td>
<td>KEY_PPAGE</td>
</tr>
<tr><td><p class="first"><a href="#id47"><span class="problematic" id="id48">:kbd:`Page Down`</span></a></p>
<div class="last system-message" id="id47">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1626); <em><a href="#id48">backlink</a></em></p>
Unknown interpreted text role &quot;kbd&quot;.</div>
</td>
<td>KEY_NPAGE</td>
</tr>
</tbody>
</table>
<p>The following table lists characters from the alternate character set. These are
inherited from the VT100 terminal, and will generally be  available on software
emulations such as X terminals.  When there is no graphic available, curses
falls back on a crude printable ASCII approximation.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>These are available only after <a href="#id49"><span class="problematic" id="id50">:func:`initscr`</span></a> has  been called.</p>
<div class="last system-message" id="id49">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1635); <em><a href="#id50">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</div>
<table border="1" class="docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">ACS code</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal">ACS_BBSS</tt></td>
<td>alternate name for upper right corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BLOCK</tt></td>
<td>solid square block</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BOARD</tt></td>
<td>board of squares</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BSBS</tt></td>
<td>alternate name for horizontal line</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BSSB</tt></td>
<td>alternate name for upper left corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BSSS</tt></td>
<td>alternate name for top tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BTEE</tt></td>
<td>bottom tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_BULLET</tt></td>
<td>bullet</td>
</tr>
<tr><td><tt class="docutils literal">ACS_CKBOARD</tt></td>
<td>checker board (stipple)</td>
</tr>
<tr><td><tt class="docutils literal">ACS_DARROW</tt></td>
<td>arrow pointing down</td>
</tr>
<tr><td><tt class="docutils literal">ACS_DEGREE</tt></td>
<td>degree symbol</td>
</tr>
<tr><td><tt class="docutils literal">ACS_DIAMOND</tt></td>
<td>diamond</td>
</tr>
<tr><td><tt class="docutils literal">ACS_GEQUAL</tt></td>
<td>greater-than-or-equal-to</td>
</tr>
<tr><td><tt class="docutils literal">ACS_HLINE</tt></td>
<td>horizontal line</td>
</tr>
<tr><td><tt class="docutils literal">ACS_LANTERN</tt></td>
<td>lantern symbol</td>
</tr>
<tr><td><tt class="docutils literal">ACS_LARROW</tt></td>
<td>left arrow</td>
</tr>
<tr><td><tt class="docutils literal">ACS_LEQUAL</tt></td>
<td>less-than-or-equal-to</td>
</tr>
<tr><td><tt class="docutils literal">ACS_LLCORNER</tt></td>
<td>lower left-hand corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_LRCORNER</tt></td>
<td>lower right-hand corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_LTEE</tt></td>
<td>left tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_NEQUAL</tt></td>
<td>not-equal sign</td>
</tr>
<tr><td><tt class="docutils literal">ACS_PI</tt></td>
<td>letter pi</td>
</tr>
<tr><td><tt class="docutils literal">ACS_PLMINUS</tt></td>
<td>plus-or-minus sign</td>
</tr>
<tr><td><tt class="docutils literal">ACS_PLUS</tt></td>
<td>big plus sign</td>
</tr>
<tr><td><tt class="docutils literal">ACS_RARROW</tt></td>
<td>right arrow</td>
</tr>
<tr><td><tt class="docutils literal">ACS_RTEE</tt></td>
<td>right tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_S1</tt></td>
<td>scan line 1</td>
</tr>
<tr><td><tt class="docutils literal">ACS_S3</tt></td>
<td>scan line 3</td>
</tr>
<tr><td><tt class="docutils literal">ACS_S7</tt></td>
<td>scan line 7</td>
</tr>
<tr><td><tt class="docutils literal">ACS_S9</tt></td>
<td>scan line 9</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SBBS</tt></td>
<td>alternate name for lower right corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SBSB</tt></td>
<td>alternate name for vertical line</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SBSS</tt></td>
<td>alternate name for right tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SSBB</tt></td>
<td>alternate name for lower left corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SSBS</tt></td>
<td>alternate name for bottom tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SSSB</tt></td>
<td>alternate name for left tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_SSSS</tt></td>
<td>alternate name for crossover or big plus</td>
</tr>
<tr><td><tt class="docutils literal">ACS_STERLING</tt></td>
<td>pound sterling</td>
</tr>
<tr><td><tt class="docutils literal">ACS_TTEE</tt></td>
<td>top tee</td>
</tr>
<tr><td><tt class="docutils literal">ACS_UARROW</tt></td>
<td>up arrow</td>
</tr>
<tr><td><tt class="docutils literal">ACS_ULCORNER</tt></td>
<td>upper left corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_URCORNER</tt></td>
<td>upper right corner</td>
</tr>
<tr><td><tt class="docutils literal">ACS_VLINE</tt></td>
<td>vertical line</td>
</tr>
</tbody>
</table>
<p>The following table lists the predefined colors:</p>
<table border="1" class="docutils">
<colgroup>
<col width="40%" />
<col width="60%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Constant</th>
<th class="head">Color</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal">COLOR_BLACK</tt></td>
<td>Black</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_BLUE</tt></td>
<td>Blue</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_CYAN</tt></td>
<td>Cyan (light greenish blue)</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_GREEN</tt></td>
<td>Green</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_MAGENTA</tt></td>
<td>Magenta (purplish red)</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_RED</tt></td>
<td>Red</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_WHITE</tt></td>
<td>White</td>
</tr>
<tr><td><tt class="docutils literal">COLOR_YELLOW</tt></td>
<td>Yellow</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="mod-curses-textpad-text-input-widget-for-curses-programs">
<h1><a href="#id51"><span class="problematic" id="id52">:mod:`curses.textpad`</span></a> --- Text input widget for curses programs</h1>
<div class="system-message" id="id51">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1750); <em><a href="#id52">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1753)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: curses.textpad
   :synopsis: Emacs-like input editing in a curses window.
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1755)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Eric Raymond &lt;esr&#64;thyrsus.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1756)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Eric Raymond &lt;esr&#64;thyrsus.com&gt;


</pre>
</div>
<p>The <a href="#id53"><span class="problematic" id="id54">:mod:`curses.textpad`</span></a> module provides a <a href="#id55"><span class="problematic" id="id56">:class:`Textbox`</span></a> class that handles
elementary text editing in a curses window, supporting a set of keybindings
resembling those of Emacs (thus, also of Netscape Navigator, BBedit 6.x,
FrameMaker, and many other programs).  The module also provides a
rectangle-drawing function useful for framing text boxes or for other purposes.</p>
<div class="system-message" id="id53">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1759); <em><a href="#id54">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id55">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1759); <em><a href="#id56">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>The module <a href="#id57"><span class="problematic" id="id58">:mod:`curses.textpad`</span></a> defines the following function:</p>
<div class="system-message" id="id57">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1765); <em><a href="#id58">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1768)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: rectangle(win, uly, ulx, lry, lrx)

   Draw a rectangle.  The first argument must be a window object; the remaining
   arguments are coordinates relative to that window.  The second and third
   arguments are the y and x coordinates of the upper left hand corner of the
   rectangle to be drawn; the fourth and fifth arguments are the y and x
   coordinates of the lower right hand corner. The rectangle will be drawn using
   VT100/IBM PC forms characters on terminals that make this possible (including
   xterm and most other software terminal emulators).  Otherwise it will be drawn
   with ASCII  dashes, vertical bars, and plus signs.


</pre>
</div>
<div class="section" id="textbox-objects">
<span id="curses-textpad-objects"></span><h2>Textbox objects</h2>
<p>You can instantiate a <a href="#id59"><span class="problematic" id="id60">:class:`Textbox`</span></a> object as follows:</p>
<div class="system-message" id="id59">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1785); <em><a href="#id60">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="textbox-win">Return a textbox widget object.  The <em>win</em> argument should be a curses
<a href="#id61"><span class="problematic" id="id62">:ref:`window &lt;curses-window-objects&gt;`</span></a> object in which the textbox is to
be contained. The edit cursor of the textbox is initially located at the
upper left hand corner of the containing window, with coordinates <tt class="docutils literal">(0, 0)</tt>.
The instance's <a href="#id63"><span class="problematic" id="id64">:attr:`stripspaces`</span></a> flag is initially on.</p>
<div class="textbox-win system-message" id="id61">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1790); <em><a href="#id62">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="textbox-win system-message" id="id63">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1790); <em><a href="#id64">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p class="textbox-win"><a href="#id65"><span class="problematic" id="id66">:class:`Textbox`</span></a> objects have the following methods:</p>
<div class="textbox-win system-message" id="id65">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1796); <em><a href="#id66">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="textbox-win system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1799)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: edit([validator])

   This is the entry point you will normally use.  It accepts editing
   keystrokes until one of the termination keystrokes is entered.  If
   *validator* is supplied, it must be a function.  It will be called for
   each keystroke entered with the keystroke as a parameter; command dispatch
   is done on the result. This method returns the window contents as a
   string; whether blanks in the window are included is affected by the
   :attr:`stripspaces` attribute.


</pre>
</div>
<div class="textbox-win system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1810)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: do_command(ch)

   Process a single command keystroke.  Here are the supported special
   keystrokes:

   +------------------+-------------------------------------------+
   | Keystroke        | Action                                    |
   +==================+===========================================+
   | :kbd:`Control-A` | Go to left edge of window.                |
   +------------------+-------------------------------------------+
   | :kbd:`Control-B` | Cursor left, wrapping to previous line if |
   |                  | appropriate.                              |
   +------------------+-------------------------------------------+
   | :kbd:`Control-D` | Delete character under cursor.            |
   +------------------+-------------------------------------------+
   | :kbd:`Control-E` | Go to right edge (stripspaces off) or end |
   |                  | of line (stripspaces on).                 |
   +------------------+-------------------------------------------+
   | :kbd:`Control-F` | Cursor right, wrapping to next line when  |
   |                  | appropriate.                              |
   +------------------+-------------------------------------------+
   | :kbd:`Control-G` | Terminate, returning the window contents. |
   +------------------+-------------------------------------------+
   | :kbd:`Control-H` | Delete character backward.                |
   +------------------+-------------------------------------------+
   | :kbd:`Control-J` | Terminate if the window is 1 line,        |
   |                  | otherwise insert newline.                 |
   +------------------+-------------------------------------------+
   | :kbd:`Control-K` | If line is blank, delete it, otherwise    |
   |                  | clear to end of line.                     |
   +------------------+-------------------------------------------+
   | :kbd:`Control-L` | Refresh screen.                           |
   +------------------+-------------------------------------------+
   | :kbd:`Control-N` | Cursor down; move down one line.          |
   +------------------+-------------------------------------------+
   | :kbd:`Control-O` | Insert a blank line at cursor location.   |
   +------------------+-------------------------------------------+
   | :kbd:`Control-P` | Cursor up; move up one line.              |
   +------------------+-------------------------------------------+

   Move operations do nothing if the cursor is at an edge where the movement
   is not possible.  The following synonyms are supported where possible:

   +------------------------+------------------+
   | Constant               | Keystroke        |
   +========================+==================+
   | :const:`KEY_LEFT`      | :kbd:`Control-B` |
   +------------------------+------------------+
   | :const:`KEY_RIGHT`     | :kbd:`Control-F` |
   +------------------------+------------------+
   | :const:`KEY_UP`        | :kbd:`Control-P` |
   +------------------------+------------------+
   | :const:`KEY_DOWN`      | :kbd:`Control-N` |
   +------------------------+------------------+
   | :const:`KEY_BACKSPACE` | :kbd:`Control-h` |
   +------------------------+------------------+

   All other keystrokes are treated as a command to insert the given
   character and move right (with line wrapping).


</pre>
</div>
<div class="textbox-win system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1871)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: gather()

   Return the window contents as a string; whether blanks in the
   window are included is affected by the :attr:`stripspaces` member.


</pre>
</div>
<div class="textbox-win system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">curses.rst</tt>, line 1877)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: stripspaces

   This attribute is a flag which controls the interpretation of blanks in
   the window.  When it is on, trailing blanks on each line are ignored; any
   cursor motion that would land the cursor on a trailing blank goes to the
   end of that line instead, and trailing blanks are stripped when the window
   contents are gathered.
</pre>
</div>
</div>
</div>
</div>
</body>
</html>
