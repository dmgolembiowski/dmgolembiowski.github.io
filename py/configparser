<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`configparser` --- Configuration file parser</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-configparser-configuration-file-parser">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`configparser`</span></a> --- Configuration file parser</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: configparser
   :synopsis: Configuration file parser.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 7)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Ken Manheimer &lt;klm&#64;zope.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 8)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Barry Warsaw &lt;bwarsaw&#64;python.org&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 9)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Eric S. Raymond &lt;esr&#64;thyrsus.com&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 10)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: ≈Åukasz Langa &lt;lukasz&#64;langa.pl&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 11)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Christopher G. Petrilli &lt;petrilli&#64;amber.org&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 12)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: ≈Åukasz Langa &lt;lukasz&#64;langa.pl&gt;

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/configparser.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 14); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 16)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index::
   pair: .ini; file
   pair: configuration; file
   single: ini file
   single: Windows ini file

</pre>
</div>
<hr class="docutils" />
<p>This module provides the <a href="#id5"><span class="problematic" id="id6">:class:`ConfigParser`</span></a> class which implements a basic
configuration language which provides a structure similar to what's found in
Microsoft Windows INI files.  You can use this to write Python programs which
can be customized by end users easily.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 24); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This library does <em>not</em> interpret or write the value-type prefixes used in
the Windows Registry extended version of INI syntax.</p>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 34)</p>
<p>Unknown directive type &quot;seealso&quot;.</p>
<pre class="literal-block">
.. seealso::

   Module :mod:`shlex`
      Support for creating Unix shell-like mini-languages which can be used as
      an alternate format for application configuration files.

   Module :mod:`json`
      The json module implements a subset of JavaScript syntax which can also
      be used for this purpose.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 45)</p>
<p>Unknown directive type &quot;testsetup&quot;.</p>
<pre class="literal-block">
.. testsetup::

   import configparser


</pre>
</div>
<div class="section" id="quick-start">
<h1>Quick Start</h1>
<p>Let's take a very basic configuration file that looks like this:</p>
<pre class="code ini literal-block">
<span class="keyword">[DEFAULT]</span>
<span class="name attribute">ServerAliveInterval</span> <span class="operator">=</span> <span class="literal string">45</span>
<span class="name attribute">Compression</span> <span class="operator">=</span> <span class="literal string">yes</span>
<span class="name attribute">CompressionLevel</span> <span class="operator">=</span> <span class="literal string">9</span>
<span class="name attribute">ForwardX11</span> <span class="operator">=</span> <span class="literal string">yes</span>

<span class="keyword">[bitbucket.org]</span>
<span class="name attribute">User</span> <span class="operator">=</span> <span class="literal string">hg</span>

<span class="keyword">[topsecret.server.com]</span>
<span class="name attribute">Port</span> <span class="operator">=</span> <span class="literal string">50022</span>
<span class="name attribute">ForwardX11</span> <span class="operator">=</span> <span class="literal string">no</span>
</pre>
<p>The structure of INI files is described <a class="reference external" href="#supported-ini-file-structure">in the following section</a>.  Essentially, the file
consists of sections, each of which contains keys with values.
<a href="#id7"><span class="problematic" id="id8">:mod:`configparser`</span></a> classes can read and write such files.  Let's start by
creating the above configuration file programmatically.</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 70); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 76)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; import configparser
   &gt;&gt;&gt; config = configparser.ConfigParser()
   &gt;&gt;&gt; config['DEFAULT'] = {'ServerAliveInterval': '45',
   ...                      'Compression': 'yes',
   ...                      'CompressionLevel': '9'}
   &gt;&gt;&gt; config['bitbucket.org'] = {}
   &gt;&gt;&gt; config['bitbucket.org']['User'] = 'hg'
   &gt;&gt;&gt; config['topsecret.server.com'] = {}
   &gt;&gt;&gt; topsecret = config['topsecret.server.com']
   &gt;&gt;&gt; topsecret['Port'] = '50022'     # mutates the parser
   &gt;&gt;&gt; topsecret['ForwardX11'] = 'no'  # same here
   &gt;&gt;&gt; config['DEFAULT']['ForwardX11'] = 'yes'
   &gt;&gt;&gt; with open('example.ini', 'w') as configfile:
   ...   config.write(configfile)
   ...

</pre>
</div>
<p>As you can see, we can treat a config parser much like a dictionary.
There are differences, <a class="reference external" href="#mapping-protocol-access">outlined later</a>, but
the behavior is very close to what you would expect from a dictionary.</p>
<p>Now that we have created and saved a configuration file, let's read it
back and explore the data it holds.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 101)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; config = configparser.ConfigParser()
   &gt;&gt;&gt; config.sections()
   []
   &gt;&gt;&gt; config.read('example.ini')
   ['example.ini']
   &gt;&gt;&gt; config.sections()
   ['bitbucket.org', 'topsecret.server.com']
   &gt;&gt;&gt; 'bitbucket.org' in config
   True
   &gt;&gt;&gt; 'bytebong.com' in config
   False
   &gt;&gt;&gt; config['bitbucket.org']['User']
   'hg'
   &gt;&gt;&gt; config['DEFAULT']['Compression']
   'yes'
   &gt;&gt;&gt; topsecret = config['topsecret.server.com']
   &gt;&gt;&gt; topsecret['ForwardX11']
   'no'
   &gt;&gt;&gt; topsecret['Port']
   '50022'
   &gt;&gt;&gt; for key in config['bitbucket.org']:  # doctest: +SKIP
   ...     print(key)
   user
   compressionlevel
   serveraliveinterval
   compression
   forwardx11
   &gt;&gt;&gt; config['bitbucket.org']['ForwardX11']
   'yes'

</pre>
</div>
<p>As we can see above, the API is pretty straightforward.  The only bit of magic
involves the <tt class="docutils literal">DEFAULT</tt> section which provides default values for all other
sections <a class="footnote-reference" href="#id87" id="id9">[1]</a>.  Note also that keys in sections are
case-insensitive and stored in lowercase <a class="footnote-reference" href="#id87" id="id10">[1]</a>.</p>
</div>
<div class="section" id="supported-datatypes">
<h1>Supported Datatypes</h1>
<p>Config parsers do not guess datatypes of values in configuration files, always
storing them internally as strings.  This means that if you need other
datatypes, you should convert on your own:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 146)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; int(topsecret['Port'])
   50022
   &gt;&gt;&gt; float(topsecret['CompressionLevel'])
   9.0

</pre>
</div>
<p>Since this task is so common, config parsers provide a range of handy getter
methods to handle integers, floats and booleans.  The last one is the most
interesting because simply passing the value to <tt class="docutils literal">bool()</tt> would do no good
since <tt class="docutils literal"><span class="pre">bool('False')</span></tt> is still <tt class="docutils literal">True</tt>.  This is why config parsers also
provide <a href="#id11"><span class="problematic" id="id12">:meth:`~ConfigParser.getboolean`</span></a>.  This method is case-insensitive and
recognizes Boolean values from <tt class="docutils literal">'yes'</tt>/<tt class="docutils literal">'no'</tt>, <tt class="docutils literal">'on'</tt>/<tt class="docutils literal">'off'</tt>,
<tt class="docutils literal">'true'</tt>/<tt class="docutils literal">'false'</tt> and <tt class="docutils literal">'1'</tt>/<tt class="docutils literal">'0'</tt> <a class="footnote-reference" href="#id87" id="id13">[1]</a>.  For example:</p>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 153); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 161)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; topsecret.getboolean('ForwardX11')
   False
   &gt;&gt;&gt; config['bitbucket.org'].getboolean('ForwardX11')
   True
   &gt;&gt;&gt; config.getboolean('bitbucket.org', 'Compression')
   True

</pre>
</div>
<p>Apart from <a href="#id14"><span class="problematic" id="id15">:meth:`~ConfigParser.getboolean`</span></a>, config parsers also
provide equivalent <a href="#id16"><span class="problematic" id="id17">:meth:`~ConfigParser.getint`</span></a> and
<a href="#id18"><span class="problematic" id="id19">:meth:`~ConfigParser.getfloat`</span></a> methods.  You can register your own
converters and customize the provided ones. <a class="footnote-reference" href="#id87" id="id20">[1]</a></p>
<div class="system-message" id="id14">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 170); <em><a href="#id15">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id16">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 170); <em><a href="#id17">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id18">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 170); <em><a href="#id19">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
</div>
<div class="section" id="fallback-values">
<h1>Fallback Values</h1>
<p>As with a dictionary, you can use a section's <a href="#id21"><span class="problematic" id="id22">:meth:`get`</span></a> method to
provide fallback values:</p>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 178); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 181)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; topsecret.get('Port')
   '50022'
   &gt;&gt;&gt; topsecret.get('CompressionLevel')
   '9'
   &gt;&gt;&gt; topsecret.get('Cipher')
   &gt;&gt;&gt; topsecret.get('Cipher', '3des-cbc')
   '3des-cbc'

</pre>
</div>
<p>Please note that default values have precedence over fallback values.
For instance, in our example the <tt class="docutils literal">'CompressionLevel'</tt> key was
specified only in the <tt class="docutils literal">'DEFAULT'</tt> section.  If we try to get it from
the section <tt class="docutils literal">'topsecret.server.com'</tt>, we will always get the default,
even if we specify a fallback:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 197)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; topsecret.get('CompressionLevel', '3')
   '9'

</pre>
</div>
<p>One more thing to be aware of is that the parser-level <a href="#id23"><span class="problematic" id="id24">:meth:`get`</span></a> method
provides a custom, more complex interface, maintained for backwards
compatibility.  When using this method, a fallback value can be provided via
the <tt class="docutils literal">fallback</tt> keyword-only argument:</p>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 202); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 207)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; config.get('bitbucket.org', 'monster',
   ...            fallback='No such things as monsters')
   'No such things as monsters'

</pre>
</div>
<p>The same <tt class="docutils literal">fallback</tt> argument can be used with the
<a href="#id25"><span class="problematic" id="id26">:meth:`~ConfigParser.getint`</span></a>, <a href="#id27"><span class="problematic" id="id28">:meth:`~ConfigParser.getfloat`</span></a> and
<a href="#id29"><span class="problematic" id="id30">:meth:`~ConfigParser.getboolean`</span></a> methods, for example:</p>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 213); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 213); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 213); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 217)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; 'BatchMode' in topsecret
   False
   &gt;&gt;&gt; topsecret.getboolean('BatchMode', fallback=True)
   True
   &gt;&gt;&gt; config['DEFAULT']['BatchMode'] = 'no'
   &gt;&gt;&gt; topsecret.getboolean('BatchMode', fallback=True)
   False


</pre>
</div>
</div>
<div class="section" id="supported-ini-file-structure">
<h1>Supported INI File Structure</h1>
<p>A configuration file consists of sections, each led by a <tt class="docutils literal">[section]</tt> header,
followed by key/value entries separated by a specific string (<tt class="docutils literal">=</tt> or <tt class="docutils literal">:</tt> by
default <a class="footnote-reference" href="#id87" id="id31">[1]</a>).  By default, section names are case sensitive but keys are not
<a class="footnote-reference" href="#id87" id="id32">[1]</a>.  Leading and trailing whitespace is removed from keys and values.
Values can be omitted, in which case the key/value delimiter may also be left
out.  Values can also span multiple lines, as long as they are indented deeper
than the first line of the value.  Depending on the parser's mode, blank lines
may be treated as parts of multiline values or ignored.</p>
<p>Configuration files may include comments, prefixed by specific
characters (<tt class="docutils literal">#</tt> and <tt class="docutils literal">;</tt> by default <a class="footnote-reference" href="#id87" id="id33">[1]</a>).  Comments may appear on
their own on an otherwise empty line, possibly indented. <a class="footnote-reference" href="#id87" id="id34">[1]</a></p>
<p>For example:</p>
<pre class="code ini literal-block">
<span class="keyword">[Simple Values]</span>
<span class="name attribute">key</span><span class="operator">=</span><span class="literal string">value</span>
<span class="name attribute">spaces in keys</span><span class="operator">=</span><span class="literal string">allowed</span>
<span class="name attribute">spaces in values</span><span class="operator">=</span><span class="literal string">allowed as well</span>
<span class="name attribute">spaces around the delimiter</span> <span class="operator">=</span> <span class="literal string">obviously</span>
<span class="name attribute">you can also use : to delimit keys from values</span>

<span class="keyword">[All Values Are Strings]</span>
<span class="name attribute">values like this: 1000000</span>
<span class="name attribute">or this: 3.14159265359</span>
<span class="name attribute">are they treated as numbers? : no</span>
<span class="name attribute">integers, floats and booleans are held as: strings</span>
<span class="name attribute">can use the API to get converted values directly: true</span>

<span class="keyword">[Multiline Values]</span>
<span class="name attribute">chorus: I'm a lumberjack, and I'm okay</span>
    <span class="name attribute">I sleep all night and I work all day</span>

<span class="keyword">[No Values]</span>
<span class="name attribute">key_without_value</span>
<span class="name attribute">empty string value here</span> <span class="operator">=</span>

<span class="keyword">[You can use comments]</span>
<span class="comment single"># like this</span>
<span class="comment single">; or this</span>

<span class="comment single"># By default only in an empty line.</span>
<span class="comment single"># Inline comments can be harmful because they prevent users</span>
<span class="comment single"># from using the delimiting characters as parts of values.</span>
<span class="comment single"># That being said, this can be customized.</span>

    <span class="keyword">[Sections Can Be Indented]</span>
        <span class="name attribute">can_values_be_as_well</span> <span class="operator">=</span> <span class="literal string">True</span>
        <span class="name attribute">does_that_mean_anything_special</span> <span class="operator">=</span> <span class="literal string">False</span>
        <span class="name attribute">purpose</span> <span class="operator">=</span> <span class="literal string">formatting for readability</span>
        <span class="name attribute">multiline_values</span> <span class="operator">=</span> <span class="literal string">are</span>
            <span class="name attribute">handled just fine as</span>
            <span class="name attribute">long as they are indented</span>
            <span class="name attribute">deeper than the first line</span>
            <span class="name attribute">of a value</span>
        <span class="comment single"># Did I mention we can indent comments, too?</span>
</pre>
</div>
<div class="section" id="interpolation-of-values">
<h1>Interpolation of values</h1>
<p>On top of the core functionality, <a href="#id35"><span class="problematic" id="id36">:class:`ConfigParser`</span></a> supports
interpolation.  This means values can be preprocessed before returning them
from <tt class="docutils literal">get()</tt> calls.</p>
<div class="system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 294); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 298)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index:: single: % (percent); interpolation in configuration files

</pre>
</div>
<p class="basicinterpolation">The default implementation used by <a href="#id37"><span class="problematic" id="id38">:class:`ConfigParser`</span></a>.  It enables
values to contain format strings which refer to other values in the same
section, or values in the special default section <a class="footnote-reference" href="#id87" id="id39">[1]</a>.  Additional default
values can be provided on initialization.</p>
<div class="basicinterpolation system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 302); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="basicinterpolation">For example:</p>
<pre class="code ini basicinterpolation literal-block">
<span class="keyword">[Paths]</span>
<span class="name attribute">home_dir: /Users</span>
<span class="name attribute">my_dir: %(home_dir)s/lumberjack</span>
<span class="name attribute">my_pictures: %(my_dir)s/Pictures</span>

<span class="keyword">[Escape]</span>
<span class="name attribute">gain: 80%%  # use a %% to escape the % sign (% is the only character that needs to be escaped)</span>
</pre>
<p class="basicinterpolation">In the example above, <a href="#id40"><span class="problematic" id="id41">:class:`ConfigParser`</span></a> with <em>interpolation</em> set to
<tt class="docutils literal">BasicInterpolation()</tt> would resolve <tt class="docutils literal">%(home_dir)s</tt> to the value of
<tt class="docutils literal">home_dir</tt> (<tt class="docutils literal">/Users</tt> in this case).  <tt class="docutils literal">%(my_dir)s</tt> in effect would
resolve to <tt class="docutils literal">/Users/lumberjack</tt>.  All interpolations are done on demand so
keys used in the chain of references do not have to be specified in any
specific order in the configuration file.</p>
<div class="basicinterpolation system-message" id="id40">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 319); <em><a href="#id41">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="basicinterpolation">With <tt class="docutils literal">interpolation</tt> set to <tt class="docutils literal">None</tt>, the parser would simply return
<tt class="docutils literal">%(my_dir)s/Pictures</tt> as the value of <tt class="docutils literal">my_pictures</tt> and
<tt class="docutils literal">%(home_dir)s/lumberjack</tt> as the value of <tt class="docutils literal">my_dir</tt>.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 330)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index:: single: $ (dollar); interpolation in configuration files

</pre>
</div>
<p class="extendedinterpolation">An alternative handler for interpolation which implements a more advanced
syntax, used for instance in <tt class="docutils literal">zc.buildout</tt>.  Extended interpolation is
using <tt class="docutils literal">${section:option}</tt> to denote a value from a foreign section.
Interpolation can span multiple levels.  For convenience, if the
<tt class="docutils literal">section:</tt> part is omitted, interpolation defaults to the current section
(and possibly the default values from the special section).</p>
<p class="extendedinterpolation">For example, the configuration specified above with basic interpolation,
would look like this with extended interpolation:</p>
<pre class="code ini extendedinterpolation literal-block">
<span class="keyword">[Paths]</span>
<span class="name attribute">home_dir: /Users</span>
<span class="name attribute">my_dir: ${home_dir}/lumberjack</span>
<span class="name attribute">my_pictures: ${my_dir}/Pictures</span>

<span class="keyword">[Escape]</span>
<span class="name attribute">cost: $$80  # use a $$ to escape the $ sign ($ is the only character that needs to be escaped)</span>
</pre>
<p class="extendedinterpolation">Values from other sections can be fetched as well:</p>
<pre class="code ini extendedinterpolation literal-block">
<span class="keyword">[Common]</span>
<span class="name attribute">home_dir: /Users</span>
<span class="name attribute">library_dir: /Library</span>
<span class="name attribute">system_dir: /System</span>
<span class="name attribute">macports_dir: /opt/local</span>

<span class="keyword">[Frameworks]</span>
<span class="name attribute">Python: 3.2</span>
<span class="name attribute">path: ${Common:system_dir}/Library/Frameworks/</span>

<span class="keyword">[Arthur]</span>
<span class="name attribute">nickname: Two Sheds</span>
<span class="name attribute">last_name: Jackson</span>
<span class="name attribute">my_dir: ${Common:home_dir}/twosheds</span>
<span class="name attribute">my_pictures: ${my_dir}/Pictures</span>
<span class="name attribute">python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}</span>
</pre>
</div>
<div class="section" id="mapping-protocol-access">
<h1>Mapping Protocol Access</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 378)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.2

</pre>
</div>
<p>Mapping protocol access is a generic name for functionality that enables using
custom objects as if they were dictionaries.  In case of <a href="#id42"><span class="problematic" id="id43">:mod:`configparser`</span></a>,
the mapping interface implementation is using the
<tt class="docutils literal"><span class="pre">parser['section']['option']</span></tt> notation.</p>
<div class="system-message" id="id42">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 380); <em><a href="#id43">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p><tt class="docutils literal"><span class="pre">parser['section']</span></tt> in particular returns a proxy for the section's data in
the parser.  This means that the values are not copied but they are taken from
the original parser on demand.  What's even more important is that when values
are changed on a section proxy, they are actually mutated in the original
parser.</p>
<p><a href="#id44"><span class="problematic" id="id45">:mod:`configparser`</span></a> objects behave as close to actual dictionaries as possible.
The mapping interface is complete and adheres to the
<a href="#id46"><span class="problematic" id="id47">:class:`~collections.abc.MutableMapping`</span></a> ABC.
However, there are a few differences that should be taken into account:</p>
<div class="system-message" id="id44">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 391); <em><a href="#id45">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id46">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 391); <em><a href="#id47">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<ul>
<li><p class="first">By default, all keys in sections are accessible in a case-insensitive manner
<a class="footnote-reference" href="#id87" id="id48">[1]</a>.  E.g. <tt class="docutils literal">for option in <span class="pre">parser[&quot;section&quot;]</span></tt> yields only <tt class="docutils literal">optionxform</tt>'ed
option key names.  This means lowercased keys by default.  At the same time,
for a section that holds the key <tt class="docutils literal">'a'</tt>, both expressions return <tt class="docutils literal">True</tt>:</p>
<pre class="literal-block">
&quot;a&quot; in parser[&quot;section&quot;]
&quot;A&quot; in parser[&quot;section&quot;]
</pre>
</li>
<li><p class="first">All sections include <tt class="docutils literal">DEFAULTSECT</tt> values as well which means that
<tt class="docutils literal">.clear()</tt> on a section may not leave the section visibly empty.  This is
because default values cannot be deleted from the section (because technically
they are not there).  If they are overridden in the section, deleting causes
the default value to be visible again.  Trying to delete a default value
causes a <a href="#id49"><span class="problematic" id="id50">:exc:`KeyError`</span></a>.</p>
<div class="system-message" id="id49">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 404); <em><a href="#id50">backlink</a></em></p>
<p>Unknown interpreted text role &quot;exc&quot;.</p>
</div>
</li>
<li><p class="first"><tt class="docutils literal">DEFAULTSECT</tt> cannot be removed from the parser:</p>
<ul>
<li><p class="first">trying to delete it raises <a href="#id51"><span class="problematic" id="id52">:exc:`ValueError`</span></a>,</p>
<div class="system-message" id="id51">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 413); <em><a href="#id52">backlink</a></em></p>
<p>Unknown interpreted text role &quot;exc&quot;.</p>
</div>
</li>
<li><p class="first"><tt class="docutils literal">parser.clear()</tt> leaves it intact,</p>
</li>
<li><p class="first"><tt class="docutils literal">parser.popitem()</tt> never returns it.</p>
</li>
</ul>
</li>
<li><p class="first"><tt class="docutils literal">parser.get(section, option, **kwargs)</tt> - the second argument is <strong>not</strong>
a fallback value.  Note however that the section-level <tt class="docutils literal">get()</tt> methods are
compatible both with the mapping protocol and the classic configparser API.</p>
</li>
<li><p class="first"><tt class="docutils literal">parser.items()</tt> is compatible with the mapping protocol (returns a list of
<em>section_name</em>, <em>section_proxy</em> pairs including the DEFAULTSECT).  However,
this method can also be invoked with arguments: <tt class="docutils literal">parser.items(section, raw,
vars)</tt>.  The latter call returns a list of <em>option</em>, <em>value</em> pairs for
a specified <tt class="docutils literal">section</tt>, with all interpolations expanded (unless
<tt class="docutils literal">raw=True</tt> is provided).</p>
</li>
</ul>
<p>The mapping protocol is implemented on top of the existing legacy API so that
subclasses overriding the original interface still should have mappings working
as expected.</p>
</div>
<div class="section" id="customizing-parser-behaviour">
<h1>Customizing Parser Behaviour</h1>
<p>There are nearly as many INI format variants as there are applications using it.
<a href="#id53"><span class="problematic" id="id54">:mod:`configparser`</span></a> goes a long way to provide support for the largest sensible
set of INI styles available.  The default functionality is mainly dictated by
historical background and it's very likely that you will want to customize some
of the features.</p>
<div class="system-message" id="id53">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 438); <em><a href="#id54">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>The most common way to change the way a specific config parser works is to use
the <a href="#id55"><span class="problematic" id="id56">:meth:`__init__`</span></a> options:</p>
<div class="system-message" id="id55">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 444); <em><a href="#id56">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<ul>
<li><p class="first"><em>defaults</em>, default value: <tt class="docutils literal">None</tt></p>
<p>This option accepts a dictionary of key-value pairs which will be initially
put in the <tt class="docutils literal">DEFAULT</tt> section.  This makes for an elegant way to support
concise configuration files that don't specify values which are the same as
the documented default.</p>
<p>Hint: if you want to specify default values for a specific section, use
<a href="#id57"><span class="problematic" id="id58">:meth:`read_dict`</span></a> before you read the actual file.</p>
<div class="system-message" id="id57">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 454); <em><a href="#id58">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
</li>
<li><p class="first"><em>dict_type</em>, default value: <a href="#id59"><span class="problematic" id="id60">:class:`dict`</span></a></p>
<div class="system-message" id="id59">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 457); <em><a href="#id60">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
<p>This option has a major impact on how the mapping protocol will behave and how
the written configuration files look.  With the standard dictionary, every
section is stored in the order they were added to the parser.  Same goes for
options within sections.</p>
<p>An alternative dictionary type can be used for example to sort sections and
options on write-back.</p>
<p>Please note: there are ways to add a set of key-value pairs in a single
operation.  When you use a regular dictionary in those operations, the order
of the keys will be ordered.  For example:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 471)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; parser = configparser.ConfigParser()
   &gt;&gt;&gt; parser.read_dict({'section1': {'key1': 'value1',
   ...                                'key2': 'value2',
   ...                                'key3': 'value3'},
   ...                   'section2': {'keyA': 'valueA',
   ...                                'keyB': 'valueB',
   ...                                'keyC': 'valueC'},
   ...                   'section3': {'foo': 'x',
   ...                                'bar': 'y',
   ...                                'baz': 'z'}
   ... })
   &gt;&gt;&gt; parser.sections()
   ['section1', 'section2', 'section3']
   &gt;&gt;&gt; [option for option in parser['section3']]
   ['foo', 'bar', 'baz']

</pre>
</div>
</li>
<li><p class="first"><em>allow_no_value</em>, default value: <tt class="docutils literal">False</tt></p>
<p>Some configuration files are known to include settings without values, but
which otherwise conform to the syntax supported by <a href="#id61"><span class="problematic" id="id62">:mod:`configparser`</span></a>.  The
<em>allow_no_value</em> parameter to the constructor can be used to
indicate that such values should be accepted:</p>
<div class="system-message" id="id61">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 491); <em><a href="#id62">backlink</a></em></p>
<p>Unknown interpreted text role &quot;mod&quot;.</p>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 496)</p>
<p>Unknown directive type &quot;doctest&quot;.</p>
<pre class="literal-block">
.. doctest::

   &gt;&gt;&gt; import configparser

   &gt;&gt;&gt; sample_config = &quot;&quot;&quot;
   ... [mysqld]
   ...   user = mysql
   ...   pid-file = /var/run/mysqld/mysqld.pid
   ...   skip-external-locking
   ...   old_passwords = 1
   ...   skip-bdb
   ...   # we don't need ACID today
   ...   skip-innodb
   ... &quot;&quot;&quot;
   &gt;&gt;&gt; config = configparser.ConfigParser(allow_no_value=True)
   &gt;&gt;&gt; config.read_string(sample_config)

   &gt;&gt;&gt; # Settings with values are treated as before:
   &gt;&gt;&gt; config[&quot;mysqld&quot;][&quot;user&quot;]
   'mysql'

   &gt;&gt;&gt; # Settings without values provide None:
   &gt;&gt;&gt; config[&quot;mysqld&quot;][&quot;skip-bdb&quot;]

   &gt;&gt;&gt; # Settings which aren't specified still raise an error:
   &gt;&gt;&gt; config[&quot;mysqld&quot;][&quot;does-not-exist&quot;]
   Traceback (most recent call last):
     ...
   KeyError: 'does-not-exist'

</pre>
</div>
</li>
<li><p class="first"><em>delimiters</em>, default value: <tt class="docutils literal"><span class="pre">('=',</span> <span class="pre">':')</span></tt></p>
<p>Delimiters are substrings that delimit keys from values within a section.
The first occurrence of a delimiting substring on a line is considered
a delimiter.  This means values (but not keys) can contain the delimiters.</p>
<p>See also the <em>space_around_delimiters</em> argument to
<a href="#id63"><span class="problematic" id="id64">:meth:`ConfigParser.write`</span></a>.</p>
<div class="system-message" id="id63">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 532); <em><a href="#id64">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
</li>
<li><p class="first"><em>comment_prefixes</em>, default value: <tt class="docutils literal"><span class="pre">('#',</span> <span class="pre">';')</span></tt></p>
</li>
<li><p class="first"><em>inline_comment_prefixes</em>, default value: <tt class="docutils literal">None</tt></p>
<p>Comment prefixes are strings that indicate the start of a valid comment within
a config file. <em>comment_prefixes</em> are used only on otherwise empty lines
(optionally indented) whereas <em>inline_comment_prefixes</em> can be used after
every valid value (e.g. section names, options and empty lines as well).  By
default inline comments are disabled and <tt class="docutils literal">'#'</tt> and <tt class="docutils literal">';'</tt> are used as
prefixes for whole line comments.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 546)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.2
   In previous versions of :mod:`configparser` behaviour matched
   ``comment_prefixes=('#',';')`` and ``inline_comment_prefixes=(';',)``.

</pre>
</div>
<p>Please note that config parsers don't support escaping of comment prefixes so
using <em>inline_comment_prefixes</em> may prevent users from specifying option
values with characters used as comment prefixes.  When in doubt, avoid
setting <em>inline_comment_prefixes</em>.  In any circumstances, the only way of
storing comment prefix characters at the beginning of a line in multiline
values is to interpolate the prefix, for example:</p>
<pre class="literal-block">
&gt;&gt;&gt; from configparser import ConfigParser, ExtendedInterpolation
&gt;&gt;&gt; parser = ConfigParser(interpolation=ExtendedInterpolation())
&gt;&gt;&gt; # the default BasicInterpolation could be used as well
&gt;&gt;&gt; parser.read_string(&quot;&quot;&quot;
... [DEFAULT]
... hash = #
...
... [hashes]
... shebang =
...   ${hash}!/usr/bin/env python
...   ${hash} -*- coding: utf-8 -*-
...
... extensions =
...   enabled_extension
...   another_extension
...   #disabled_by_comment
...   yet_another_extension
...
... interpolation not necessary = if # is not at line start
... even in multiline values = line #1
...   line #2
...   line #3
... &quot;&quot;&quot;)
&gt;&gt;&gt; print(parser['hashes']['shebang'])
&lt;BLANKLINE&gt;
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&gt;&gt;&gt; print(parser['hashes']['extensions'])
&lt;BLANKLINE&gt;
enabled_extension
another_extension
yet_another_extension
&gt;&gt;&gt; print(parser['hashes']['interpolation not necessary'])
if # is not at line start
&gt;&gt;&gt; print(parser['hashes']['even in multiline values'])
line #1
line #2
line #3
</pre>
</li>
<li><p class="first"><em>strict</em>, default value: <tt class="docutils literal">True</tt></p>
<p>When set to <tt class="docutils literal">True</tt>, the parser will not allow for any section or option
duplicates while reading from a single source (using <a href="#id65"><span class="problematic" id="id66">:meth:`read_file`</span></a>,
<a href="#id67"><span class="problematic" id="id68">:meth:`read_string`</span></a> or <a href="#id69"><span class="problematic" id="id70">:meth:`read_dict`</span></a>).  It is recommended to use strict
parsers in new applications.</p>
<div class="system-message" id="id65">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 598); <em><a href="#id66">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message" id="id67">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 598); <em><a href="#id68">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message" id="id69">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 598); <em><a href="#id70">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 603)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.2
   In previous versions of :mod:`configparser` behaviour matched
   ``strict=False``.

</pre>
</div>
</li>
<li><p class="first"><em>empty_lines_in_values</em>, default value: <tt class="docutils literal">True</tt></p>
<p>In config parsers, values can span multiple lines as long as they are
indented more than the key that holds them.  By default parsers also let
empty lines to be parts of values.  At the same time, keys can be arbitrarily
indented themselves to improve readability.  In consequence, when
configuration files get big and complex, it is easy for the user to lose
track of the file structure.  Take for instance:</p>
<pre class="code ini literal-block">
<span class="keyword">[Section]</span>
<span class="name attribute">key</span> <span class="operator">=</span> <span class="literal string">multiline</span>
  <span class="name attribute">value with a gotcha</span>

 <span class="name attribute">this</span> <span class="operator">=</span> <span class="literal string">is still a part of the multiline value of 'key'</span>
</pre>
<p>This can be especially problematic for the user to see if she's using a
proportional font to edit the file.  That is why when your application does
not need values with empty lines, you should consider disallowing them.  This
will make empty lines split keys every time.  In the example above, it would
produce two keys, <tt class="docutils literal">key</tt> and <tt class="docutils literal">this</tt>.</p>
</li>
<li><p class="first"><em>default_section</em>, default value: <tt class="docutils literal">configparser.DEFAULTSECT</tt> (that is:
<tt class="docutils literal">&quot;DEFAULT&quot;</tt>)</p>
<p>The convention of allowing a special section of default values for other
sections or interpolation purposes is a powerful concept of this library,
letting users create complex declarative configurations.  This section is
normally called <tt class="docutils literal">&quot;DEFAULT&quot;</tt> but this can be customized to point to any
other valid section name.  Some typical values include: <tt class="docutils literal">&quot;general&quot;</tt> or
<tt class="docutils literal">&quot;common&quot;</tt>.  The name provided is used for recognizing default sections
when reading from any source and is used when writing configuration back to
a file.  Its current value can be retrieved using the
<tt class="docutils literal">parser_instance.default_section</tt> attribute and may be modified at runtime
(i.e. to convert files from one format to another).</p>
</li>
<li><p class="first"><em>interpolation</em>, default value: <tt class="docutils literal">configparser.BasicInterpolation</tt></p>
<p>Interpolation behaviour may be customized by providing a custom handler
through the <em>interpolation</em> argument. <tt class="docutils literal">None</tt> can be used to turn off
interpolation completely, <tt class="docutils literal">ExtendedInterpolation()</tt> provides a more
advanced variant inspired by <tt class="docutils literal">zc.buildout</tt>.  More on the subject in the
<a class="reference external" href="#interpolation-of-values">dedicated documentation section</a>.
<a href="#id71"><span class="problematic" id="id72">:class:`RawConfigParser`</span></a> has a default value of <tt class="docutils literal">None</tt>.</p>
<div class="system-message" id="id71">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 646); <em><a href="#id72">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first"><em>converters</em>, default value: not set</p>
<p>Config parsers provide option value getters that perform type conversion.  By
default <a href="#id73"><span class="problematic" id="id74">:meth:`~ConfigParser.getint`</span></a>, <a href="#id75"><span class="problematic" id="id76">:meth:`~ConfigParser.getfloat`</span></a>, and
<a href="#id77"><span class="problematic" id="id78">:meth:`~ConfigParser.getboolean`</span></a> are implemented.  Should other getters be
desirable, users may define them in a subclass or pass a dictionary where each
key is a name of the converter and each value is a callable implementing said
conversion.  For instance, passing <tt class="docutils literal">{'decimal': decimal.Decimal}</tt> would add
<a href="#id79"><span class="problematic" id="id80">:meth:`getdecimal`</span></a> on both the parser object and all section proxies.  In
other words, it will be possible to write both
<tt class="docutils literal"><span class="pre">parser_instance.getdecimal('section',</span> 'key', fallback=0)</tt> and
<tt class="docutils literal"><span class="pre">parser_instance['section'].getdecimal('key',</span> 0)</tt>.</p>
<div class="system-message" id="id73">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 655); <em><a href="#id74">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message" id="id75">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 655); <em><a href="#id76">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message" id="id77">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 655); <em><a href="#id78">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<div class="system-message" id="id79">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 655); <em><a href="#id80">backlink</a></em></p>
<p>Unknown interpreted text role &quot;meth&quot;.</p>
</div>
<p>If the converter needs to access the state of the parser, it can be
implemented as a method on a config parser subclass.  If the name of this
method starts with <tt class="docutils literal">get</tt>, it will be available on all section proxies, in
the dict-compatible form (see the <tt class="docutils literal">getdecimal()</tt> example above).</p>
</li>
</ul>
<p>More advanced customization may be achieved by overriding default values of
these parser attributes.  The defaults are defined on the classes, so they may
be overridden by subclasses or by attribute assignment.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 675)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: ConfigParser.BOOLEAN_STATES

   By default when using :meth:`~ConfigParser.getboolean`, config parsers
   consider the following values ``True``: ``'1'``, ``'yes'``, ``'true'``,
   ``'on'`` and the following values ``False``: ``'0'``, ``'no'``, ``'false'``,
   ``'off'``.  You can override this by specifying a custom dictionary of strings
   and their Boolean outcomes. For example:

   .. doctest::

      &gt;&gt;&gt; custom = configparser.ConfigParser()
      &gt;&gt;&gt; custom['section1'] = {'funky': 'nope'}
      &gt;&gt;&gt; custom['section1'].getboolean('funky')
      Traceback (most recent call last):
      ...
      ValueError: Not a boolean: nope
      &gt;&gt;&gt; custom.BOOLEAN_STATES = {'sure': True, 'nope': False}
      &gt;&gt;&gt; custom['section1'].getboolean('funky')
      False

   Other typical Boolean pairs include ``accept``/``reject`` or
   ``enabled``/``disabled``.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 698)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: ConfigParser.optionxform(option)
   :noindex:

   This method transforms option names on every read, get, or set
   operation.  The default converts the name to lowercase.  This also
   means that when a configuration file gets written, all keys will be
   lowercase.  Override this method if that's unsuitable.
   For example:

   .. doctest::

      &gt;&gt;&gt; config = &quot;&quot;&quot;
      ... [Section1]
      ... Key = Value
      ...
      ... [Section2]
      ... AnotherKey = Value
      ... &quot;&quot;&quot;
      &gt;&gt;&gt; typical = configparser.ConfigParser()
      &gt;&gt;&gt; typical.read_string(config)
      &gt;&gt;&gt; list(typical['Section1'].keys())
      ['key']
      &gt;&gt;&gt; list(typical['Section2'].keys())
      ['anotherkey']
      &gt;&gt;&gt; custom = configparser.RawConfigParser()
      &gt;&gt;&gt; custom.optionxform = lambda option: option
      &gt;&gt;&gt; custom.read_string(config)
      &gt;&gt;&gt; list(custom['Section1'].keys())
      ['Key']
      &gt;&gt;&gt; list(custom['Section2'].keys())
      ['AnotherKey']

   .. note::
      The optionxform function transforms option names to a canonical form.
      This should be an idempotent function: if the name is already in
      canonical form, it should be returned unchanged.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 736)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: ConfigParser.SECTCRE

   A compiled regular expression used to parse section headers.  The default
   matches ``[section]`` to the name ``&quot;section&quot;``.  Whitespace is considered
   part of the section name, thus ``[  larch  ]`` will be read as a section of
   name ``&quot;  larch  &quot;``.  Override this attribute if that's unsuitable.  For
   example:

   .. doctest::

      &gt;&gt;&gt; import re
      &gt;&gt;&gt; config = &quot;&quot;&quot;
      ... [Section 1]
      ... option = value
      ...
      ... [  Section 2  ]
      ... another = val
      ... &quot;&quot;&quot;
      &gt;&gt;&gt; typical = configparser.ConfigParser()
      &gt;&gt;&gt; typical.read_string(config)
      &gt;&gt;&gt; typical.sections()
      ['Section 1', '  Section 2  ']
      &gt;&gt;&gt; custom = configparser.ConfigParser()
      &gt;&gt;&gt; custom.SECTCRE = re.compile(r&quot;\[ *(?P&lt;header&gt;[^]]+?) *\]&quot;)
      &gt;&gt;&gt; custom.read_string(config)
      &gt;&gt;&gt; custom.sections()
      ['Section 1', 'Section 2']

   .. note::

      While ConfigParser objects also use an ``OPTCRE`` attribute for recognizing
      option lines, it's not recommended to override it because that would
      interfere with constructor options *allow_no_value* and *delimiters*.


</pre>
</div>
</div>
<div class="section" id="legacy-api-examples">
<h1>Legacy API Examples</h1>
<p>Mainly because of backwards compatibility concerns, <a href="#id81"><span class="problematic" id="id82">:mod:`configparser`</span></a>
provides also a legacy API with explicit <tt class="docutils literal">get</tt>/<tt class="docutils literal">set</tt> methods.  While there
are valid use cases for the methods outlined below, mapping protocol access is
preferred for new projects.  The legacy API is at times more advanced,
low-level and downright counterintuitive.</p>
<div class="system-message" id="id81">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 774); <em><a href="#id82">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>An example of writing to a configuration file:</p>
<pre class="literal-block">
import configparser

config = configparser.RawConfigParser()

# Please note that using RawConfigParser's set functions, you can assign
# non-string values to keys internally, but will receive an error when
# attempting to write to a file or when you get it in non-raw mode. Setting
# values using the mapping protocol or ConfigParser's set() does not allow
# such assignments to take place.
config.add_section('Section1')
config.set('Section1', 'an_int', '15')
config.set('Section1', 'a_bool', 'true')
config.set('Section1', 'a_float', '3.1415')
config.set('Section1', 'baz', 'fun')
config.set('Section1', 'bar', 'Python')
config.set('Section1', 'foo', '%(bar)s is %(baz)s!')

# Writing our configuration file to 'example.cfg'
with open('example.cfg', 'w') as configfile:
    config.write(configfile)
</pre>
<p>An example of reading the configuration file again:</p>
<pre class="literal-block">
import configparser

config = configparser.RawConfigParser()
config.read('example.cfg')

# getfloat() raises an exception if the value is not a float
# getint() and getboolean() also do this for their respective types
a_float = config.getfloat('Section1', 'a_float')
an_int = config.getint('Section1', 'an_int')
print(a_float + an_int)

# Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'.
# This is because we are using a RawConfigParser().
if config.getboolean('Section1', 'a_bool'):
    print(config.get('Section1', 'foo'))
</pre>
<p>To get interpolation, use <a href="#id83"><span class="problematic" id="id84">:class:`ConfigParser`</span></a>:</p>
<div class="system-message" id="id83">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 821); <em><a href="#id84">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="literal-block">
import configparser

cfg = configparser.ConfigParser()
cfg.read('example.cfg')

# Set the optional *raw* argument of get() to True if you wish to disable
# interpolation in a single get operation.
print(cfg.get('Section1', 'foo', raw=False))  # -&gt; &quot;Python is fun!&quot;
print(cfg.get('Section1', 'foo', raw=True))   # -&gt; &quot;%(bar)s is %(baz)s!&quot;

# The optional *vars* argument is a dict with members that will take
# precedence in interpolation.
print(cfg.get('Section1', 'foo', vars={'bar': 'Documentation',
                                       'baz': 'evil'}))

# The optional *fallback* argument can be used to provide a fallback value
print(cfg.get('Section1', 'foo'))
      # -&gt; &quot;Python is fun!&quot;

print(cfg.get('Section1', 'foo', fallback='Monty is not.'))
      # -&gt; &quot;Python is fun!&quot;

print(cfg.get('Section1', 'monster', fallback='No such things as monsters.'))
      # -&gt; &quot;No such things as monsters.&quot;

# A bare print(cfg.get('Section1', 'monster')) would raise NoOptionError
# but we can also use:

print(cfg.get('Section1', 'monster', fallback=None))
      # -&gt; None
</pre>
<p>Default values are available in both types of ConfigParsers.  They are used in
interpolation if an option used is not defined elsewhere.</p>
<pre class="literal-block">
import configparser

# New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each
config = configparser.ConfigParser({'bar': 'Life', 'baz': 'hard'})
config.read('example.cfg')

print(config.get('Section1', 'foo'))     # -&gt; &quot;Python is fun!&quot;
config.remove_option('Section1', 'bar')
config.remove_option('Section1', 'baz')
print(config.get('Section1', 'foo'))     # -&gt; &quot;Life is hard!&quot;
</pre>
</div>
<div class="section" id="id85">
<span id="configparser-objects"></span><h1>ConfigParser Objects</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 874)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;ConfigParser(defaults=None, dict_type=dict, allow_no_value=False, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configparser.DEFAULTSECT, interpolation=BasicInterpolation(), converters={})&quot;.</p>
<pre class="literal-block">
.. class:: ConfigParser(defaults=None, dict_type=dict, allow_no_value=False, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configparser.DEFAULTSECT, interpolation=BasicInterpolation(), converters={})

   The main configuration parser.  When *defaults* is given, it is initialized
   into the dictionary of intrinsic defaults.  When *dict_type* is given, it
   will be used to create the dictionary objects for the list of sections, for
   the options within a section, and for the default values.

   When *delimiters* is given, it is used as the set of substrings that
   divide keys from values.  When *comment_prefixes* is given, it will be used
   as the set of substrings that prefix comments in otherwise empty lines.
   Comments can be indented.  When *inline_comment_prefixes* is given, it will
   be used as the set of substrings that prefix comments in non-empty lines.

   When *strict* is ``True`` (the default), the parser won't allow for
   any section or option duplicates while reading from a single source (file,
   string or dictionary), raising :exc:`DuplicateSectionError` or
   :exc:`DuplicateOptionError`.  When *empty_lines_in_values* is ``False``
   (default: ``True``), each empty line marks the end of an option.  Otherwise,
   internal empty lines of a multiline option are kept as part of the value.
   When *allow_no_value* is ``True`` (default: ``False``), options without
   values are accepted; the value held for these is ``None`` and they are
   serialized without the trailing delimiter.

   When *default_section* is given, it specifies the name for the special
   section holding default values for other sections and interpolation purposes
   (normally named ``&quot;DEFAULT&quot;``).  This value can be retrieved and changed on
   runtime using the ``default_section`` instance attribute.

   Interpolation behaviour may be customized by providing a custom handler
   through the *interpolation* argument. ``None`` can be used to turn off
   interpolation completely, ``ExtendedInterpolation()`` provides a more
   advanced variant inspired by ``zc.buildout``.  More on the subject in the
   `dedicated documentation section &lt;#interpolation-of-values&gt;`_.

   All option names used in interpolation will be passed through the
   :meth:`optionxform` method just like any other option name reference.  For
   example, using the default implementation of :meth:`optionxform` (which
   converts option names to lower case), the values ``foo %(bar)s`` and ``foo
   %(BAR)s`` are equivalent.

   When *converters* is given, it should be a dictionary where each key
   represents the name of a type converter and each value is a callable
   implementing the conversion from string to the desired datatype.  Every
   converter gets its own corresponding :meth:`get*()` method on the parser
   object and section proxies.

   .. versionchanged:: 3.1
      The default *dict_type* is :class:`collections.OrderedDict`.

   .. versionchanged:: 3.2
      *allow_no_value*, *delimiters*, *comment_prefixes*, *strict*,
      *empty_lines_in_values*, *default_section* and *interpolation* were
      added.

   .. versionchanged:: 3.5
      The *converters* argument was added.

   .. versionchanged:: 3.7
      The *defaults* argument is read with :meth:`read_dict()`,
      providing consistent behavior across the parser: non-string
      keys and values are implicitly converted to strings.

   .. versionchanged:: 3.8
      The default *dict_type* is :class:`dict`, since it now preserves
      insertion order.

   .. method:: defaults()

      Return a dictionary containing the instance-wide defaults.


   .. method:: sections()

      Return a list of the sections available; the *default section* is not
      included in the list.


   .. method:: add_section(section)

      Add a section named *section* to the instance.  If a section by the given
      name already exists, :exc:`DuplicateSectionError` is raised.  If the
      *default section* name is passed, :exc:`ValueError` is raised.  The name
      of the section must be a string; if not, :exc:`TypeError` is raised.

      .. versionchanged:: 3.2
         Non-string section names raise :exc:`TypeError`.


   .. method:: has_section(section)

      Indicates whether the named *section* is present in the configuration.
      The *default section* is not acknowledged.


   .. method:: options(section)

      Return a list of options available in the specified *section*.


   .. method:: has_option(section, option)

      If the given *section* exists, and contains the given *option*, return
      :const:`True`; otherwise return :const:`False`.  If the specified
      *section* is :const:`None` or an empty string, DEFAULT is assumed.


   .. method:: read(filenames, encoding=None)

      Attempt to read and parse an iterable of filenames, returning a list of
      filenames which were successfully parsed.

      If *filenames* is a string, a :class:`bytes` object or a
      :term:`path-like object`, it is treated as
      a single filename.  If a file named in *filenames* cannot be opened, that
      file will be ignored.  This is designed so that you can specify an
      iterable of potential configuration file locations (for example, the
      current directory, the user's home directory, and some system-wide
      directory), and all existing configuration files in the iterable will be
      read.

      If none of the named files exist, the :class:`ConfigParser`
      instance will contain an empty dataset.  An application which requires
      initial values to be loaded from a file should load the required file or
      files using :meth:`read_file` before calling :meth:`read` for any
      optional files::

         import configparser, os

         config = configparser.ConfigParser()
         config.read_file(open('defaults.cfg'))
         config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')],
                     encoding='cp1250')

      .. versionadded:: 3.2
         The *encoding* parameter.  Previously, all files were read using the
         default encoding for :func:`open`.

      .. versionadded:: 3.6.1
         The *filenames* parameter accepts a :term:`path-like object`.

      .. versionadded:: 3.7
         The *filenames* parameter accepts a :class:`bytes` object.


   .. method:: read_file(f, source=None)

      Read and parse configuration data from *f* which must be an iterable
      yielding Unicode strings (for example files opened in text mode).

      Optional argument *source* specifies the name of the file being read.  If
      not given and *f* has a :attr:`name` attribute, that is used for
      *source*; the default is ``'&lt;???&gt;'``.

      .. versionadded:: 3.2
         Replaces :meth:`readfp`.

   .. method:: read_string(string, source='&lt;string&gt;')

      Parse configuration data from a string.

      Optional argument *source* specifies a context-specific name of the
      string passed.  If not given, ``'&lt;string&gt;'`` is used.  This should
      commonly be a filesystem path or a URL.

      .. versionadded:: 3.2


   .. method:: read_dict(dictionary, source='&lt;dict&gt;')

      Load configuration from any object that provides a dict-like ``items()``
      method.  Keys are section names, values are dictionaries with keys and
      values that should be present in the section.  If the used dictionary
      type preserves order, sections and their keys will be added in order.
      Values are automatically converted to strings.

      Optional argument *source* specifies a context-specific name of the
      dictionary passed.  If not given, ``&lt;dict&gt;`` is used.

      This method can be used to copy state between parsers.

      .. versionadded:: 3.2


   .. method:: get(section, option, *, raw=False, vars=None[, fallback])

      Get an *option* value for the named *section*.  If *vars* is provided, it
      must be a dictionary.  The *option* is looked up in *vars* (if provided),
      *section*, and in *DEFAULTSECT* in that order.  If the key is not found
      and *fallback* is provided, it is used as a fallback value.  ``None`` can
      be provided as a *fallback* value.

      All the ``'%'`` interpolations are expanded in the return values, unless
      the *raw* argument is true.  Values for interpolation keys are looked up
      in the same manner as the option.

      .. versionchanged:: 3.2
         Arguments *raw*, *vars* and *fallback* are keyword only to protect
         users from trying to use the third argument as the *fallback* fallback
         (especially when using the mapping protocol).


   .. method:: getint(section, option, *, raw=False, vars=None[, fallback])

      A convenience method which coerces the *option* in the specified *section*
      to an integer.  See :meth:`get` for explanation of *raw*, *vars* and
      *fallback*.


   .. method:: getfloat(section, option, *, raw=False, vars=None[, fallback])

      A convenience method which coerces the *option* in the specified *section*
      to a floating point number.  See :meth:`get` for explanation of *raw*,
      *vars* and *fallback*.


   .. method:: getboolean(section, option, *, raw=False, vars=None[, fallback])

      A convenience method which coerces the *option* in the specified *section*
      to a Boolean value.  Note that the accepted values for the option are
      ``'1'``, ``'yes'``, ``'true'``, and ``'on'``, which cause this method to
      return ``True``, and ``'0'``, ``'no'``, ``'false'``, and ``'off'``, which
      cause it to return ``False``.  These string values are checked in a
      case-insensitive manner.  Any other value will cause it to raise
      :exc:`ValueError`.  See :meth:`get` for explanation of *raw*, *vars* and
      *fallback*.


   .. method:: items(raw=False, vars=None)
               items(section, raw=False, vars=None)

      When *section* is not given, return a list of *section_name*,
      *section_proxy* pairs, including DEFAULTSECT.

      Otherwise, return a list of *name*, *value* pairs for the options in the
      given *section*.  Optional arguments have the same meaning as for the
      :meth:`get` method.

      .. versionchanged:: 3.8
         Items present in *vars* no longer appear in the result.  The previous
         behaviour mixed actual parser options with variables provided for
         interpolation.


   .. method:: set(section, option, value)

      If the given section exists, set the given option to the specified value;
      otherwise raise :exc:`NoSectionError`.  *option* and *value* must be
      strings; if not, :exc:`TypeError` is raised.


   .. method:: write(fileobject, space_around_delimiters=True)

      Write a representation of the configuration to the specified :term:`file
      object`, which must be opened in text mode (accepting strings).  This
      representation can be parsed by a future :meth:`read` call.  If
      *space_around_delimiters* is true, delimiters between
      keys and values are surrounded by spaces.


   .. method:: remove_option(section, option)

      Remove the specified *option* from the specified *section*.  If the
      section does not exist, raise :exc:`NoSectionError`.  If the option
      existed to be removed, return :const:`True`; otherwise return
      :const:`False`.


   .. method:: remove_section(section)

      Remove the specified *section* from the configuration.  If the section in
      fact existed, return ``True``.  Otherwise return ``False``.


   .. method:: optionxform(option)

      Transforms the option name *option* as found in an input file or as passed
      in by client code to the form that should be used in the internal
      structures.  The default implementation returns a lower-case version of
      *option*; subclasses may override this or client code can set an attribute
      of this name on instances to affect this behavior.

      You don't need to subclass the parser to use this method, you can also
      set it on an instance, to a function that takes a string argument and
      returns a string.  Setting it to ``str``, for example, would make option
      names case sensitive::

         cfgparser = ConfigParser()
         cfgparser.optionxform = str

      Note that when reading configuration files, whitespace around the option
      names is stripped before :meth:`optionxform` is called.


   .. method:: readfp(fp, filename=None)

      .. deprecated:: 3.2
         Use :meth:`read_file` instead.

      .. versionchanged:: 3.2
         :meth:`readfp` now iterates on *fp* instead of calling ``fp.readline()``.

      For existing code calling :meth:`readfp` with arguments which don't
      support iteration, the following generator may be used as a wrapper
      around the file-like object::

         def readline_generator(fp):
             line = fp.readline()
             while line:
                 yield line
                 line = fp.readline()

      Instead of ``parser.readfp(fp)`` use
      ``parser.read_file(readline_generator(fp))``.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1189)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: MAX_INTERPOLATION_DEPTH

   The maximum depth for recursive interpolation for :meth:`get` when the *raw*
   parameter is false.  This is relevant only when the default *interpolation*
   is used.


</pre>
</div>
</div>
<div class="section" id="id86">
<span id="rawconfigparser-objects"></span><h1>RawConfigParser Objects</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1201)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;RawConfigParser(defaults=None, dict_type=dict, \
                        allow_no_value=False, *, delimiters=('=', ':'), \
                        comment_prefixes=('#', ';'), \
                        inline_comment_prefixes=None, strict=True, \
                        empty_lines_in_values=True, \
                        default_section=configparser.DEFAULTSECT[, \
                        interpolation])&quot;.</p>
<pre class="literal-block">
.. class:: RawConfigParser(defaults=None, dict_type=dict, \
                           allow_no_value=False, *, delimiters=('=', ':'), \
                           comment_prefixes=('#', ';'), \
                           inline_comment_prefixes=None, strict=True, \
                           empty_lines_in_values=True, \
                           default_section=configparser.DEFAULTSECT[, \
                           interpolation])

   Legacy variant of the :class:`ConfigParser`.  It has interpolation
   disabled by default and allows for non-string section names, option
   names, and values via its unsafe ``add_section`` and ``set`` methods,
   as well as the legacy ``defaults=`` keyword argument handling.

   .. versionchanged:: 3.8
      The default *dict_type* is :class:`dict`, since it now preserves
      insertion order.

   .. note::
      Consider using :class:`ConfigParser` instead which checks types of
      the values to be stored internally.  If you don't want interpolation, you
      can use ``ConfigParser(interpolation=None)``.


   .. method:: add_section(section)

      Add a section named *section* to the instance.  If a section by the given
      name already exists, :exc:`DuplicateSectionError` is raised.  If the
      *default section* name is passed, :exc:`ValueError` is raised.

      Type of *section* is not checked which lets users create non-string named
      sections.  This behaviour is unsupported and may cause internal errors.


   .. method:: set(section, option, value)

      If the given section exists, set the given option to the specified value;
      otherwise raise :exc:`NoSectionError`.  While it is possible to use
      :class:`RawConfigParser` (or :class:`ConfigParser` with *raw* parameters
      set to true) for *internal* storage of non-string values, full
      functionality (including interpolation and output to files) can only be
      achieved using string values.

      This method lets users assign non-string values to keys internally.  This
      behaviour is unsupported and will cause errors when attempting to write
      to a file or get it in non-raw mode.  **Use the mapping protocol API**
      which does not allow such assignments to take place.


</pre>
</div>
</div>
<div class="section" id="exceptions">
<h1>Exceptions</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1252)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: Error

   Base class for all other :mod:`configparser` exceptions.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1257)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: NoSectionError

   Exception raised when a specified section is not found.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1262)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: DuplicateSectionError

   Exception raised if :meth:`add_section` is called with the name of a section
   that is already present or in strict parsers when a section if found more
   than once in a single input file, string or dictionary.

   .. versionadded:: 3.2
      Optional ``source`` and ``lineno`` attributes and arguments to
      :meth:`__init__` were added.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1273)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: DuplicateOptionError

   Exception raised by strict parsers if a single option appears twice during
   reading from a single file, string or dictionary. This catches misspellings
   and case sensitivity-related errors, e.g. a dictionary may have two keys
   representing the same case-insensitive configuration key.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1281)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: NoOptionError

   Exception raised when a specified option is not found in the specified
   section.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1287)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: InterpolationError

   Base class for exceptions raised when problems occur performing string
   interpolation.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1293)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: InterpolationDepthError

   Exception raised when string interpolation cannot be completed because the
   number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`.  Subclass of
   :exc:`InterpolationError`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1300)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: InterpolationMissingOptionError

   Exception raised when an option referenced from a value does not exist.
   Subclass of :exc:`InterpolationError`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1306)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: InterpolationSyntaxError

   Exception raised when the source text into which substitutions are made does
   not conform to the required syntax.  Subclass of :exc:`InterpolationError`.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1312)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: MissingSectionHeaderError

   Exception raised when attempting to parse a file which has no section
   headers.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">configparser.rst</tt>, line 1318)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: ParsingError

   Exception raised when errors occur attempting to parse a file.

   .. versionchanged:: 3.2
      The ``filename`` attribute and :meth:`__init__` argument were renamed to
      ``source`` for consistency.


</pre>
</div>
<p class="rubric">Footnotes</p>
<table class="docutils footnote" frame="void" id="id87" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[1]</td><td><em>(<a class="fn-backref" href="#id9">1</a>, <a class="fn-backref" href="#id10">2</a>, <a class="fn-backref" href="#id13">3</a>, <a class="fn-backref" href="#id20">4</a>, <a class="fn-backref" href="#id31">5</a>, <a class="fn-backref" href="#id32">6</a>, <a class="fn-backref" href="#id33">7</a>, <a class="fn-backref" href="#id34">8</a>, <a class="fn-backref" href="#id39">9</a>, <a class="fn-backref" href="#id48">10</a>)</em> Config parsers allow for heavy customization.  If you are interested in
changing the behaviour outlined by the footnote reference, consult the
<a class="reference internal" href="#customizing-parser-behaviour">Customizing Parser Behaviour</a> section.</td></tr>
</tbody>
</table>
</div>
</div>
</body>
</html>
