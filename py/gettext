<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`gettext` --- Multilingual internationalization services</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-gettext-multilingual-internationalization-services">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`gettext`</span></a> --- Multilingual internationalization services</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: gettext
   :synopsis: Multilingual internationalization services.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 7)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Barry A. Warsaw &lt;barry&#64;python.org&gt;
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 8)</p>
<p>Unknown directive type &quot;sectionauthor&quot;.</p>
<pre class="literal-block">
.. sectionauthor:: Barry A. Warsaw &lt;barry&#64;python.org&gt;

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/gettext.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 10); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<hr class="docutils" />
<p>The <a href="#id5"><span class="problematic" id="id6">:mod:`gettext`</span></a> module provides internationalization (I18N) and localization
(L10N) services for your Python modules and applications. It supports both the
GNU <a href="#id7"><span class="problematic" id="id8">:program:`gettext`</span></a> message catalog API and a higher level, class-based API that may
be more appropriate for Python files.  The interface described below allows you
to write your module and application messages in one natural language, and
provide a catalog of translated messages for running under different natural
languages.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 14); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 14); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<p>Some hints on localizing your Python modules and applications are also given.</p>
<div class="section" id="gnu-program-gettext-api">
<h1>GNU <a href="#id9"><span class="problematic" id="id10">:program:`gettext`</span></a> API</h1>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 25); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<p>The <a href="#id11"><span class="problematic" id="id12">:mod:`gettext`</span></a> module defines the following API, which is very similar to
the GNU <a href="#id13"><span class="problematic" id="id14">:program:`gettext`</span></a> API.  If you use this API you will affect the
translation of your entire application globally.  Often this is what you want if
your application is monolingual, with the choice of language dependent on the
locale of your user.  If you are localizing a Python module, or if your
application needs to switch languages on the fly, you probably want to use the
class-based API instead.</p>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 28); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 28); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 37)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: bindtextdomain(domain, localedir=None)

   Bind the *domain* to the locale directory *localedir*.  More concretely,
   :mod:`gettext` will look for binary :file:`.mo` files for the given domain using
   the path (on Unix): :file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`, where
   *language* is searched for in the environment variables :envvar:`LANGUAGE`,
   :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` respectively.

   If *localedir* is omitted or ``None``, then the current binding for *domain* is
   returned. [#]_


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 49)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: bind_textdomain_codeset(domain, codeset=None)

   Bind the *domain* to *codeset*, changing the encoding of byte strings
   returned by the :func:`lgettext`, :func:`ldgettext`, :func:`lngettext`
   and :func:`ldngettext` functions.
   If *codeset* is omitted, then the current binding is returned.

   .. deprecated-removed:: 3.8 3.10


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 59)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: textdomain(domain=None)

   Change or query the current global domain.  If *domain* is ``None``, then the
   current global domain is returned, otherwise the global domain is set to
   *domain*, which is returned.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 66)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index:: single: _ (underscore); gettext
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 67)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: gettext(message)

   Return the localized translation of *message*, based on the current global
   domain, language, and locale directory.  This function is usually aliased as
   :func:`_` in the local namespace (see examples below).


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 74)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: dgettext(domain, message)

   Like :func:`.gettext`, but look the message up in the specified *domain*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 79)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: ngettext(singular, plural, n)

   Like :func:`.gettext`, but consider plural forms. If a translation is found,
   apply the plural formula to *n*, and return the resulting message (some
   languages have more than two plural forms). If no translation is found, return
   *singular* if *n* is 1; return *plural* otherwise.

   The Plural formula is taken from the catalog header. It is a C or Python
   expression that has a free variable *n*; the expression evaluates to the index
   of the plural in the catalog. See
   `the GNU gettext documentation &lt;https://www.gnu.org/software/gettext/manual/gettext.html&gt;`__
   for the precise syntax to be used in :file:`.po` files and the
   formulas for a variety of languages.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 94)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: dngettext(domain, singular, plural, n)

   Like :func:`ngettext`, but look the message up in the specified *domain*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 99)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: pgettext(context, message)
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 100)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: dpgettext(domain, context, message)
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 101)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: npgettext(context, singular, plural, n)
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 102)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: dnpgettext(domain, context, singular, plural, n)

   Similar to the corresponding functions without the ``p`` in the prefix (that
   is, :func:`gettext`, :func:`dgettext`, :func:`ngettext`, :func:`dngettext`),
   but the translation is restricted to the given message *context*.

   .. versionadded:: 3.8


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 111)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: lgettext(message)
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 112)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: ldgettext(domain, message)
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 113)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: lngettext(singular, plural, n)
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 114)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: ldngettext(domain, singular, plural, n)

   Equivalent to the corresponding functions without the ``l`` prefix
   (:func:`.gettext`, :func:`dgettext`, :func:`ngettext` and :func:`dngettext`),
   but the translation is returned as a byte string encoded in the preferred
   system encoding if no other encoding was explicitly set with
   :func:`bind_textdomain_codeset`.

   .. warning::

      These functions should be avoided in Python 3, because they return
      encoded bytes.  It's much better to use alternatives which return
      Unicode strings instead, since most Python applications will want to
      manipulate human readable text as strings instead of bytes.  Further,
      it's possible that you may get unexpected Unicode-related exceptions
      if there are encoding problems with the translated strings.

   .. deprecated-removed:: 3.8 3.10


</pre>
</div>
<p>Note that GNU <a href="#id15"><span class="problematic" id="id16">:program:`gettext`</span></a> also defines a <a href="#id17"><span class="problematic" id="id18">:func:`dcgettext`</span></a> method, but
this was deemed not useful and so it is currently unimplemented.</p>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 134); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 134); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>Here's an example of typical usage for this API:</p>
<pre class="literal-block">
import gettext
gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
gettext.textdomain('myapplication')
_ = gettext.gettext
# ...
print(_('This is a translatable string.'))
</pre>
</div>
<div class="section" id="class-based-api">
<h1>Class-based API</h1>
<p>The class-based API of the <a href="#id19"><span class="problematic" id="id20">:mod:`gettext`</span></a> module gives you more flexibility and
greater convenience than the GNU <a href="#id21"><span class="problematic" id="id22">:program:`gettext`</span></a> API.  It is the recommended
way of localizing your Python applications and modules.  <a href="#id23"><span class="problematic" id="id24">:mod:`!gettext`</span></a> defines
a <a href="#id25"><span class="problematic" id="id26">:class:`GNUTranslations`</span></a> class which implements the parsing of GNU <a href="#id27"><span class="problematic" id="id28">:file:`.mo`</span></a> format
files, and has methods for returning strings. Instances of this class can also
install themselves in the built-in namespace as the function <a href="#id29"><span class="problematic" id="id30">:func:`_`</span></a>.</p>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 150); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 150); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 150); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 150); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 150); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 150); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 158)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: find(domain, localedir=None, languages=None, all=False)

   This function implements the standard :file:`.mo` file search algorithm.  It
   takes a *domain*, identical to what :func:`textdomain` takes.  Optional
   *localedir* is as in :func:`bindtextdomain`. Optional *languages* is a list of
   strings, where each string is a language code.

   If *localedir* is not given, then the default system locale directory is used.
   [#]_  If *languages* is not given, then the following environment variables are
   searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and
   :envvar:`LANG`.  The first one returning a non-empty value is used for the
   *languages* variable. The environment variables should contain a colon separated
   list of languages, which will be split on the colon to produce the expected list
   of language code strings.

   :func:`find` then expands and normalizes the languages, and then iterates
   through them, searching for an existing file built of these components:

   :file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`

   The first such file name that exists is returned by :func:`find`. If no such
   file is found, then ``None`` is returned. If *all* is given, it returns a list
   of all file names, in the order in which they appear in the languages list or
   the environment variables.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 184)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)

   Return a :class:`*Translations` instance based on the *domain*, *localedir*,
   and *languages*, which are first passed to :func:`find` to get a list of the
   associated :file:`.mo` file paths.  Instances with identical :file:`.mo` file
   names are cached.  The actual class instantiated is *class_* if
   provided, otherwise :class:`GNUTranslations`.  The class's constructor must
   take a single :term:`file object` argument.  If provided, *codeset* will change
   the charset used to encode translated strings in the
   :meth:`~NullTranslations.lgettext` and :meth:`~NullTranslations.lngettext`
   methods.

   If multiple files are found, later files are used as fallbacks for earlier ones.
   To allow setting the fallback, :func:`copy.copy` is used to clone each
   translation object from the cache; the actual instance data is still shared with
   the cache.

   If no :file:`.mo` file is found, this function raises :exc:`OSError` if
   *fallback* is false (which is the default), and returns a
   :class:`NullTranslations` instance if *fallback* is true.

   .. versionchanged:: 3.3
      :exc:`IOError` used to be raised instead of :exc:`OSError`.

   .. deprecated-removed:: 3.8 3.10
      The *codeset* parameter.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 212)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: install(domain, localedir=None, codeset=None, names=None)

   This installs the function :func:`_` in Python's builtins namespace, based on
   *domain*, *localedir*, and *codeset* which are passed to the function
   :func:`translation`.

   For the *names* parameter, please see the description of the translation
   object's :meth:`~NullTranslations.install` method.

   As seen below, you usually mark the strings in your application that are
   candidates for translation, by wrapping them in a call to the :func:`_`
   function, like this::

      print(_('This string will be translated.'))

   For convenience, you want the :func:`_` function to be installed in Python's
   builtins namespace, so it is easily accessible in all modules of your
   application.

   .. deprecated-removed:: 3.8 3.10
      The *codeset* parameter.


</pre>
</div>
<div class="section" id="the-class-nulltranslations-class">
<h2>The <a href="#id31"><span class="problematic" id="id32">:class:`NullTranslations`</span></a> class</h2>
<div class="system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 235); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>Translation classes are what actually implement the translation of original
source file message strings to translated message strings. The base class used
by all translation classes is <a href="#id33"><span class="problematic" id="id34">:class:`NullTranslations`</span></a>; this provides the basic
interface you can use to write your own specialized translation classes.  Here
are the methods of <a href="#id35"><span class="problematic" id="id36">:class:`!NullTranslations`</span></a>:</p>
<div class="system-message" id="id33">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 238); <em><a href="#id34">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 238); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="nulltranslations-fp-none">Takes an optional <a href="#id37"><span class="problematic" id="id38">:term:`file object`</span></a> <em>fp</em>, which is ignored by the base class.
Initializes &quot;protected&quot; instance variables <em>_info</em> and <em>_charset</em> which are set
by derived classes, as well as <em>_fallback</em>, which is set through
<a href="#id39"><span class="problematic" id="id40">:meth:`add_fallback`</span></a>.  It then calls <tt class="docutils literal">self._parse(fp)</tt> if <em>fp</em> is not
<tt class="docutils literal">None</tt>.</p>
<div class="nulltranslations-fp-none system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 247); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="nulltranslations-fp-none system-message" id="id39">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 247); <em><a href="#id40">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 253)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: _parse(fp)

   No-op in the base class, this method takes file object *fp*, and reads
   the data from the file, initializing its message catalog.  If you have an
   unsupported message catalog file format, you should override this method
   to parse your format.


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 261)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: add_fallback(fallback)

   Add *fallback* as the fallback object for the current translation object.
   A translation object should consult the fallback if it cannot provide a
   translation for a given message.


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 268)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: gettext(message)

   If a fallback has been set, forward :meth:`!gettext` to the fallback.
   Otherwise, return *message*.  Overridden in derived classes.


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 274)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: ngettext(singular, plural, n)

   If a fallback has been set, forward :meth:`!ngettext` to the fallback.
   Otherwise, return *singular* if *n* is 1; return *plural* otherwise.
   Overridden in derived classes.


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 281)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: pgettext(context, message)

   If a fallback has been set, forward :meth:`pgettext` to the fallback.
   Otherwise, return the translated message.  Overridden in derived classes.

   .. versionadded:: 3.8


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 289)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: npgettext(context, singular, plural, n)

   If a fallback has been set, forward :meth:`npgettext` to the fallback.
   Otherwise, return the translated message.  Overridden in derived classes.

   .. versionadded:: 3.8


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 297)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: lgettext(message)
</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 298)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: lngettext(singular, plural, n)

   Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation
   is returned as a byte string encoded in the preferred system encoding
   if no encoding was explicitly set with :meth:`set_output_charset`.
   Overridden in derived classes.

   .. warning::

      These methods should be avoided in Python 3.  See the warning for the
      :func:`lgettext` function.

   .. deprecated-removed:: 3.8 3.10


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 313)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: info()

   Return the &quot;protected&quot; :attr:`_info` variable, a dictionary containing
   the metadata found in the message catalog file.


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 319)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: charset()

   Return the encoding of the message catalog file.


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 324)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: output_charset()

   Return the encoding used to return translated messages in :meth:`.lgettext`
   and :meth:`.lngettext`.

   .. deprecated-removed:: 3.8 3.10


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 332)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_output_charset(charset)

   Change the encoding used to return translated messages.

   .. deprecated-removed:: 3.8 3.10


</pre>
</div>
<div class="nulltranslations-fp-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 339)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: install(names=None)

   This method installs :meth:`.gettext` into the built-in namespace,
   binding it to ``_``.

   If the *names* parameter is given, it must be a sequence containing the
   names of functions you want to install in the builtins namespace in
   addition to :func:`_`.  Supported names are ``'gettext'``, ``'ngettext'``,
   ``'pgettext'``, ``'npgettext'``, ``'lgettext'``, and ``'lngettext'``.

   Note that this is only one way, albeit the most convenient way, to make
   the :func:`_` function available to your application.  Because it affects
   the entire application globally, and specifically the built-in namespace,
   localized modules should never install :func:`_`. Instead, they should use
   this code to make :func:`_` available to their module::

      import gettext
      t = gettext.translation('mymodule', ...)
      _ = t.gettext

   This puts :func:`_` only in the module's global namespace and so only
   affects calls within this module.

   .. versionchanged:: 3.8
      Added ``'pgettext'`` and ``'npgettext'``.
</pre>
</div>
</div>
<div class="section" id="the-class-gnutranslations-class">
<h2>The <a href="#id41"><span class="problematic" id="id42">:class:`GNUTranslations`</span></a> class</h2>
<div class="system-message" id="id41">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 366); <em><a href="#id42">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>The <a href="#id43"><span class="problematic" id="id44">:mod:`gettext`</span></a> module provides one additional class derived from
<a href="#id45"><span class="problematic" id="id46">:class:`NullTranslations`</span></a>: <a href="#id47"><span class="problematic" id="id48">:class:`GNUTranslations`</span></a>.  This class overrides
<a href="#id49"><span class="problematic" id="id50">:meth:`_parse`</span></a> to enable reading GNU <a href="#id51"><span class="problematic" id="id52">:program:`gettext`</span></a> format <a href="#id53"><span class="problematic" id="id54">:file:`.mo`</span></a> files
in both big-endian and little-endian format.</p>
<div class="system-message" id="id43">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 369); <em><a href="#id44">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id45">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 369); <em><a href="#id46">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id47">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 369); <em><a href="#id48">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id49">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 369); <em><a href="#id50">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id51">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 369); <em><a href="#id52">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id53">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 369); <em><a href="#id54">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<p><a href="#id55"><span class="problematic" id="id56">:class:`GNUTranslations`</span></a> parses optional metadata out of the translation
catalog. It is convention with GNU <a href="#id57"><span class="problematic" id="id58">:program:`gettext`</span></a> to include metadata as
the translation for the empty string. This metadata is in <a class="reference external" href="http://tools.ietf.org/html/rfc822.html">RFC 822</a>-style
<tt class="docutils literal">key: value</tt> pairs, and should contain the <tt class="docutils literal"><span class="pre">Project-Id-Version</span></tt> key.  If the
key <tt class="docutils literal"><span class="pre">Content-Type</span></tt> is found, then the <tt class="docutils literal">charset</tt> property is used to
initialize the &quot;protected&quot; <a href="#id59"><span class="problematic" id="id60">:attr:`_charset`</span></a> instance variable, defaulting to
<tt class="docutils literal">None</tt> if not found.  If the charset encoding is specified, then all message
ids and message strings read from the catalog are converted to Unicode using
this encoding, else ASCII is assumed.</p>
<div class="system-message" id="id55">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 374); <em><a href="#id56">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id57">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 374); <em><a href="#id58">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id59">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 374); <em><a href="#id60">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p>Since message ids are read as Unicode strings too, all <a href="#id61"><span class="problematic" id="id62">:meth:`*gettext`</span></a> methods
will assume message ids as Unicode strings, not byte strings.</p>
<div class="system-message" id="id61">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 384); <em><a href="#id62">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<p>The entire set of key/value pairs are placed into a dictionary and set as the
&quot;protected&quot; <a href="#id63"><span class="problematic" id="id64">:attr:`_info`</span></a> instance variable.</p>
<div class="system-message" id="id63">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 387); <em><a href="#id64">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p>If the <a href="#id65"><span class="problematic" id="id66">:file:`.mo`</span></a> file's magic number is invalid, the major version number is
unexpected, or if other problems occur while reading the file, instantiating a
<a href="#id67"><span class="problematic" id="id68">:class:`GNUTranslations`</span></a> class can raise <a href="#id69"><span class="problematic" id="id70">:exc:`OSError`</span></a>.</p>
<div class="system-message" id="id65">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 390); <em><a href="#id66">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id67">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 390); <em><a href="#id68">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id69">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 390); <em><a href="#id70">backlink</a></em></p>
Unknown interpreted text role &quot;exc&quot;.</div>
<p class="gnutranslations">The following methods are overridden from the base class implementation:</p>
<div class="gnutranslations system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 398)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: gettext(message)

   Look up the *message* id in the catalog and return the corresponding message
   string, as a Unicode string.  If there is no entry in the catalog for the
   *message* id, and a fallback has been set, the look up is forwarded to the
   fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the
   *message* id is returned.


</pre>
</div>
<div class="gnutranslations system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 407)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: ngettext(singular, plural, n)

   Do a plural-forms lookup of a message id.  *singular* is used as the message id
   for purposes of lookup in the catalog, while *n* is used to determine which
   plural form to use.  The returned message string is a Unicode string.

   If the message id is not found in the catalog, and a fallback is specified,
   the request is forwarded to the fallback's :meth:`~NullTranslations.ngettext`
   method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is
   returned in all other cases.

   Here is an example::

      n = len(os.listdir('.'))
      cat = GNUTranslations(somefile)
      message = cat.ngettext(
          'There is %(num)d file in this directory',
          'There are %(num)d files in this directory',
          n) % {'num': n}


</pre>
</div>
<div class="gnutranslations system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 428)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: pgettext(context, message)

   Look up the *context* and *message* id in the catalog and return the
   corresponding message string, as a Unicode string.  If there is no
   entry in the catalog for the *message* id and *context*, and a fallback
   has been set, the look up is forwarded to the fallback's
   :meth:`pgettext` method.  Otherwise, the *message* id is returned.

   .. versionadded:: 3.8


</pre>
</div>
<div class="gnutranslations system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 439)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: npgettext(context, singular, plural, n)

   Do a plural-forms lookup of a message id.  *singular* is used as the
   message id for purposes of lookup in the catalog, while *n* is used to
   determine which plural form to use.

   If the message id for *context* is not found in the catalog, and a
   fallback is specified, the request is forwarded to the fallback's
   :meth:`npgettext` method.  Otherwise, when *n* is 1 *singular* is
   returned, and *plural* is returned in all other cases.

   .. versionadded:: 3.8


</pre>
</div>
<div class="gnutranslations system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 453)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: lgettext(message)
</pre>
</div>
<div class="gnutranslations system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 454)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: lngettext(singular, plural, n)

   Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation
   is returned as a byte string encoded in the preferred system encoding
   if no encoding  was explicitly set with
   :meth:`~NullTranslations.set_output_charset`.

   .. warning::

      These methods should be avoided in Python 3.  See the warning for the
      :func:`lgettext` function.

   .. deprecated-removed:: 3.8 3.10
</pre>
</div>
</div>
<div class="section" id="solaris-message-catalog-support">
<h2>Solaris message catalog support</h2>
<p>The Solaris operating system defines its own binary <a href="#id71"><span class="problematic" id="id72">:file:`.mo`</span></a> file format, but
since no documentation can be found on this format, it is not supported at this
time.</p>
<div class="system-message" id="id71">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 472); <em><a href="#id72">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
</div>
<div class="section" id="the-catalog-constructor">
<h2>The Catalog constructor</h2>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 480)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index:: single: GNOME

</pre>
</div>
<p>GNOME uses a version of the <a href="#id73"><span class="problematic" id="id74">:mod:`gettext`</span></a> module by James Henstridge, but this
version has a slightly different API.  Its documented usage was:</p>
<div class="system-message" id="id73">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 482); <em><a href="#id74">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
import gettext
cat = gettext.Catalog(domain, localedir)
_ = cat.gettext
print(_('hello world'))
</pre>
<p>For compatibility with this older module, the function <a href="#id75"><span class="problematic" id="id76">:func:`Catalog`</span></a> is an
alias for the <a href="#id77"><span class="problematic" id="id78">:func:`translation`</span></a> function described above.</p>
<div class="system-message" id="id75">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 490); <em><a href="#id76">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id77">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 490); <em><a href="#id78">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>One difference between this module and Henstridge's: his catalog objects
supported access through a mapping API, but this appears to be unused and so is
not currently supported.</p>
</div>
</div>
<div class="section" id="internationalizing-your-programs-and-modules">
<h1>Internationalizing your programs and modules</h1>
<p>Internationalization (I18N) refers to the operation by which a program is made
aware of multiple languages.  Localization (L10N) refers to the adaptation of
your program, once internationalized, to the local language and cultural habits.
In order to provide multilingual messages for your Python programs, you need to
take the following steps:</p>
<ol class="arabic">
<li><p class="first">prepare your program or module by specially marking translatable strings</p>
</li>
<li><p class="first">run a suite of tools over your marked files to generate raw messages catalogs</p>
</li>
<li><p class="first">create language-specific translations of the message catalogs</p>
</li>
<li><p class="first">use the <a href="#id79"><span class="problematic" id="id80">:mod:`gettext`</span></a> module so that message strings are properly translated</p>
<div class="system-message" id="id79">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 513); <em><a href="#id80">backlink</a></em></p>
<p>Unknown interpreted text role &quot;mod&quot;.</p>
</div>
</li>
</ol>
<p>In order to prepare your code for I18N, you need to look at all the strings in
your files.  Any string that needs to be translated should be marked by wrapping
it in <tt class="docutils literal"><span class="pre">_('...')</span></tt> --- that is, a call to the function <a href="#id81"><span class="problematic" id="id82">:func:`_`</span></a>.  For example:</p>
<div class="system-message" id="id81">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 515); <em><a href="#id82">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
filename = 'mylog.txt'
message = _('writing a log message')
with open(filename, 'w') as fp:
    fp.write(message)
</pre>
<p>In this example, the string <tt class="docutils literal">'writing a log message'</tt> is marked as a candidate
for translation, while the strings <tt class="docutils literal">'mylog.txt'</tt> and <tt class="docutils literal">'w'</tt> are not.</p>
<p>There are a few tools to extract the strings meant for translation.
The original GNU <a href="#id83"><span class="problematic" id="id84">:program:`gettext`</span></a> only supported C or C++ source
code but its extended version <a href="#id85"><span class="problematic" id="id86">:program:`xgettext`</span></a> scans code written
in a number of languages, including Python, to find strings marked as
translatable.  <a class="reference external" href="http://babel.pocoo.org/">Babel</a> is a Python
internationalization library that includes a <a href="#id87"><span class="problematic" id="id88">:file:`pybabel`</span></a> script to
extract and compile message catalogs.  François Pinard's program
called <a href="#id89"><span class="problematic" id="id90">:program:`xpot`</span></a> does a similar job and is available as part of
his <a class="reference external" href="https://github.com/pinard/po-utils">po-utils package</a>.</p>
<div class="system-message" id="id83">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 527); <em><a href="#id84">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id85">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 527); <em><a href="#id86">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id87">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 527); <em><a href="#id88">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id89">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 527); <em><a href="#id90">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<p>(Python also includes pure-Python versions of these programs, called
<a href="#id91"><span class="problematic" id="id92">:program:`pygettext.py`</span></a> and <a href="#id93"><span class="problematic" id="id94">:program:`msgfmt.py`</span></a>; some Python distributions
will install them for you.  <a href="#id95"><span class="problematic" id="id96">:program:`pygettext.py`</span></a> is similar to
<a href="#id97"><span class="problematic" id="id98">:program:`xgettext`</span></a>, but only understands Python source code and
cannot handle other programming languages such as C or C++.
<a href="#id99"><span class="problematic" id="id100">:program:`pygettext.py`</span></a> supports a command-line interface similar to
<a href="#id101"><span class="problematic" id="id102">:program:`xgettext`</span></a>; for details on its use, run <tt class="docutils literal">pygettext.py
<span class="pre">--help</span></tt>.  <a href="#id103"><span class="problematic" id="id104">:program:`msgfmt.py`</span></a> is binary compatible with GNU
<a href="#id105"><span class="problematic" id="id106">:program:`msgfmt`</span></a>.  With these two programs, you may not need the GNU
<a href="#id107"><span class="problematic" id="id108">:program:`gettext`</span></a> package to internationalize your Python
applications.)</p>
<div class="system-message" id="id91">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id92">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id93">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id94">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id95">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id96">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id97">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id98">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id99">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id100">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id101">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id102">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id103">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id104">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id105">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id106">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id107">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 537); <em><a href="#id108">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<p><a href="#id109"><span class="problematic" id="id110">:program:`xgettext`</span></a>, <a href="#id111"><span class="problematic" id="id112">:program:`pygettext`</span></a>, and similar tools generate
<a href="#id113"><span class="problematic" id="id114">:file:`.po`</span></a> files that are message catalogs.  They are structured
human-readable files that contain every marked string in the source
code, along with a placeholder for the translated versions of these
strings.</p>
<div class="system-message" id="id109">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 549); <em><a href="#id110">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id111">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 549); <em><a href="#id112">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id113">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 549); <em><a href="#id114">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<p>Copies of these <a href="#id115"><span class="problematic" id="id116">:file:`.po`</span></a> files are then handed over to the
individual human translators who write translations for every
supported natural language.  They send back the completed
language-specific versions as a <a href="#id117"><span class="problematic" id="id118">:file:`&lt;language-name&gt;.po`</span></a> file that's
compiled into a machine-readable <a href="#id119"><span class="problematic" id="id120">:file:`.mo`</span></a> binary catalog file using
the <a href="#id121"><span class="problematic" id="id122">:program:`msgfmt`</span></a> program.  The <a href="#id123"><span class="problematic" id="id124">:file:`.mo`</span></a> files are used by the
<a href="#id125"><span class="problematic" id="id126">:mod:`gettext`</span></a> module for the actual translation processing at
run-time.</p>
<div class="system-message" id="id115">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 555); <em><a href="#id116">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id117">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 555); <em><a href="#id118">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id119">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 555); <em><a href="#id120">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id121">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 555); <em><a href="#id122">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id123">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 555); <em><a href="#id124">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id125">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 555); <em><a href="#id126">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>How you use the <a href="#id127"><span class="problematic" id="id128">:mod:`gettext`</span></a> module in your code depends on whether you are
internationalizing a single module or your entire application. The next two
sections will discuss each case.</p>
<div class="system-message" id="id127">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 564); <em><a href="#id128">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="section" id="localizing-your-module">
<h2>Localizing your module</h2>
<p>If you are localizing your module, you must take care not to make global
changes, e.g. to the built-in namespace. You should not use the GNU <a href="#id129"><span class="problematic" id="id130">:program:`gettext`</span></a>
API but instead the class-based API.</p>
<div class="system-message" id="id129">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 572); <em><a href="#id130">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<p>Let's say your module is called &quot;spam&quot; and the module's various natural language
translation <a href="#id131"><span class="problematic" id="id132">:file:`.mo`</span></a> files reside in <a href="#id133"><span class="problematic" id="id134">:file:`/usr/share/locale`</span></a> in GNU
<a href="#id135"><span class="problematic" id="id136">:program:`gettext`</span></a> format.  Here's what you would put at the top of your
module:</p>
<div class="system-message" id="id131">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 576); <em><a href="#id132">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id133">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 576); <em><a href="#id134">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id135">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 576); <em><a href="#id136">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<pre class="literal-block">
import gettext
t = gettext.translation('spam', '/usr/share/locale')
_ = t.gettext
</pre>
</div>
<div class="section" id="localizing-your-application">
<h2>Localizing your application</h2>
<p>If you are localizing your application, you can install the <a href="#id137"><span class="problematic" id="id138">:func:`_`</span></a> function
globally into the built-in namespace, usually in the main driver file of your
application.  This will let all your application-specific files just use
<tt class="docutils literal"><span class="pre">_('...')</span></tt> without having to explicitly install it in each file.</p>
<div class="system-message" id="id137">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 589); <em><a href="#id138">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>In the simple case then, you need only add the following bit of code to the main
driver file of your application:</p>
<pre class="literal-block">
import gettext
gettext.install('myapplication')
</pre>
<p>If you need to set the locale directory, you can pass it into the
<a href="#id139"><span class="problematic" id="id140">:func:`install`</span></a> function:</p>
<div class="system-message" id="id139">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 600); <em><a href="#id140">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
import gettext
gettext.install('myapplication', '/usr/share/locale')
</pre>
</div>
<div class="section" id="changing-languages-on-the-fly">
<h2>Changing languages on the fly</h2>
<p>If your program needs to support many languages at the same time, you may want
to create multiple translation instances and then switch between them
explicitly, like so:</p>
<pre class="literal-block">
import gettext

lang1 = gettext.translation('myapplication', languages=['en'])
lang2 = gettext.translation('myapplication', languages=['fr'])
lang3 = gettext.translation('myapplication', languages=['de'])

# start by using language1
lang1.install()

# ... time goes by, user selects language 2
lang2.install()

# ... more time goes by, user selects language 3
lang3.install()
</pre>
</div>
<div class="section" id="deferred-translations">
<h2>Deferred translations</h2>
<p>In most coding situations, strings are translated where they are coded.
Occasionally however, you need to mark strings for translation, but defer actual
translation until later.  A classic example is:</p>
<pre class="literal-block">
animals = ['mollusk',
           'albatross',
           'rat',
           'penguin',
           'python', ]
# ...
for a in animals:
    print(a)
</pre>
<p>Here, you want to mark the strings in the <tt class="docutils literal">animals</tt> list as being
translatable, but you don't actually want to translate them until they are
printed.</p>
<p>Here is one way you can handle this situation:</p>
<pre class="literal-block">
def _(message): return message

animals = [_('mollusk'),
           _('albatross'),
           _('rat'),
           _('penguin'),
           _('python'), ]

del _

# ...
for a in animals:
    print(_(a))
</pre>
<p>This works because the dummy definition of <a href="#id141"><span class="problematic" id="id142">:func:`_`</span></a> simply returns the string
unchanged.  And this dummy definition will temporarily override any definition
of <a href="#id143"><span class="problematic" id="id144">:func:`_`</span></a> in the built-in namespace (until the <a href="#id145"><span class="problematic" id="id146">:keyword:`del`</span></a> command). Take
care, though if you have a previous definition of <a href="#id147"><span class="problematic" id="id148">:func:`_`</span></a> in the local
namespace.</p>
<div class="system-message" id="id141">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 666); <em><a href="#id142">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id143">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 666); <em><a href="#id144">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id145">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 666); <em><a href="#id146">backlink</a></em></p>
Unknown interpreted text role &quot;keyword&quot;.</div>
<div class="system-message" id="id147">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 666); <em><a href="#id148">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>Note that the second use of <a href="#id149"><span class="problematic" id="id150">:func:`_`</span></a> will not identify &quot;a&quot; as being
translatable to the <a href="#id151"><span class="problematic" id="id152">:program:`gettext`</span></a> program, because the parameter
is not a string literal.</p>
<div class="system-message" id="id149">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 672); <em><a href="#id150">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id151">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 672); <em><a href="#id152">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<p>Another way to handle this is with the following example:</p>
<pre class="literal-block">
def N_(message): return message

animals = [N_('mollusk'),
           N_('albatross'),
           N_('rat'),
           N_('penguin'),
           N_('python'), ]

# ...
for a in animals:
    print(_(a))
</pre>
<p>In this case, you are marking translatable strings with the function
<a href="#id153"><span class="problematic" id="id154">:func:`N_`</span></a>, which won't conflict with any definition of <a href="#id155"><span class="problematic" id="id156">:func:`_`</span></a>.
However, you will need to teach your message extraction program to
look for translatable strings marked with <a href="#id157"><span class="problematic" id="id158">:func:`N_`</span></a>. <a href="#id159"><span class="problematic" id="id160">:program:`xgettext`</span></a>,
<a href="#id161"><span class="problematic" id="id162">:program:`pygettext`</span></a>, <tt class="docutils literal">pybabel extract</tt>, and <a href="#id163"><span class="problematic" id="id164">:program:`xpot`</span></a> all
support this through the use of the <a href="#id165"><span class="problematic" id="id166">:option:`!-k`</span></a> command-line switch.
The choice of <a href="#id167"><span class="problematic" id="id168">:func:`N_`</span></a> here is totally arbitrary; it could have just
as easily been <a href="#id169"><span class="problematic" id="id170">:func:`MarkThisStringForTranslation`</span></a>.</p>
<div class="system-message" id="id153">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id154">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id155">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id156">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id157">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id158">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id159">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id160">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id161">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id162">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id163">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id164">backlink</a></em></p>
Unknown interpreted text role &quot;program&quot;.</div>
<div class="system-message" id="id165">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id166">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<div class="system-message" id="id167">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id168">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id169">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 690); <em><a href="#id170">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</div>
</div>
<div class="section" id="acknowledgements">
<h1>Acknowledgements</h1>
<p>The following people contributed code, feedback, design suggestions, previous
implementations, and valuable experience to the creation of this module:</p>
<ul class="simple">
<li>Peter Funk</li>
<li>James Henstridge</li>
<li>Juan David Ibáñez Palomar</li>
<li>Marc-André Lemburg</li>
<li>Martin von Löwis</li>
<li>François Pinard</li>
<li>Barry Warsaw</li>
<li>Gustavo Niemeyer</li>
</ul>
<p class="rubric">Footnotes</p>
<table class="docutils footnote" frame="void" id="id171" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[1]</td><td><p class="first">The default locale directory is system dependent; for example, on RedHat Linux
it is <a href="#id172"><span class="problematic" id="id173">:file:`/usr/share/locale`</span></a>, but on Solaris it is <a href="#id174"><span class="problematic" id="id175">:file:`/usr/lib/locale`</span></a>.
The <a href="#id176"><span class="problematic" id="id177">:mod:`gettext`</span></a> module does not try to support these system dependent
defaults; instead its default is <a href="#id178"><span class="problematic" id="id179">:file:`{sys.base_prefix}/share/locale`</span></a> (see
<a href="#id180"><span class="problematic" id="id181">:data:`sys.base_prefix`</span></a>). For this reason, it is always best to call
<a href="#id182"><span class="problematic" id="id183">:func:`bindtextdomain`</span></a> with an explicit absolute path at the start of your
application.</p>
<div class="system-message" id="id172">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 724); <em><a href="#id173">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id174">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 724); <em><a href="#id175">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id176">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 724); <em><a href="#id177">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id178">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 724); <em><a href="#id179">backlink</a></em></p>
Unknown interpreted text role &quot;file&quot;.</div>
<div class="system-message" id="id180">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 724); <em><a href="#id181">backlink</a></em></p>
Unknown interpreted text role &quot;data&quot;.</div>
<div class="last system-message" id="id182">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 724); <em><a href="#id183">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id184" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[2]</td><td><p class="first">See the footnote for <a href="#id185"><span class="problematic" id="id186">:func:`bindtextdomain`</span></a> above.</p>
<div class="last system-message" id="id185">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">gettext.rst</tt>, line 732); <em><a href="#id186">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</td></tr>
</tbody>
</table>
</div>
</div>
</body>
</html>
