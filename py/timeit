<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`timeit` --- Measure execution time of small code snippets</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-timeit-measure-execution-time-of-small-code-snippets">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`timeit`</span></a> --- Measure execution time of small code snippets</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: timeit
   :synopsis: Measure the execution time of small code snippets.

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/timeit.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 7); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 9)</p>
<p>Unknown directive type &quot;index&quot;.</p>
<pre class="literal-block">
.. index::
   single: Benchmarking
   single: Performance

</pre>
</div>
<hr class="docutils" />
<p>This module provides a simple way to time small bits of Python code. It has both
a <a href="#id5"><span class="problematic" id="id6">:ref:`timeit-command-line-interface`</span></a> as well as a <a href="#id7"><span class="problematic" id="id8">:ref:`callable &lt;python-interface&gt;`</span></a>
one.  It avoids a number of common traps for measuring execution times.
See also Tim Peters' introduction to the &quot;Algorithms&quot; chapter in the <em>Python
Cookbook</em>, published by O'Reilly.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 15); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 15); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="section" id="basic-examples">
<h1>Basic Examples</h1>
<p>The following example shows how the <a href="#id9"><span class="problematic" id="id10">:ref:`timeit-command-line-interface`</span></a>
can be used to compare three different expressions:</p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 25); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<pre class="code shell-session literal-block">
<span class="generic prompt">$ </span>python3 -m timeit <span class="literal string single">'&quot;-&quot;.join(str(n) for n in range(100))'</span>
<span class="generic output">10000 loops, best of 5: 30.2 usec per loop
</span><span class="generic prompt">$ </span>python3 -m timeit <span class="literal string single">'&quot;-&quot;.join([str(n) for n in range(100)])'</span>
<span class="generic output">10000 loops, best of 5: 27.5 usec per loop
</span><span class="generic prompt">$ </span>python3 -m timeit <span class="literal string single">'&quot;-&quot;.join(map(str, range(100)))'</span>
<span class="generic output">10000 loops, best of 5: 23.2 usec per loop</span>
</pre>
<p>This can be achieved from the <a href="#id11"><span class="problematic" id="id12">:ref:`python-interface`</span></a> with:</p>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 37); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('&quot;-&quot;.join(str(n) for n in range(100))', number=10000)
0.3018611848820001
&gt;&gt;&gt; timeit.timeit('&quot;-&quot;.join([str(n) for n in range(100)])', number=10000)
0.2727368790656328
&gt;&gt;&gt; timeit.timeit('&quot;-&quot;.join(map(str, range(100)))', number=10000)
0.23702679807320237
</pre>
<p>A callable can also be passed from the <a href="#id13"><span class="problematic" id="id14">:ref:`python-interface`</span></a>:</p>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 47); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; timeit.timeit(lambda: &quot;-&quot;.join(map(str, range(100))), number=10000)
0.19665591977536678
</pre>
<p>Note however that <a href="#id15"><span class="problematic" id="id16">:func:`.timeit`</span></a> will automatically determine the number of
repetitions only when the command-line interface is used.  In the
<a href="#id17"><span class="problematic" id="id18">:ref:`timeit-examples`</span></a> section you can find more advanced examples.</p>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 52); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 52); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
</div>
<div class="section" id="id19">
<span id="python-interface"></span><h1>Python Interface</h1>
<p>The module defines three convenience functions and a public class:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 65)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: timeit(stmt='pass', setup='pass', timer=&lt;default timer&gt;, number=1000000, globals=None)

   Create a :class:`Timer` instance with the given statement, *setup* code and
   *timer* function and run its :meth:`.timeit` method with *number* executions.
   The optional *globals* argument specifies a namespace in which to execute the
   code.

   .. versionchanged:: 3.5
      The optional *globals* parameter was added.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 76)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: repeat(stmt='pass', setup='pass', timer=&lt;default timer&gt;, repeat=5, number=1000000, globals=None)

   Create a :class:`Timer` instance with the given statement, *setup* code and
   *timer* function and run its :meth:`.repeat` method with the given *repeat*
   count and *number* executions.  The optional *globals* argument specifies a
   namespace in which to execute the code.

   .. versionchanged:: 3.5
      The optional *globals* parameter was added.

   .. versionchanged:: 3.7
      Default value of *repeat* changed from 3 to 5.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 89)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: default_timer()

   The default timer, which is always :func:`time.perf_counter`.

   .. versionchanged:: 3.3
      :func:`time.perf_counter` is now the default timer.


</pre>
</div>
<p class="timer-stmt-pass setup-pass timer-timer function globals-none">Class for timing execution speed of small code snippets.</p>
<p class="timer-stmt-pass setup-pass timer-timer function globals-none">The constructor takes a statement to be timed, an additional statement used
for setup, and a timer function.  Both statements default to <tt class="docutils literal">'pass'</tt>;
the timer function is platform-dependent (see the module doc string).
<em>stmt</em> and <em>setup</em> may also contain multiple statements separated by <tt class="docutils literal">;</tt>
or newlines, as long as they don't contain multi-line string literals.  The
statement will by default be executed within timeit's namespace; this behavior
can be controlled by passing a namespace to <em>globals</em>.</p>
<p class="timer-stmt-pass setup-pass timer-timer function globals-none">To measure the execution time of the first statement, use the <a href="#id20"><span class="problematic" id="id21">:meth:`.timeit`</span></a>
method.  The <a href="#id22"><span class="problematic" id="id23">:meth:`.repeat`</span></a> and <a href="#id24"><span class="problematic" id="id25">:meth:`.autorange`</span></a> methods are convenience
methods to call <a href="#id26"><span class="problematic" id="id27">:meth:`.timeit`</span></a> multiple times.</p>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message" id="id20">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 109); <em><a href="#id21">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message" id="id22">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 109); <em><a href="#id23">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message" id="id24">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 109); <em><a href="#id25">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message" id="id26">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 109); <em><a href="#id27">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<p class="timer-stmt-pass setup-pass timer-timer function globals-none">The execution time of <em>setup</em> is excluded from the overall timed execution run.</p>
<p class="timer-stmt-pass setup-pass timer-timer function globals-none">The <em>stmt</em> and <em>setup</em> parameters can also take objects that are callable
without arguments.  This will embed calls to them in a timer function that
will then be executed by <a href="#id28"><span class="problematic" id="id29">:meth:`.timeit`</span></a>.  Note that the timing overhead is a
little larger in this case because of the extra function calls.</p>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message" id="id28">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 115); <em><a href="#id29">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 120)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.5
   The optional *globals* parameter was added.

</pre>
</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 123)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: Timer.timeit(number=1000000)

   Time *number* executions of the main statement.  This executes the setup
   statement once, and then returns the time it takes to execute the main
   statement a number of times, measured in seconds as a float.
   The argument is the number of times through the loop, defaulting to one
   million.  The main statement, the setup statement and the timer function
   to be used are passed to the constructor.

   .. note::

      By default, :meth:`.timeit` temporarily turns off :term:`garbage
      collection` during the timing.  The advantage of this approach is that
      it makes independent timings more comparable.  The disadvantage is
      that GC may be an important component of the performance of the
      function being measured.  If so, GC can be re-enabled as the first
      statement in the *setup* string.  For example::

         timeit.Timer('for i in range(10): oct(i)', 'gc.enable()').timeit()


</pre>
</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 144)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: Timer.autorange(callback=None)

   Automatically determine how many times to call :meth:`.timeit`.

   This is a convenience function that calls :meth:`.timeit` repeatedly
   so that the total time &gt;= 0.2 second, returning the eventual
   (number of loops, time taken for that number of loops). It calls
   :meth:`.timeit` with increasing numbers from the sequence 1, 2, 5,
   10, 20, 50, ... until the time taken is at least 0.2 second.

   If *callback* is given and is not ``None``, it will be called after
   each trial with two arguments: ``callback(number, time_taken)``.

   .. versionadded:: 3.6


</pre>
</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 160)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: Timer.repeat(repeat=5, number=1000000)

   Call :meth:`.timeit` a few times.

   This is a convenience function that calls the :meth:`.timeit` repeatedly,
   returning a list of results.  The first argument specifies how many times
   to call :meth:`.timeit`.  The second argument specifies the *number*
   argument for :meth:`.timeit`.

   .. note::

      It's tempting to calculate mean and standard deviation from the result
      vector and report these.  However, this is not very useful.
      In a typical case, the lowest value gives a lower bound for how fast
      your machine can run the given code snippet; higher values in the
      result vector are typically not caused by variability in Python's
      speed, but by other processes interfering with your timing accuracy.
      So the :func:`min` of the result is probably the only number you
      should be interested in.  After that, you should look at the entire
      vector and apply common sense rather than statistics.

   .. versionchanged:: 3.7
      Default value of *repeat* changed from 3 to 5.


</pre>
</div>
<div class="timer-stmt-pass setup-pass timer-timer function globals-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 185)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: Timer.print_exc(file=None)

   Helper to print a traceback from the timed code.

   Typical use::

      t = Timer(...)       # outside the try/except
      try:
          t.timeit(...)    # or t.repeat(...)
      except Exception:
          t.print_exc()

   The advantage over the standard traceback is that source lines in the
   compiled template will be displayed.  The optional *file* argument directs
   where the traceback is sent; it defaults to :data:`sys.stderr`.
</pre>
</div>
</div>
<div class="section" id="command-line-interface">
<span id="timeit-command-line-interface"></span><h1>Command-Line Interface</h1>
<p>When called as a program from the command line, the following form is used:</p>
<pre class="literal-block">
python -m timeit [-n N] [-r N] [-u U] [-s S] [-h] [statement ...]
</pre>
<p>Where the following options are understood:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 213)</p>
<p>Unknown directive type &quot;program&quot;.</p>
<pre class="literal-block">
.. program:: timeit

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 215)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -n N, --number=N

   how many times to execute 'statement'

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 219)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -r N, --repeat=N

   how many times to repeat the timer (default 5)

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 223)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -s S, --setup=S

   statement to be executed once initially (default ``pass``)

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 227)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -p, --process

   measure process time, not wallclock time, using :func:`time.process_time`
   instead of :func:`time.perf_counter`, which is the default

   .. versionadded:: 3.3

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 234)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -u, --unit=U

   specify a time unit for timer output; can select nsec, usec, msec, or sec

   .. versionadded:: 3.5

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 240)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -v, --verbose

   print raw timing results; repeat for more digits precision

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 244)</p>
<p>Unknown directive type &quot;cmdoption&quot;.</p>
<pre class="literal-block">
.. cmdoption:: -h, --help

   print a short usage message and exit

</pre>
</div>
<p>A multi-line statement may be given by specifying each line as a separate
statement argument; indented lines are possible by enclosing an argument in
quotes and using leading spaces.  Multiple <a href="#id30"><span class="problematic" id="id31">:option:`-s`</span></a> options are treated
similarly.</p>
<div class="system-message" id="id30">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 248); <em><a href="#id31">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<p>If <a href="#id32"><span class="problematic" id="id33">:option:`-n`</span></a> is not given, a suitable number of loops is calculated by trying
increasing numbers from the sequence 1, 2, 5, 10, 20, 50, ... until the total
time is at least 0.2 seconds.</p>
<div class="system-message" id="id32">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 253); <em><a href="#id33">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<p><a href="#id34"><span class="problematic" id="id35">:func:`default_timer`</span></a> measurements can be affected by other programs running on
the same machine, so the best thing to do when accurate timing is necessary is
to repeat the timing a few times and use the best time.  The <a href="#id36"><span class="problematic" id="id37">:option:`-r`</span></a>
option is good for this; the default of 5 repetitions is probably enough in
most cases.  You can use <a href="#id38"><span class="problematic" id="id39">:func:`time.process_time`</span></a> to measure CPU time.</p>
<div class="system-message" id="id34">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 257); <em><a href="#id35">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id36">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 257); <em><a href="#id37">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<div class="system-message" id="id38">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 257); <em><a href="#id39">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">There is a certain baseline overhead associated with executing a pass statement.
The code here doesn't try to hide it, but you should be aware of it.  The
baseline overhead can be measured by invoking the program without arguments,
and it might differ between Python versions.</p>
</div>
</div>
<div class="section" id="examples">
<span id="timeit-examples"></span><h1>Examples</h1>
<p>It is possible to provide a setup statement that is executed only once at the beginning:</p>
<pre class="code shell-session literal-block">
<span class="generic prompt">$ </span>python -m timeit -s <span class="literal string single">'text = &quot;sample string&quot;; char = &quot;g&quot;'</span>  <span class="literal string single">'char in text'</span>
<span class="generic output">5000000 loops, best of 5: 0.0877 usec per loop
</span><span class="generic prompt">$ </span>python -m timeit -s <span class="literal string single">'text = &quot;sample string&quot;; char = &quot;g&quot;'</span>  <span class="literal string single">'text.find(char)'</span>
<span class="generic output">1000000 loops, best of 5: 0.342 usec per loop</span>
</pre>
<pre class="literal-block">
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('char in text', setup='text = &quot;sample string&quot;; char = &quot;g&quot;')
0.41440500499993504
&gt;&gt;&gt; timeit.timeit('text.find(char)', setup='text = &quot;sample string&quot;; char = &quot;g&quot;')
1.7246671520006203
</pre>
<p>The same can be done using the <a href="#id40"><span class="problematic" id="id41">:class:`Timer`</span></a> class and its methods:</p>
<div class="system-message" id="id40">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 293); <em><a href="#id41">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; t = timeit.Timer('char in text', setup='text = &quot;sample string&quot;; char = &quot;g&quot;')
&gt;&gt;&gt; t.timeit()
0.3955516149999312
&gt;&gt;&gt; t.repeat()
[0.40183617287970225, 0.37027556854118704, 0.38344867356679524, 0.3712595970846668, 0.37866875250654886]
</pre>
<p>The following examples show how to time expressions that contain multiple lines.
Here we compare the cost of using <a href="#id42"><span class="problematic" id="id43">:func:`hasattr`</span></a> vs. <a href="#id44"><span class="problematic" id="id45">:keyword:`try`</span></a>/<a href="#id46"><span class="problematic" id="id47">:keyword:`except`</span></a>
to test for missing and present object attributes:</p>
<div class="system-message" id="id42">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 303); <em><a href="#id43">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id44">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 303); <em><a href="#id45">backlink</a></em></p>
Unknown interpreted text role &quot;keyword&quot;.</div>
<div class="system-message" id="id46">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 303); <em><a href="#id47">backlink</a></em></p>
Unknown interpreted text role &quot;keyword&quot;.</div>
<pre class="code shell-session literal-block">
<span class="generic prompt">$ </span>python -m timeit <span class="literal string single">'try:'</span> <span class="literal string single">'  str.__bool__'</span> <span class="literal string single">'except AttributeError:'</span> <span class="literal string single">'  pass'</span>
<span class="generic output">20000 loops, best of 5: 15.7 usec per loop
</span><span class="generic prompt">$ </span>python -m timeit <span class="literal string single">'if hasattr(str, &quot;__bool__&quot;): pass'</span>
<span class="generic output">50000 loops, best of 5: 4.26 usec per loop

</span><span class="generic prompt">$ </span>python -m timeit <span class="literal string single">'try:'</span> <span class="literal string single">'  int.__bool__'</span> <span class="literal string single">'except AttributeError:'</span> <span class="literal string single">'  pass'</span>
<span class="generic output">200000 loops, best of 5: 1.43 usec per loop
</span><span class="generic prompt">$ </span>python -m timeit <span class="literal string single">'if hasattr(int, &quot;__bool__&quot;): pass'</span>
<span class="generic output">100000 loops, best of 5: 2.23 usec per loop</span>
</pre>
<pre class="literal-block">
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; # attribute is missing
&gt;&gt;&gt; s = &quot;&quot;&quot;\
... try:
...     str.__bool__
... except AttributeError:
...     pass
... &quot;&quot;&quot;
&gt;&gt;&gt; timeit.timeit(stmt=s, number=100000)
0.9138244460009446
&gt;&gt;&gt; s = &quot;if hasattr(str, '__bool__'): pass&quot;
&gt;&gt;&gt; timeit.timeit(stmt=s, number=100000)
0.5829014980008651
&gt;&gt;&gt;
&gt;&gt;&gt; # attribute is present
&gt;&gt;&gt; s = &quot;&quot;&quot;\
... try:
...     int.__bool__
... except AttributeError:
...     pass
... &quot;&quot;&quot;
&gt;&gt;&gt; timeit.timeit(stmt=s, number=100000)
0.04215312199994514
&gt;&gt;&gt; s = &quot;if hasattr(int, '__bool__'): pass&quot;
&gt;&gt;&gt; timeit.timeit(stmt=s, number=100000)
0.08588060699912603
</pre>
<p>To give the <a href="#id48"><span class="problematic" id="id49">:mod:`timeit`</span></a> module access to functions you define, you can pass a
<em>setup</em> parameter which contains an import statement:</p>
<div class="system-message" id="id48">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 349); <em><a href="#id49">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
def test():
    &quot;&quot;&quot;Stupid test function&quot;&quot;&quot;
    L = [i for i in range(100)]

if __name__ == '__main__':
    import timeit
    print(timeit.timeit(&quot;test()&quot;, setup=&quot;from __main__ import test&quot;))
</pre>
<p>Another option is to pass <a href="#id50"><span class="problematic" id="id51">:func:`globals`</span></a> to the  <em>globals</em> parameter, which will cause the code
to be executed within your current global namespace.  This can be more convenient
than individually specifying imports:</p>
<div class="system-message" id="id50">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">timeit.rst</tt>, line 360); <em><a href="#id51">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
def f(x):
    return x**2
def g(x):
    return x**4
def h(x):
    return x**8

import timeit
print(timeit.timeit('[func(42) for func in (f,g,h)]', globals=globals()))
</pre>
</div>
</div>
</body>
</html>
