<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`bdb` --- Debugger framework</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-bdb-debugger-framework">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`bdb`</span></a> --- Debugger framework</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: bdb
   :synopsis: Debugger framework.

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id3"><span class="problematic" id="id4">:source:`Lib/bdb.py`</span></a></p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 7); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<hr class="docutils" />
<p>The <a href="#id5"><span class="problematic" id="id6">:mod:`bdb`</span></a> module handles basic debugger functions, like setting breakpoints
or managing execution via the debugger.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 11); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>The following exception is defined:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 16)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: BdbQuit

   Exception raised by the :class:`Bdb` class for quitting the debugger.


</pre>
</div>
<p>The <a href="#id7"><span class="problematic" id="id8">:mod:`bdb`</span></a> module also defines two classes:</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 21); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p class="breakpoint-self file line temporary-0 cond-none funcname-none">This class implements temporary breakpoints, ignore counts, disabling and
(re-)enabling, and conditionals.</p>
<p class="breakpoint-self file line temporary-0 cond-none funcname-none">Breakpoints are indexed by number through a list called <a href="#id9"><span class="problematic" id="id10">:attr:`bpbynumber`</span></a>
and by <tt class="docutils literal">(file, line)</tt> pairs through <a href="#id11"><span class="problematic" id="id12">:attr:`bplist`</span></a>.  The former points to a
single instance of class <a href="#id13"><span class="problematic" id="id14">:class:`Breakpoint`</span></a>.  The latter points to a list of
such instances since there may be more than one breakpoint per line.</p>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 28); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 28); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 28); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="breakpoint-self file line temporary-0 cond-none funcname-none">When creating a breakpoint, its associated filename should be in canonical
form.  If a <em>funcname</em> is defined, a breakpoint hit will be counted when the
first line of that function is executed.  A conditional breakpoint always
counts a hit.</p>
<p class="breakpoint-self file line temporary-0 cond-none funcname-none"><a href="#id15"><span class="problematic" id="id16">:class:`Breakpoint`</span></a> instances have the following methods:</p>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 38); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 40)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: deleteMe()

   Delete the breakpoint from the list associated to a file/line.  If it is
   the last breakpoint in that position, it also deletes the entry for the
   file/line.


</pre>
</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 47)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: enable()

   Mark the breakpoint as enabled.


</pre>
</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 52)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: disable()

   Mark the breakpoint as disabled.


</pre>
</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 57)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: bpformat()

   Return a string with all the information about the breakpoint, nicely
   formatted:

   * The breakpoint number.
   * If it is temporary or not.
   * Its file,line position.
   * The condition that causes a break.
   * If it must be ignored the next N times.
   * The breakpoint hit count.

   .. versionadded:: 3.2

</pre>
</div>
<div class="breakpoint-self file line temporary-0 cond-none funcname-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 71)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: bpprint(out=None)

   Print the output of :meth:`bpformat` to the file *out*, or if it is
   ``None``, to standard output.
</pre>
</div>
<p class="bdb-skip-none">The <a href="#id17"><span class="problematic" id="id18">:class:`Bdb`</span></a> class acts as a generic Python debugger base class.</p>
<div class="bdb-skip-none system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 79); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="bdb-skip-none">This class takes care of the details of the trace facility; a derived class
should implement user interaction.  The standard debugger class
(<a href="#id19"><span class="problematic" id="id20">:class:`pdb.Pdb`</span></a>) is an example.</p>
<div class="bdb-skip-none system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 81); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="bdb-skip-none">The <em>skip</em> argument, if given, must be an iterable of glob-style
module name patterns.  The debugger will not step into frames that
originate in a module that matches one of these patterns. Whether a
frame is considered to originate in a certain module is determined
by the <tt class="docutils literal">__name__</tt> in the frame globals.</p>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 91)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.1
   The *skip* argument.

</pre>
</div>
<p class="bdb-skip-none">The following methods of <a href="#id21"><span class="problematic" id="id22">:class:`Bdb`</span></a> normally don't need to be overridden.</p>
<div class="bdb-skip-none system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 94); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 96)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: canonic(filename)

   Auxiliary method for getting a filename in a canonical form, that is, as a
   case-normalized (on case-insensitive filesystems) absolute path, stripped
   of surrounding angle brackets.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 102)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: reset()

   Set the :attr:`botframe`, :attr:`stopframe`, :attr:`returnframe` and
   :attr:`quitting` attributes with values ready to start debugging.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 107)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: trace_dispatch(frame, event, arg)

   This function is installed as the trace function of debugged frames.  Its
   return value is the new trace function (in most cases, that is, itself).

   The default implementation decides how to dispatch a frame, depending on
   the type of event (passed as a string) that is about to be executed.
   *event* can be one of the following:

   * ``&quot;line&quot;``: A new line of code is going to be executed.
   * ``&quot;call&quot;``: A function is about to be called, or another code block
     entered.
   * ``&quot;return&quot;``: A function or other code block is about to return.
   * ``&quot;exception&quot;``: An exception has occurred.
   * ``&quot;c_call&quot;``: A C function is about to be called.
   * ``&quot;c_return&quot;``: A C function has returned.
   * ``&quot;c_exception&quot;``: A C function has raised an exception.

   For the Python events, specialized functions (see below) are called.  For
   the C events, no action is taken.

   The *arg* parameter depends on the previous event.

   See the documentation for :func:`sys.settrace` for more information on the
   trace function.  For more information on code and frame objects, refer to
   :ref:`types`.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 134)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: dispatch_line(frame)

   If the debugger should stop on the current line, invoke the
   :meth:`user_line` method (which should be overridden in subclasses).
   Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
   (which can be set from :meth:`user_line`).  Return a reference to the
   :meth:`trace_dispatch` method for further tracing in that scope.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 142)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: dispatch_call(frame, arg)

   If the debugger should stop on this function call, invoke the
   :meth:`user_call` method (which should be overridden in subclasses).
   Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
   (which can be set from :meth:`user_call`).  Return a reference to the
   :meth:`trace_dispatch` method for further tracing in that scope.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 150)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: dispatch_return(frame, arg)

   If the debugger should stop on this function return, invoke the
   :meth:`user_return` method (which should be overridden in subclasses).
   Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
   (which can be set from :meth:`user_return`).  Return a reference to the
   :meth:`trace_dispatch` method for further tracing in that scope.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 158)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: dispatch_exception(frame, arg)

   If the debugger should stop at this exception, invokes the
   :meth:`user_exception` method (which should be overridden in subclasses).
   Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set
   (which can be set from :meth:`user_exception`).  Return a reference to the
   :meth:`trace_dispatch` method for further tracing in that scope.

</pre>
</div>
<p class="bdb-skip-none">Normally derived classes don't override the following methods, but they may
if they want to redefine the definition of stopping and breakpoints.</p>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 169)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: stop_here(frame)

   This method checks if the *frame* is somewhere below :attr:`botframe` in
   the call stack.  :attr:`botframe` is the frame in which debugging started.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 174)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: break_here(frame)

   This method checks if there is a breakpoint in the filename and line
   belonging to *frame* or, at least, in the current function.  If the
   breakpoint is a temporary one, this method deletes it.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 180)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: break_anywhere(frame)

   This method checks if there is a breakpoint in the filename of the current
   frame.

</pre>
</div>
<p class="bdb-skip-none">Derived classes should override these methods to gain control over debugger
operation.</p>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 188)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: user_call(frame, argument_list)

   This method is called from :meth:`dispatch_call` when there is the
   possibility that a break might be necessary anywhere inside the called
   function.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 194)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: user_line(frame)

   This method is called from :meth:`dispatch_line` when either
   :meth:`stop_here` or :meth:`break_here` yields ``True``.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 199)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: user_return(frame, return_value)

   This method is called from :meth:`dispatch_return` when :meth:`stop_here`
   yields ``True``.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 204)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: user_exception(frame, exc_info)

   This method is called from :meth:`dispatch_exception` when
   :meth:`stop_here` yields ``True``.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 209)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: do_clear(arg)

   Handle how a breakpoint must be removed when it is a temporary one.

   This method must be implemented by derived classes.


</pre>
</div>
<p class="bdb-skip-none">Derived classes and clients can call the following methods to affect the
stepping state.</p>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 219)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_step()

   Stop after one line of code.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 223)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_next(frame)

   Stop on the next line in or below the given frame.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 227)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_return(frame)

   Stop when returning from the given frame.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 231)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_until(frame)

   Stop when the line with the line no greater than the current one is
   reached or when returning from current frame.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 236)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_trace([frame])

   Start debugging from *frame*.  If *frame* is not specified, debugging
   starts from caller's frame.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 241)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_continue()

   Stop only at breakpoints or when finished.  If there are no breakpoints,
   set the system trace function to ``None``.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 246)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_quit()

   Set the :attr:`quitting` attribute to ``True``.  This raises :exc:`BdbQuit` in
   the next call to one of the :meth:`dispatch_\*` methods.


</pre>
</div>
<p class="bdb-skip-none">Derived classes and clients can call the following methods to manipulate
breakpoints.  These methods return a string containing an error message if
something went wrong, or <tt class="docutils literal">None</tt> if all is well.</p>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 256)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set_break(filename, lineno, temporary=0, cond, funcname)

   Set a new breakpoint.  If the *lineno* line doesn't exist for the
   *filename* passed as argument, return an error message.  The *filename*
   should be in canonical form, as described in the :meth:`canonic` method.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 262)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: clear_break(filename, lineno)

   Delete the breakpoints in *filename* and *lineno*.  If none were set, an
   error message is returned.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 267)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: clear_bpbynumber(arg)

   Delete the breakpoint which has the index *arg* in the
   :attr:`Breakpoint.bpbynumber`.  If *arg* is not numeric or out of range,
   return an error message.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 273)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: clear_all_file_breaks(filename)

   Delete all breakpoints in *filename*.  If none were set, an error message
   is returned.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 278)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: clear_all_breaks()

   Delete all existing breakpoints.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 282)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get_bpbynumber(arg)

   Return a breakpoint specified by the given number.  If *arg* is a string,
   it will be converted to a number.  If *arg* is a non-numeric string, if
   the given breakpoint never existed or has been deleted, a
   :exc:`ValueError` is raised.

   .. versionadded:: 3.2

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 291)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get_break(filename, lineno)

   Check if there is a breakpoint for *lineno* of *filename*.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 295)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get_breaks(filename, lineno)

   Return all breakpoints for *lineno* in *filename*, or an empty list if
   none are set.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 300)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get_file_breaks(filename)

   Return all breakpoints in *filename*, or an empty list if none are set.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 304)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get_all_breaks()

   Return all breakpoints that are set.


</pre>
</div>
<p class="bdb-skip-none">Derived classes and clients can call the following methods to get a data
structure representing a stack trace.</p>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 312)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: get_stack(f, t)

   Get a list of records for a frame and all higher (calling) and lower
   frames, and the size of the higher part.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 317)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: format_stack_entry(frame_lineno, lprefix=': ')

   Return a string with information about a stack entry, identified by a
   ``(frame, lineno)`` tuple:

   * The canonical form of the filename which contains the frame.
   * The function name, or ``&quot;&lt;lambda&gt;&quot;``.
   * The input arguments.
   * The return value.
   * The line of code (if it exists).


</pre>
</div>
<p class="bdb-skip-none">The following two methods can be called by clients to use a debugger to debug
a <a href="#id23"><span class="problematic" id="id24">:term:`statement`</span></a>, given as a string.</p>
<div class="bdb-skip-none system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 329); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 332)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: run(cmd, globals=None, locals=None)

   Debug a statement executed via the :func:`exec` function.  *globals*
   defaults to :attr:`__main__.__dict__`, *locals* defaults to *globals*.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 337)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: runeval(expr, globals=None, locals=None)

   Debug an expression executed via the :func:`eval` function.  *globals* and
   *locals* have the same meaning as in :meth:`run`.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 342)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: runctx(cmd, globals, locals)

   For backwards compatibility.  Calls the :meth:`run` method.

</pre>
</div>
<div class="bdb-skip-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 346)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: runcall(func, /, *args, **kwds)

   Debug a single function call, and return its result.
</pre>
</div>
<p>Finally, the module defines the following functions:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 353)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: checkfuncname(b, frame)

   Check whether we should break here, depending on the way the breakpoint *b*
   was set.

   If it was set via line number, it checks if ``b.line`` is the same as the one
   in the frame also passed as argument.  If the breakpoint was set via function
   name, we have to check we are in the right frame (the right function) and if
   we are in its first executable line.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 363)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: effective(file, line, frame)

   Determine if there is an effective (active) breakpoint at this line of code.
   Return a tuple of the breakpoint and a boolean that indicates if it is ok
   to delete a temporary breakpoint.  Return ``(None, None)`` if there is no
   matching breakpoint.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">bdb.rst</tt>, line 370)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: set_trace()

   Start debugging with a :class:`Bdb` instance from caller's frame.
</pre>
</div>
</div>
</body>
</html>
