<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>:mod:`ctypes` --- A foreign function library for Python</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="mod-ctypes-a-foreign-function-library-for-python">
<h1 class="title"><a href="#id1"><span class="problematic" id="id2">:mod:`ctypes`</span></a> --- A foreign function library for Python</h1>

<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 4)</p>
<p>Unknown directive type &quot;module&quot;.</p>
<pre class="literal-block">
.. module:: ctypes
   :synopsis: A foreign function library for Python.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 7)</p>
<p>Unknown directive type &quot;moduleauthor&quot;.</p>
<pre class="literal-block">
.. moduleauthor:: Thomas Heller &lt;theller&#64;python.net&gt;

</pre>
</div>
<hr class="docutils" />
<p><a href="#id3"><span class="problematic" id="id4">:mod:`ctypes`</span></a> is a foreign function library for Python.  It provides C compatible
data types, and allows calling functions in DLLs or shared libraries.  It can be
used to wrap these libraries in pure Python.</p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 11); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="section" id="ctypes-tutorial">
<span id="ctypes-ctypes-tutorial"></span><h1>ctypes tutorial</h1>
<p>Note: The code samples in this tutorial use <a href="#id5"><span class="problematic" id="id6">:mod:`doctest`</span></a> to make sure that
they actually work.  Since some code samples behave differently under Linux,
Windows, or Mac OS X, they contain doctest directives in comments.</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 21); <em><a href="#id6">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>Note: Some code samples reference the ctypes <a href="#id7"><span class="problematic" id="id8">:class:`c_int`</span></a> type.  On platforms
where <tt class="docutils literal">sizeof(long) == sizeof(int)</tt> it is an alias to <a href="#id9"><span class="problematic" id="id10">:class:`c_long`</span></a>.
So, you should not be confused if <a href="#id11"><span class="problematic" id="id12">:class:`c_long`</span></a> is printed if you would expect
<a href="#id13"><span class="problematic" id="id14">:class:`c_int`</span></a> --- they are actually the same type.</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 25); <em><a href="#id8">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 25); <em><a href="#id10">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 25); <em><a href="#id12">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 25); <em><a href="#id14">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="section" id="loading-dynamic-link-libraries">
<span id="ctypes-loading-dynamic-link-libraries"></span><h2>Loading dynamic link libraries</h2>
<p><a href="#id15"><span class="problematic" id="id16">:mod:`ctypes`</span></a> exports the <em>cdll</em>, and on Windows <em>windll</em> and <em>oledll</em>
objects, for loading dynamic link libraries.</p>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 35); <em><a href="#id16">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>You load libraries by accessing them as attributes of these objects. <em>cdll</em>
loads libraries which export functions using the standard <tt class="docutils literal">cdecl</tt> calling
convention, while <em>windll</em> libraries call functions using the <tt class="docutils literal">stdcall</tt>
calling convention. <em>oledll</em> also uses the <tt class="docutils literal">stdcall</tt> calling convention, and
assumes the functions return a Windows <a href="#id17"><span class="problematic" id="id18">:c:type:`HRESULT`</span></a> error code. The error
code is used to automatically raise an <a href="#id19"><span class="problematic" id="id20">:class:`OSError`</span></a> exception when the
function call fails.</p>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 38); <em><a href="#id18">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 38); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 46)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.3
   Windows errors used to raise :exc:`WindowsError`, which is now an alias
   of :exc:`OSError`.


</pre>
</div>
<p>Here are some examples for Windows. Note that <tt class="docutils literal">msvcrt</tt> is the MS standard C
library containing most standard C functions, and uses the cdecl calling
convention:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; print(windll.kernel32)  # doctest: +WINDOWS
&lt;WinDLL 'kernel32', handle ... at ...&gt;
&gt;&gt;&gt; print(cdll.msvcrt)      # doctest: +WINDOWS
&lt;CDLL 'msvcrt', handle ... at ...&gt;
&gt;&gt;&gt; libc = cdll.msvcrt      # doctest: +WINDOWS
&gt;&gt;&gt;
</pre>
<p>Windows appends the usual <tt class="docutils literal">.dll</tt> file suffix automatically.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Accessing the standard C library through <tt class="docutils literal">cdll.msvcrt</tt> will use an
outdated version of the library that may be incompatible with the one
being used by Python. Where possible, use native Python functionality,
or else import and use the <tt class="docutils literal">msvcrt</tt> module.</p>
</div>
<p>On Linux, it is required to specify the filename <em>including</em> the extension to
load a library, so attribute access can not be used to load libraries. Either the
<a href="#id21"><span class="problematic" id="id22">:meth:`LoadLibrary`</span></a> method of the dll loaders should be used, or you should load
the library by creating an instance of CDLL by calling the constructor:</p>
<div class="system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 71); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; cdll.LoadLibrary(&quot;libc.so.6&quot;)  # doctest: +LINUX
&lt;CDLL 'libc.so.6', handle ... at ...&gt;
&gt;&gt;&gt; libc = CDLL(&quot;libc.so.6&quot;)       # doctest: +LINUX
&gt;&gt;&gt; libc                           # doctest: +LINUX
&lt;CDLL 'libc.so.6', handle ... at ...&gt;
&gt;&gt;&gt;
</pre>
<!-- XXX Add section for Mac OS X. -->
</div>
<div class="section" id="accessing-functions-from-loaded-dlls">
<span id="ctypes-accessing-functions-from-loaded-dlls"></span><h2>Accessing functions from loaded dlls</h2>
<p>Functions are accessed as attributes of dll objects:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; libc.printf
&lt;_FuncPtr object at 0x...&gt;
&gt;&gt;&gt; print(windll.kernel32.GetModuleHandleA)  # doctest: +WINDOWS
&lt;_FuncPtr object at 0x...&gt;
&gt;&gt;&gt; print(windll.kernel32.MyOwnFunction)     # doctest: +WINDOWS
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;ctypes.py&quot;, line 239, in __getattr__
    func = _StdcallFuncPtr(name, self)
AttributeError: function 'MyOwnFunction' not found
&gt;&gt;&gt;
</pre>
<p>Note that win32 system dlls like <tt class="docutils literal">kernel32</tt> and <tt class="docutils literal">user32</tt> often export ANSI
as well as UNICODE versions of a function. The UNICODE version is exported with
an <tt class="docutils literal">W</tt> appended to the name, while the ANSI version is exported with an <tt class="docutils literal">A</tt>
appended to the name. The win32 <tt class="docutils literal">GetModuleHandle</tt> function, which returns a
<em>module handle</em> for a given module name, has the following C prototype, and a
macro is used to expose one of them as <tt class="docutils literal">GetModuleHandle</tt> depending on whether
UNICODE is defined or not:</p>
<pre class="literal-block">
/* ANSI version */
HMODULE GetModuleHandleA(LPCSTR lpModuleName);
/* UNICODE version */
HMODULE GetModuleHandleW(LPCWSTR lpModuleName);
</pre>
<p><em>windll</em> does not try to select one of them by magic, you must access the
version you need by specifying <tt class="docutils literal">GetModuleHandleA</tt> or <tt class="docutils literal">GetModuleHandleW</tt>
explicitly, and then call it with bytes or string objects respectively.</p>
<p>Sometimes, dlls export functions with names which aren't valid Python
identifiers, like <tt class="docutils literal"><span class="pre">&quot;??2&#64;YAPAXI&#64;Z&quot;</span></tt>. In this case you have to use
<a href="#id23"><span class="problematic" id="id24">:func:`getattr`</span></a> to retrieve the function:</p>
<div class="system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 123); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; getattr(cdll.msvcrt, &quot;??2&#64;YAPAXI&#64;Z&quot;)  # doctest: +WINDOWS
&lt;_FuncPtr object at 0x...&gt;
&gt;&gt;&gt;
</pre>
<p>On Windows, some dlls export functions not by name but by ordinal. These
functions can be accessed by indexing the dll object with the ordinal number:</p>
<pre class="literal-block">
&gt;&gt;&gt; cdll.kernel32[1]  # doctest: +WINDOWS
&lt;_FuncPtr object at 0x...&gt;
&gt;&gt;&gt; cdll.kernel32[0]  # doctest: +WINDOWS
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;ctypes.py&quot;, line 310, in __getitem__
    func = _StdcallFuncPtr(name, self)
AttributeError: function ordinal 0 not found
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="calling-functions">
<span id="ctypes-calling-functions"></span><h2>Calling functions</h2>
<p>You can call these functions like any other Python callable. This example uses
the <tt class="docutils literal">time()</tt> function, which returns system time in seconds since the Unix
epoch, and the <tt class="docutils literal">GetModuleHandleA()</tt> function, which returns a win32 module
handle.</p>
<p>This example calls both functions with a <tt class="docutils literal">NULL</tt> pointer (<tt class="docutils literal">None</tt> should be used
as the <tt class="docutils literal">NULL</tt> pointer):</p>
<pre class="literal-block">
&gt;&gt;&gt; print(libc.time(None))  # doctest: +SKIP
1150640792
&gt;&gt;&gt; print(hex(windll.kernel32.GetModuleHandleA(None)))  # doctest: +WINDOWS
0x1d000000
&gt;&gt;&gt;
</pre>
<p><a href="#id25"><span class="problematic" id="id26">:exc:`ValueError`</span></a> is raised when you call an <tt class="docutils literal">stdcall</tt> function with the
<tt class="docutils literal">cdecl</tt> calling convention, or vice versa:</p>
<div class="system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 164); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;exc&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; cdll.kernel32.GetModuleHandleA(None)  # doctest: +WINDOWS
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: Procedure probably called with not enough arguments (4 bytes missing)
&gt;&gt;&gt;

&gt;&gt;&gt; windll.msvcrt.printf(b&quot;spam&quot;)  # doctest: +WINDOWS
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: Procedure probably called with too many arguments (4 bytes in excess)
&gt;&gt;&gt;
</pre>
<p>To find out the correct calling convention you have to look into the C header
file or the documentation for the function you want to call.</p>
<p>On Windows, <a href="#id27"><span class="problematic" id="id28">:mod:`ctypes`</span></a> uses win32 structured exception handling to prevent
crashes from general protection faults when functions are called with invalid
argument values:</p>
<div class="system-message" id="id27">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 182); <em><a href="#id28">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; windll.kernel32.GetModuleHandleA(32)  # doctest: +WINDOWS
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
OSError: exception: access violation reading 0x00000020
&gt;&gt;&gt;
</pre>
<p>There are, however, enough ways to crash Python with <a href="#id29"><span class="problematic" id="id30">:mod:`ctypes`</span></a>, so you
should be careful anyway.  The <a href="#id31"><span class="problematic" id="id32">:mod:`faulthandler`</span></a> module can be helpful in
debugging crashes (e.g. from segmentation faults produced by erroneous C library
calls).</p>
<div class="system-message" id="id29">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 192); <em><a href="#id30">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id31">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 192); <em><a href="#id32">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p><tt class="docutils literal">None</tt>, integers, bytes objects and (unicode) strings are the only native
Python objects that can directly be used as parameters in these function calls.
<tt class="docutils literal">None</tt> is passed as a C <tt class="docutils literal">NULL</tt> pointer, bytes objects and strings are passed
as pointer to the memory block that contains their data (<a href="#id33"><span class="problematic" id="id34">:c:type:`char *`</span></a> or
<a href="#id35"><span class="problematic" id="id36">:c:type:`wchar_t *`</span></a>).  Python integers are passed as the platforms default C
<a href="#id37"><span class="problematic" id="id38">:c:type:`int`</span></a> type, their value is masked to fit into the C type.</p>
<div class="system-message" id="id33">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 197); <em><a href="#id34">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id35">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 197); <em><a href="#id36">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id37">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 197); <em><a href="#id38">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p>Before we move on calling functions with other parameter types, we have to learn
more about <a href="#id39"><span class="problematic" id="id40">:mod:`ctypes`</span></a> data types.</p>
<div class="system-message" id="id39">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 204); <em><a href="#id40">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
</div>
<div class="section" id="fundamental-data-types">
<span id="ctypes-fundamental-data-types"></span><h2>Fundamental data types</h2>
<p><a href="#id41"><span class="problematic" id="id42">:mod:`ctypes`</span></a> defines a number of primitive C compatible data types:</p>
<div class="system-message" id="id41">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 213); <em><a href="#id42">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<table border="1" class="docutils">
<colgroup>
<col width="24%" />
<col width="46%" />
<col width="30%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">ctypes type</th>
<th class="head">C type</th>
<th class="head">Python type</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><p class="first"><a href="#id43"><span class="problematic" id="id44">:class:`c_bool`</span></a></p>
<div class="last system-message" id="id43">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 219); <em><a href="#id44">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id45"><span class="problematic" id="id46">:c:type:`_Bool`</span></a></p>
<div class="last system-message" id="id45">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 219); <em><a href="#id46">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>bool (1)</td>
</tr>
<tr><td><p class="first"><a href="#id47"><span class="problematic" id="id48">:class:`c_char`</span></a></p>
<div class="last system-message" id="id47">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 221); <em><a href="#id48">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id49"><span class="problematic" id="id50">:c:type:`char`</span></a></p>
<div class="last system-message" id="id49">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 221); <em><a href="#id50">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>1-character bytes object</td>
</tr>
<tr><td><p class="first"><a href="#id51"><span class="problematic" id="id52">:class:`c_wchar`</span></a></p>
<div class="last system-message" id="id51">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 223); <em><a href="#id52">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id53"><span class="problematic" id="id54">:c:type:`wchar_t`</span></a></p>
<div class="last system-message" id="id53">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 223); <em><a href="#id54">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>1-character string</td>
</tr>
<tr><td><p class="first"><a href="#id55"><span class="problematic" id="id56">:class:`c_byte`</span></a></p>
<div class="last system-message" id="id55">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 225); <em><a href="#id56">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id57"><span class="problematic" id="id58">:c:type:`char`</span></a></p>
<div class="last system-message" id="id57">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 225); <em><a href="#id58">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id59"><span class="problematic" id="id60">:class:`c_ubyte`</span></a></p>
<div class="last system-message" id="id59">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 227); <em><a href="#id60">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id61"><span class="problematic" id="id62">:c:type:`unsigned char`</span></a></p>
<div class="last system-message" id="id61">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 227); <em><a href="#id62">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id63"><span class="problematic" id="id64">:class:`c_short`</span></a></p>
<div class="last system-message" id="id63">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 229); <em><a href="#id64">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id65"><span class="problematic" id="id66">:c:type:`short`</span></a></p>
<div class="last system-message" id="id65">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 229); <em><a href="#id66">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id67"><span class="problematic" id="id68">:class:`c_ushort`</span></a></p>
<div class="last system-message" id="id67">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 231); <em><a href="#id68">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id69"><span class="problematic" id="id70">:c:type:`unsigned short`</span></a></p>
<div class="last system-message" id="id69">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 231); <em><a href="#id70">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id71"><span class="problematic" id="id72">:class:`c_int`</span></a></p>
<div class="last system-message" id="id71">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 233); <em><a href="#id72">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id73"><span class="problematic" id="id74">:c:type:`int`</span></a></p>
<div class="last system-message" id="id73">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 233); <em><a href="#id74">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id75"><span class="problematic" id="id76">:class:`c_uint`</span></a></p>
<div class="last system-message" id="id75">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 235); <em><a href="#id76">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id77"><span class="problematic" id="id78">:c:type:`unsigned int`</span></a></p>
<div class="last system-message" id="id77">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 235); <em><a href="#id78">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id79"><span class="problematic" id="id80">:class:`c_long`</span></a></p>
<div class="last system-message" id="id79">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 237); <em><a href="#id80">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id81"><span class="problematic" id="id82">:c:type:`long`</span></a></p>
<div class="last system-message" id="id81">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 237); <em><a href="#id82">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id83"><span class="problematic" id="id84">:class:`c_ulong`</span></a></p>
<div class="last system-message" id="id83">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 239); <em><a href="#id84">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id85"><span class="problematic" id="id86">:c:type:`unsigned long`</span></a></p>
<div class="last system-message" id="id85">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 239); <em><a href="#id86">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id87"><span class="problematic" id="id88">:class:`c_longlong`</span></a></p>
<div class="last system-message" id="id87">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 241); <em><a href="#id88">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id89"><span class="problematic" id="id90">:c:type:`__int64`</span></a> or <a href="#id91"><span class="problematic" id="id92">:c:type:`long long`</span></a></p>
<div class="system-message" id="id89">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 241); <em><a href="#id90">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="last system-message" id="id91">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 241); <em><a href="#id92">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id93"><span class="problematic" id="id94">:class:`c_ulonglong`</span></a></p>
<div class="last system-message" id="id93">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 243); <em><a href="#id94">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id95"><span class="problematic" id="id96">:c:type:`unsigned __int64`</span></a> or
<a href="#id97"><span class="problematic" id="id98">:c:type:`unsigned long long`</span></a></p>
<div class="system-message" id="id95">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 243); <em><a href="#id96">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="last system-message" id="id97">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 243); <em><a href="#id98">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id99"><span class="problematic" id="id100">:class:`c_size_t`</span></a></p>
<div class="last system-message" id="id99">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 246); <em><a href="#id100">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id101"><span class="problematic" id="id102">:c:type:`size_t`</span></a></p>
<div class="last system-message" id="id101">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 246); <em><a href="#id102">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id103"><span class="problematic" id="id104">:class:`c_ssize_t`</span></a></p>
<div class="last system-message" id="id103">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 248); <em><a href="#id104">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id105"><span class="problematic" id="id106">:c:type:`ssize_t`</span></a> or
<a href="#id107"><span class="problematic" id="id108">:c:type:`Py_ssize_t`</span></a></p>
<div class="system-message" id="id105">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 248); <em><a href="#id106">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="last system-message" id="id107">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 248); <em><a href="#id108">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int</td>
</tr>
<tr><td><p class="first"><a href="#id109"><span class="problematic" id="id110">:class:`c_float`</span></a></p>
<div class="last system-message" id="id109">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 251); <em><a href="#id110">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id111"><span class="problematic" id="id112">:c:type:`float`</span></a></p>
<div class="last system-message" id="id111">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 251); <em><a href="#id112">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>float</td>
</tr>
<tr><td><p class="first"><a href="#id113"><span class="problematic" id="id114">:class:`c_double`</span></a></p>
<div class="last system-message" id="id113">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 253); <em><a href="#id114">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id115"><span class="problematic" id="id116">:c:type:`double`</span></a></p>
<div class="last system-message" id="id115">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 253); <em><a href="#id116">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>float</td>
</tr>
<tr><td><p class="first"><a href="#id117"><span class="problematic" id="id118">:class:`c_longdouble`</span></a></p>
<div class="last system-message" id="id117">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 255); <em><a href="#id118">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id119"><span class="problematic" id="id120">:c:type:`long double`</span></a></p>
<div class="last system-message" id="id119">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 255); <em><a href="#id120">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>float</td>
</tr>
<tr><td><p class="first"><a href="#id121"><span class="problematic" id="id122">:class:`c_char_p`</span></a></p>
<div class="last system-message" id="id121">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 257); <em><a href="#id122">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id123"><span class="problematic" id="id124">:c:type:`char *`</span></a> (NUL terminated)</p>
<div class="last system-message" id="id123">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 257); <em><a href="#id124">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>bytes object or <tt class="docutils literal">None</tt></td>
</tr>
<tr><td><p class="first"><a href="#id125"><span class="problematic" id="id126">:class:`c_wchar_p`</span></a></p>
<div class="last system-message" id="id125">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 259); <em><a href="#id126">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id127"><span class="problematic" id="id128">:c:type:`wchar_t *`</span></a> (NUL terminated)</p>
<div class="last system-message" id="id127">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 259); <em><a href="#id128">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>string or <tt class="docutils literal">None</tt></td>
</tr>
<tr><td><p class="first"><a href="#id129"><span class="problematic" id="id130">:class:`c_void_p`</span></a></p>
<div class="last system-message" id="id129">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 261); <em><a href="#id130">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</td>
<td><p class="first"><a href="#id131"><span class="problematic" id="id132">:c:type:`void *`</span></a></p>
<div class="last system-message" id="id131">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 261); <em><a href="#id132">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</td>
<td>int or <tt class="docutils literal">None</tt></td>
</tr>
</tbody>
</table>
<ol class="arabic simple">
<li>The constructor accepts any object with a truth value.</li>
</ol>
<p>All these types can be created by calling them with an optional initializer of
the correct type and value:</p>
<pre class="literal-block">
&gt;&gt;&gt; c_int()
c_long(0)
&gt;&gt;&gt; c_wchar_p(&quot;Hello, World&quot;)
c_wchar_p(140018365411392)
&gt;&gt;&gt; c_ushort(-3)
c_ushort(65533)
&gt;&gt;&gt;
</pre>
<p>Since these types are mutable, their value can also be changed afterwards:</p>
<pre class="literal-block">
&gt;&gt;&gt; i = c_int(42)
&gt;&gt;&gt; print(i)
c_long(42)
&gt;&gt;&gt; print(i.value)
42
&gt;&gt;&gt; i.value = -99
&gt;&gt;&gt; print(i.value)
-99
&gt;&gt;&gt;
</pre>
<p>Assigning a new value to instances of the pointer types <a href="#id133"><span class="problematic" id="id134">:class:`c_char_p`</span></a>,
<a href="#id135"><span class="problematic" id="id136">:class:`c_wchar_p`</span></a>, and <a href="#id137"><span class="problematic" id="id138">:class:`c_void_p`</span></a> changes the <em>memory location</em> they
point to, <em>not the contents</em> of the memory block (of course not, because Python
bytes objects are immutable):</p>
<div class="system-message" id="id133">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 289); <em><a href="#id134">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id135">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 289); <em><a href="#id136">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id137">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 289); <em><a href="#id138">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; s = &quot;Hello, World&quot;
&gt;&gt;&gt; c_s = c_wchar_p(s)
&gt;&gt;&gt; print(c_s)
c_wchar_p(139966785747344)
&gt;&gt;&gt; print(c_s.value)
Hello World
&gt;&gt;&gt; c_s.value = &quot;Hi, there&quot;
&gt;&gt;&gt; print(c_s)              # the memory location has changed
c_wchar_p(139966783348904)
&gt;&gt;&gt; print(c_s.value)
Hi, there
&gt;&gt;&gt; print(s)                # first object is unchanged
Hello, World
&gt;&gt;&gt;
</pre>
<p>You should be careful, however, not to pass them to functions expecting pointers
to mutable memory. If you need mutable memory blocks, ctypes has a
<a href="#id139"><span class="problematic" id="id140">:func:`create_string_buffer`</span></a> function which creates these in various ways.  The
current memory block contents can be accessed (or changed) with the <tt class="docutils literal">raw</tt>
property; if you want to access it as NUL terminated string, use the <tt class="docutils literal">value</tt>
property:</p>
<div class="system-message" id="id139">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 309); <em><a href="#id140">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; p = create_string_buffer(3)            # create a 3 byte buffer, initialized to NUL bytes
&gt;&gt;&gt; print(sizeof(p), repr(p.raw))
3 b'\x00\x00\x00'
&gt;&gt;&gt; p = create_string_buffer(b&quot;Hello&quot;)     # create a buffer containing a NUL terminated string
&gt;&gt;&gt; print(sizeof(p), repr(p.raw))
6 b'Hello\x00'
&gt;&gt;&gt; print(repr(p.value))
b'Hello'
&gt;&gt;&gt; p = create_string_buffer(b&quot;Hello&quot;, 10) # create a 10 byte buffer
&gt;&gt;&gt; print(sizeof(p), repr(p.raw))
10 b'Hello\x00\x00\x00\x00\x00'
&gt;&gt;&gt; p.value = b&quot;Hi&quot;
&gt;&gt;&gt; print(sizeof(p), repr(p.raw))
10 b'Hi\x00lo\x00\x00\x00\x00\x00'
&gt;&gt;&gt;
</pre>
<p>The <a href="#id141"><span class="problematic" id="id142">:func:`create_string_buffer`</span></a> function replaces the <a href="#id143"><span class="problematic" id="id144">:func:`c_buffer`</span></a> function
(which is still available as an alias), as well as the <a href="#id145"><span class="problematic" id="id146">:func:`c_string`</span></a> function
from earlier ctypes releases.  To create a mutable memory block containing
unicode characters of the C type <a href="#id147"><span class="problematic" id="id148">:c:type:`wchar_t`</span></a> use the
<a href="#id149"><span class="problematic" id="id150">:func:`create_unicode_buffer`</span></a> function.</p>
<div class="system-message" id="id141">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 333); <em><a href="#id142">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id143">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 333); <em><a href="#id144">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id145">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 333); <em><a href="#id146">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id147">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 333); <em><a href="#id148">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id149">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 333); <em><a href="#id150">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</div>
<div class="section" id="calling-functions-continued">
<span id="ctypes-calling-functions-continued"></span><h2>Calling functions, continued</h2>
<p>Note that printf prints to the real standard output channel, <em>not</em> to
<a href="#id151"><span class="problematic" id="id152">:data:`sys.stdout`</span></a>, so these examples will only work at the console prompt, not
from within <em>IDLE</em> or <em>PythonWin</em>:</p>
<div class="system-message" id="id151">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 345); <em><a href="#id152">backlink</a></em></p>
Unknown interpreted text role &quot;data&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; printf = libc.printf
&gt;&gt;&gt; printf(b&quot;Hello, %s\n&quot;, b&quot;World!&quot;)
Hello, World!
14
&gt;&gt;&gt; printf(b&quot;Hello, %S\n&quot;, &quot;World!&quot;)
Hello, World!
14
&gt;&gt;&gt; printf(b&quot;%d bottles of beer\n&quot;, 42)
42 bottles of beer
19
&gt;&gt;&gt; printf(b&quot;%f bottles of beer\n&quot;, 42.5)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2
&gt;&gt;&gt;
</pre>
<p>As has been mentioned before, all Python types except integers, strings, and
bytes objects have to be wrapped in their corresponding <a href="#id153"><span class="problematic" id="id154">:mod:`ctypes`</span></a> type, so
that they can be converted to the required C data type:</p>
<div class="system-message" id="id153">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 365); <em><a href="#id154">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; printf(b&quot;An int %d, a double %f\n&quot;, 1234, c_double(3.14))
An int 1234, a double 3.140000
31
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="calling-functions-with-your-own-custom-data-types">
<span id="ctypes-calling-functions-with-own-custom-data-types"></span><h2>Calling functions with your own custom data types</h2>
<p>You can also customize <a href="#id155"><span class="problematic" id="id156">:mod:`ctypes`</span></a> argument conversion to allow instances of
your own classes be used as function arguments.  <a href="#id157"><span class="problematic" id="id158">:mod:`ctypes`</span></a> looks for an
<a href="#id159"><span class="problematic" id="id160">:attr:`_as_parameter_`</span></a> attribute and uses this as the function argument.  Of
course, it must be one of integer, string, or bytes:</p>
<div class="system-message" id="id155">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 380); <em><a href="#id156">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id157">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 380); <em><a href="#id158">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id159">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 380); <em><a href="#id160">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; class Bottles:
...     def __init__(self, number):
...         self._as_parameter_ = number
...
&gt;&gt;&gt; bottles = Bottles(42)
&gt;&gt;&gt; printf(b&quot;%d bottles of beer\n&quot;, bottles)
42 bottles of beer
19
&gt;&gt;&gt;
</pre>
<p>If you don't want to store the instance's data in the <a href="#id161"><span class="problematic" id="id162">:attr:`_as_parameter_`</span></a>
instance variable, you could define a <a href="#id163"><span class="problematic" id="id164">:class:`property`</span></a> which makes the
attribute available on request.</p>
<div class="system-message" id="id161">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 395); <em><a href="#id162">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id163">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 395); <em><a href="#id164">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</div>
<div class="section" id="specifying-the-required-argument-types-function-prototypes">
<span id="ctypes-specifying-required-argument-types"></span><h2>Specifying the required argument types (function prototypes)</h2>
<p>It is possible to specify the required argument types of functions exported from
DLLs by setting the <a href="#id165"><span class="problematic" id="id166">:attr:`argtypes`</span></a> attribute.</p>
<div class="system-message" id="id165">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 405); <em><a href="#id166">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p><a href="#id167"><span class="problematic" id="id168">:attr:`argtypes`</span></a> must be a sequence of C data types (the <tt class="docutils literal">printf</tt> function is
probably not a good example here, because it takes a variable number and
different types of parameters depending on the format string, on the other hand
this is quite handy to experiment with this feature):</p>
<div class="system-message" id="id167">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 408); <em><a href="#id168">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; printf.argtypes = [c_char_p, c_char_p, c_int, c_double]
&gt;&gt;&gt; printf(b&quot;String '%s', Int %d, Double %f\n&quot;, b&quot;Hi&quot;, 10, 2.2)
String 'Hi', Int 10, Double 2.200000
37
&gt;&gt;&gt;
</pre>
<p>Specifying a format protects against incompatible argument types (just as a
prototype for a C function), and tries to convert the arguments to valid types:</p>
<pre class="literal-block">
&gt;&gt;&gt; printf(b&quot;%d %d %d&quot;, 1, 2, 3)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ArgumentError: argument 2: exceptions.TypeError: wrong type
&gt;&gt;&gt; printf(b&quot;%s %d %f\n&quot;, b&quot;X&quot;, 2, 3)
X 2 3.000000
13
&gt;&gt;&gt;
</pre>
<p>If you have defined your own classes which you pass to function calls, you have
to implement a <a href="#id169"><span class="problematic" id="id170">:meth:`from_param`</span></a> class method for them to be able to use them
in the <a href="#id171"><span class="problematic" id="id172">:attr:`argtypes`</span></a> sequence. The <a href="#id173"><span class="problematic" id="id174">:meth:`from_param`</span></a> class method receives
the Python object passed to the function call, it should do a typecheck or
whatever is needed to make sure this object is acceptable, and then return the
object itself, its <a href="#id175"><span class="problematic" id="id176">:attr:`_as_parameter_`</span></a> attribute, or whatever you want to
pass as the C function argument in this case. Again, the result should be an
integer, string, bytes, a <a href="#id177"><span class="problematic" id="id178">:mod:`ctypes`</span></a> instance, or an object with an
<a href="#id179"><span class="problematic" id="id180">:attr:`_as_parameter_`</span></a> attribute.</p>
<div class="system-message" id="id169">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 431); <em><a href="#id170">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id171">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 431); <em><a href="#id172">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id173">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 431); <em><a href="#id174">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="system-message" id="id175">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 431); <em><a href="#id176">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id177">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 431); <em><a href="#id178">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id179">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 431); <em><a href="#id180">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
</div>
<div class="section" id="return-types">
<span id="ctypes-return-types"></span><h2>Return types</h2>
<p>By default functions are assumed to return the C <a href="#id181"><span class="problematic" id="id182">:c:type:`int`</span></a> type.  Other
return types can be specified by setting the <a href="#id183"><span class="problematic" id="id184">:attr:`restype`</span></a> attribute of the
function object.</p>
<div class="system-message" id="id181">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 447); <em><a href="#id182">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id183">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 447); <em><a href="#id184">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p>Here is a more advanced example, it uses the <tt class="docutils literal">strchr</tt> function, which expects
a string pointer and a char, and returns a pointer to a string:</p>
<pre class="literal-block">
&gt;&gt;&gt; strchr = libc.strchr
&gt;&gt;&gt; strchr(b&quot;abcdef&quot;, ord(&quot;d&quot;))  # doctest: +SKIP
8059983
&gt;&gt;&gt; strchr.restype = c_char_p    # c_char_p is a pointer to a string
&gt;&gt;&gt; strchr(b&quot;abcdef&quot;, ord(&quot;d&quot;))
b'def'
&gt;&gt;&gt; print(strchr(b&quot;abcdef&quot;, ord(&quot;x&quot;)))
None
&gt;&gt;&gt;
</pre>
<p>If you want to avoid the <tt class="docutils literal"><span class="pre">ord(&quot;x&quot;)</span></tt> calls above, you can set the
<a href="#id185"><span class="problematic" id="id186">:attr:`argtypes`</span></a> attribute, and the second argument will be converted from a
single character Python bytes object into a C char:</p>
<div class="system-message" id="id185">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 464); <em><a href="#id186">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; strchr.restype = c_char_p
&gt;&gt;&gt; strchr.argtypes = [c_char_p, c_char]
&gt;&gt;&gt; strchr(b&quot;abcdef&quot;, b&quot;d&quot;)
'def'
&gt;&gt;&gt; strchr(b&quot;abcdef&quot;, b&quot;def&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ArgumentError: argument 2: exceptions.TypeError: one character string expected
&gt;&gt;&gt; print(strchr(b&quot;abcdef&quot;, b&quot;x&quot;))
None
&gt;&gt;&gt; strchr(b&quot;abcdef&quot;, b&quot;d&quot;)
'def'
&gt;&gt;&gt;
</pre>
<p>You can also use a callable Python object (a function or a class for example) as
the <a href="#id187"><span class="problematic" id="id188">:attr:`restype`</span></a> attribute, if the foreign function returns an integer.  The
callable will be called with the <em>integer</em> the C function returns, and the
result of this call will be used as the result of your function call. This is
useful to check for error return values and automatically raise an exception:</p>
<div class="system-message" id="id187">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 482); <em><a href="#id188">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; GetModuleHandle = windll.kernel32.GetModuleHandleA  # doctest: +WINDOWS
&gt;&gt;&gt; def ValidHandle(value):
...     if value == 0:
...         raise WinError()
...     return value
...
&gt;&gt;&gt;
&gt;&gt;&gt; GetModuleHandle.restype = ValidHandle  # doctest: +WINDOWS
&gt;&gt;&gt; GetModuleHandle(None)  # doctest: +WINDOWS
486539264
&gt;&gt;&gt; GetModuleHandle(&quot;something silly&quot;)  # doctest: +WINDOWS
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 3, in ValidHandle
OSError: [Errno 126] The specified module could not be found.
&gt;&gt;&gt;
</pre>
<p><tt class="docutils literal">WinError</tt> is a function which will call Windows <tt class="docutils literal">FormatMessage()</tt> api to
get the string representation of an error code, and <em>returns</em> an exception.
<tt class="docutils literal">WinError</tt> takes an optional error code parameter, if no one is used, it calls
<a href="#id189"><span class="problematic" id="id190">:func:`GetLastError`</span></a> to retrieve it.</p>
<div class="system-message" id="id189">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 505); <em><a href="#id190">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>Please note that a much more powerful error checking mechanism is available
through the <a href="#id191"><span class="problematic" id="id192">:attr:`errcheck`</span></a> attribute; see the reference manual for details.</p>
<div class="system-message" id="id191">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 510); <em><a href="#id192">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
</div>
<div class="section" id="passing-pointers-or-passing-parameters-by-reference">
<span id="ctypes-passing-pointers"></span><h2>Passing pointers (or: passing parameters by reference)</h2>
<p>Sometimes a C api function expects a <em>pointer</em> to a data type as parameter,
probably to write into the corresponding location, or if the data is too large
to be passed by value. This is also known as <em>passing parameters by reference</em>.</p>
<p><a href="#id193"><span class="problematic" id="id194">:mod:`ctypes`</span></a> exports the <a href="#id195"><span class="problematic" id="id196">:func:`byref`</span></a> function which is used to pass parameters
by reference.  The same effect can be achieved with the <a href="#id197"><span class="problematic" id="id198">:func:`pointer`</span></a> function,
although <a href="#id199"><span class="problematic" id="id200">:func:`pointer`</span></a> does a lot more work since it constructs a real pointer
object, so it is faster to use <a href="#id201"><span class="problematic" id="id202">:func:`byref`</span></a> if you don't need the pointer
object in Python itself:</p>
<div class="system-message" id="id193">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 523); <em><a href="#id194">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id195">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 523); <em><a href="#id196">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id197">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 523); <em><a href="#id198">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id199">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 523); <em><a href="#id200">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id201">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 523); <em><a href="#id202">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; i = c_int()
&gt;&gt;&gt; f = c_float()
&gt;&gt;&gt; s = create_string_buffer(b'\000' * 32)
&gt;&gt;&gt; print(i.value, f.value, repr(s.value))
0 0.0 b''
&gt;&gt;&gt; libc.sscanf(b&quot;1 3.14 Hello&quot;, b&quot;%d %f %s&quot;,
...             byref(i), byref(f), s)
3
&gt;&gt;&gt; print(i.value, f.value, repr(s.value))
1 3.1400001049 b'Hello'
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="structures-and-unions">
<span id="ctypes-structures-unions"></span><h2>Structures and unions</h2>
<p>Structures and unions must derive from the <a href="#id203"><span class="problematic" id="id204">:class:`Structure`</span></a> and <a href="#id205"><span class="problematic" id="id206">:class:`Union`</span></a>
base classes which are defined in the <a href="#id207"><span class="problematic" id="id208">:mod:`ctypes`</span></a> module. Each subclass must
define a <a href="#id209"><span class="problematic" id="id210">:attr:`_fields_`</span></a> attribute.  <a href="#id211"><span class="problematic" id="id212">:attr:`_fields_`</span></a> must be a list of
<em>2-tuples</em>, containing a <em>field name</em> and a <em>field type</em>.</p>
<div class="system-message" id="id203">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 547); <em><a href="#id204">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id205">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 547); <em><a href="#id206">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id207">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 547); <em><a href="#id208">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id209">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 547); <em><a href="#id210">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id211">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 547); <em><a href="#id212">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p>The field type must be a <a href="#id213"><span class="problematic" id="id214">:mod:`ctypes`</span></a> type like <a href="#id215"><span class="problematic" id="id216">:class:`c_int`</span></a>, or any other
derived <a href="#id217"><span class="problematic" id="id218">:mod:`ctypes`</span></a> type: structure, union, array, pointer.</p>
<div class="system-message" id="id213">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 552); <em><a href="#id214">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id215">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 552); <em><a href="#id216">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id217">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 552); <em><a href="#id218">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>Here is a simple example of a POINT structure, which contains two integers named
<em>x</em> and <em>y</em>, and also shows how to initialize a structure in the constructor:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; class POINT(Structure):
...     _fields_ = [(&quot;x&quot;, c_int),
...                 (&quot;y&quot;, c_int)]
...
&gt;&gt;&gt; point = POINT(10, 20)
&gt;&gt;&gt; print(point.x, point.y)
10 20
&gt;&gt;&gt; point = POINT(y=5)
&gt;&gt;&gt; print(point.x, point.y)
0 5
&gt;&gt;&gt; POINT(1, 2, 3)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: too many initializers
&gt;&gt;&gt;
</pre>
<p>You can, however, build much more complicated structures.  A structure can
itself contain other structures by using a structure as a field type.</p>
<p>Here is a RECT structure which contains two POINTs named <em>upperleft</em> and
<em>lowerright</em>:</p>
<pre class="literal-block">
&gt;&gt;&gt; class RECT(Structure):
...     _fields_ = [(&quot;upperleft&quot;, POINT),
...                 (&quot;lowerright&quot;, POINT)]
...
&gt;&gt;&gt; rc = RECT(point)
&gt;&gt;&gt; print(rc.upperleft.x, rc.upperleft.y)
0 5
&gt;&gt;&gt; print(rc.lowerright.x, rc.lowerright.y)
0 0
&gt;&gt;&gt;
</pre>
<p>Nested structures can also be initialized in the constructor in several ways:</p>
<pre class="literal-block">
&gt;&gt;&gt; r = RECT(POINT(1, 2), POINT(3, 4))
&gt;&gt;&gt; r = RECT((1, 2), (3, 4))
</pre>
<p>Field <a href="#id219"><span class="problematic" id="id220">:term:`descriptor`</span></a>s can be retrieved from the <em>class</em>, they are useful
for debugging because they can provide useful information:</p>
<div class="system-message" id="id219">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 597); <em><a href="#id220">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; print(POINT.x)
&lt;Field type=c_long, ofs=0, size=4&gt;
&gt;&gt;&gt; print(POINT.y)
&lt;Field type=c_long, ofs=4, size=4&gt;
&gt;&gt;&gt;
</pre>
<div class="admonition warning" id="ctypes-structureunion-alignment-byte-order">
<p class="first admonition-title">Warning</p>
<p><a href="#id221"><span class="problematic" id="id222">:mod:`ctypes`</span></a> does not support passing unions or structures with bit-fields
to functions by value.  While this may work on 32-bit x86, it's not
guaranteed by the library to work in the general case.  Unions and
structures with bit-fields should always be passed to functions by pointer.</p>
<div class="last system-message" id="id221">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 611); <em><a href="#id222">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
</div>
</div>
<div class="section" id="structure-union-alignment-and-byte-order">
<h2>Structure/union alignment and byte order</h2>
<p>By default, Structure and Union fields are aligned in the same way the C
compiler does it. It is possible to override this behavior by specifying a
<a href="#id223"><span class="problematic" id="id224">:attr:`_pack_`</span></a> class attribute in the subclass definition. This must be set to a
positive integer and specifies the maximum alignment for the fields. This is
what <tt class="docutils literal">#pragma pack(n)</tt> also does in MSVC.</p>
<div class="system-message" id="id223">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 619); <em><a href="#id224">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p><a href="#id225"><span class="problematic" id="id226">:mod:`ctypes`</span></a> uses the native byte order for Structures and Unions.  To build
structures with non-native byte order, you can use one of the
<a href="#id227"><span class="problematic" id="id228">:class:`BigEndianStructure`</span></a>, <a href="#id229"><span class="problematic" id="id230">:class:`LittleEndianStructure`</span></a>,
<a href="#id231"><span class="problematic" id="id232">:class:`BigEndianUnion`</span></a>, and <a href="#id233"><span class="problematic" id="id234">:class:`LittleEndianUnion`</span></a> base classes.  These
classes cannot contain pointer fields.</p>
<div class="system-message" id="id225">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 625); <em><a href="#id226">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id227">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 625); <em><a href="#id228">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id229">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 625); <em><a href="#id230">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id231">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 625); <em><a href="#id232">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id233">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 625); <em><a href="#id234">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</div>
<div class="section" id="bit-fields-in-structures-and-unions">
<span id="ctypes-bit-fields-in-structures-unions"></span><h2>Bit fields in structures and unions</h2>
<p>It is possible to create structures and unions containing bit fields. Bit fields
are only possible for integer fields, the bit width is specified as the third
item in the <a href="#id235"><span class="problematic" id="id236">:attr:`_fields_`</span></a> tuples:</p>
<div class="system-message" id="id235">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 637); <em><a href="#id236">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; class Int(Structure):
...     _fields_ = [(&quot;first_16&quot;, c_int, 16),
...                 (&quot;second_16&quot;, c_int, 16)]
...
&gt;&gt;&gt; print(Int.first_16)
&lt;Field type=c_long, ofs=0:0, bits=16&gt;
&gt;&gt;&gt; print(Int.second_16)
&lt;Field type=c_long, ofs=0:16, bits=16&gt;
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="arrays">
<span id="ctypes-arrays"></span><h2>Arrays</h2>
<p>Arrays are sequences, containing a fixed number of instances of the same type.</p>
<p>The recommended way to create array types is by multiplying a data type with a
positive integer:</p>
<pre class="literal-block">
TenPointsArrayType = POINT * 10
</pre>
<p>Here is an example of a somewhat artificial data type, a structure containing 4
POINTs among other stuff:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; class POINT(Structure):
...     _fields_ = (&quot;x&quot;, c_int), (&quot;y&quot;, c_int)
...
&gt;&gt;&gt; class MyStruct(Structure):
...     _fields_ = [(&quot;a&quot;, c_int),
...                 (&quot;b&quot;, c_float),
...                 (&quot;point_array&quot;, POINT * 4)]
&gt;&gt;&gt;
&gt;&gt;&gt; print(len(MyStruct().point_array))
4
&gt;&gt;&gt;
</pre>
<p>Instances are created in the usual way, by calling the class:</p>
<pre class="literal-block">
arr = TenPointsArrayType()
for pt in arr:
    print(pt.x, pt.y)
</pre>
<p>The above code print a series of <tt class="docutils literal">0 0</tt> lines, because the array contents is
initialized to zeros.</p>
<p>Initializers of the correct type can also be specified:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; TenIntegers = c_int * 10
&gt;&gt;&gt; ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
&gt;&gt;&gt; print(ii)
&lt;c_long_Array_10 object at 0x...&gt;
&gt;&gt;&gt; for i in ii: print(i, end=&quot; &quot;)
...
1 2 3 4 5 6 7 8 9 10
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="pointers">
<span id="ctypes-pointers"></span><h2>Pointers</h2>
<p>Pointer instances are created by calling the <a href="#id237"><span class="problematic" id="id238">:func:`pointer`</span></a> function on a
<a href="#id239"><span class="problematic" id="id240">:mod:`ctypes`</span></a> type:</p>
<div class="system-message" id="id237">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 707); <em><a href="#id238">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id239">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 707); <em><a href="#id240">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; i = c_int(42)
&gt;&gt;&gt; pi = pointer(i)
&gt;&gt;&gt;
</pre>
<p>Pointer instances have a <a href="#id241"><span class="problematic" id="id242">:attr:`~_Pointer.contents`</span></a> attribute which
returns the object to which the pointer points, the <tt class="docutils literal">i</tt> object above:</p>
<div class="system-message" id="id241">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 715); <em><a href="#id242">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; pi.contents
c_long(42)
&gt;&gt;&gt;
</pre>
<p>Note that <a href="#id243"><span class="problematic" id="id244">:mod:`ctypes`</span></a> does not have OOR (original object return), it constructs a
new, equivalent object each time you retrieve an attribute:</p>
<div class="system-message" id="id243">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 722); <em><a href="#id244">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; pi.contents is i
False
&gt;&gt;&gt; pi.contents is pi.contents
False
&gt;&gt;&gt;
</pre>
<p>Assigning another <a href="#id245"><span class="problematic" id="id246">:class:`c_int`</span></a> instance to the pointer's contents attribute
would cause the pointer to point to the memory location where this is stored:</p>
<div class="system-message" id="id245">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 731); <em><a href="#id246">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; i = c_int(99)
&gt;&gt;&gt; pi.contents = i
&gt;&gt;&gt; pi.contents
c_long(99)
&gt;&gt;&gt;
</pre>
<!-- XXX Document dereferencing pointers, and that it is preferred over the
.contents attribute. -->
<p>Pointer instances can also be indexed with integers:</p>
<pre class="literal-block">
&gt;&gt;&gt; pi[0]
99
&gt;&gt;&gt;
</pre>
<p>Assigning to an integer index changes the pointed to value:</p>
<pre class="literal-block">
&gt;&gt;&gt; print(i)
c_long(99)
&gt;&gt;&gt; pi[0] = 22
&gt;&gt;&gt; print(i)
c_long(22)
&gt;&gt;&gt;
</pre>
<p>It is also possible to use indexes different from 0, but you must know what
you're doing, just as in C: You can access or change arbitrary memory locations.
Generally you only use this feature if you receive a pointer from a C function,
and you <em>know</em> that the pointer actually points to an array instead of a single
item.</p>
<p>Behind the scenes, the <a href="#id247"><span class="problematic" id="id248">:func:`pointer`</span></a> function does more than simply create
pointer instances, it has to create pointer <em>types</em> first. This is done with the
<a href="#id249"><span class="problematic" id="id250">:func:`POINTER`</span></a> function, which accepts any <a href="#id251"><span class="problematic" id="id252">:mod:`ctypes`</span></a> type, and returns a
new type:</p>
<div class="system-message" id="id247">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 764); <em><a href="#id248">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id249">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 764); <em><a href="#id250">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id251">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 764); <em><a href="#id252">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; PI = POINTER(c_int)
&gt;&gt;&gt; PI
&lt;class 'ctypes.LP_c_long'&gt;
&gt;&gt;&gt; PI(42)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: expected c_long instead of int
&gt;&gt;&gt; PI(c_int(42))
&lt;ctypes.LP_c_long object at 0x...&gt;
&gt;&gt;&gt;
</pre>
<p>Calling the pointer type without an argument creates a <tt class="docutils literal">NULL</tt> pointer.
<tt class="docutils literal">NULL</tt> pointers have a <tt class="docutils literal">False</tt> boolean value:</p>
<pre class="literal-block">
&gt;&gt;&gt; null_ptr = POINTER(c_int)()
&gt;&gt;&gt; print(bool(null_ptr))
False
&gt;&gt;&gt;
</pre>
<p><a href="#id253"><span class="problematic" id="id254">:mod:`ctypes`</span></a> checks for <tt class="docutils literal">NULL</tt> when dereferencing pointers (but dereferencing
invalid non-<tt class="docutils literal">NULL</tt> pointers would crash Python):</p>
<div class="system-message" id="id253">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 788); <em><a href="#id254">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; null_ptr[0]
Traceback (most recent call last):
    ....
ValueError: NULL pointer access
&gt;&gt;&gt;

&gt;&gt;&gt; null_ptr[0] = 1234
Traceback (most recent call last):
    ....
ValueError: NULL pointer access
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="type-conversions">
<span id="ctypes-type-conversions"></span><h2>Type conversions</h2>
<p>Usually, ctypes does strict type checking.  This means, if you have
<tt class="docutils literal">POINTER(c_int)</tt> in the <a href="#id255"><span class="problematic" id="id256">:attr:`argtypes`</span></a> list of a function or as the type of
a member field in a structure definition, only instances of exactly the same
type are accepted.  There are some exceptions to this rule, where ctypes accepts
other objects.  For example, you can pass compatible array instances instead of
pointer types.  So, for <tt class="docutils literal">POINTER(c_int)</tt>, ctypes accepts an array of c_int:</p>
<div class="system-message" id="id255">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 809); <em><a href="#id256">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; class Bar(Structure):
...     _fields_ = [(&quot;count&quot;, c_int), (&quot;values&quot;, POINTER(c_int))]
...
&gt;&gt;&gt; bar = Bar()
&gt;&gt;&gt; bar.values = (c_int * 3)(1, 2, 3)
&gt;&gt;&gt; bar.count = 3
&gt;&gt;&gt; for i in range(bar.count):
...     print(bar.values[i])
...
1
2
3
&gt;&gt;&gt;
</pre>
<p>In addition, if a function argument is explicitly declared to be a pointer type
(such as <tt class="docutils literal">POINTER(c_int)</tt>) in <a href="#id257"><span class="problematic" id="id258">:attr:`argtypes`</span></a>, an object of the pointed
type (<tt class="docutils literal">c_int</tt> in this case) can be passed to the function.  ctypes will apply
the required <a href="#id259"><span class="problematic" id="id260">:func:`byref`</span></a> conversion in this case automatically.</p>
<div class="system-message" id="id257">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 830); <em><a href="#id258">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id259">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 830); <em><a href="#id260">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>To set a POINTER type field to <tt class="docutils literal">NULL</tt>, you can assign <tt class="docutils literal">None</tt>:</p>
<pre class="literal-block">
&gt;&gt;&gt; bar.values = None
&gt;&gt;&gt;
</pre>
<!-- XXX list other conversions... -->
<p>Sometimes you have instances of incompatible types.  In C, you can cast one type
into another type.  <a href="#id261"><span class="problematic" id="id262">:mod:`ctypes`</span></a> provides a <a href="#id263"><span class="problematic" id="id264">:func:`cast`</span></a> function which can be
used in the same way.  The <tt class="docutils literal">Bar</tt> structure defined above accepts
<tt class="docutils literal">POINTER(c_int)</tt> pointers or <a href="#id265"><span class="problematic" id="id266">:class:`c_int`</span></a> arrays for its <tt class="docutils literal">values</tt> field,
but not instances of other types:</p>
<div class="system-message" id="id261">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 842); <em><a href="#id262">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id263">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 842); <em><a href="#id264">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id265">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 842); <em><a href="#id266">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; bar.values = (c_byte * 4)()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance
&gt;&gt;&gt;
</pre>
<p>For these cases, the <a href="#id267"><span class="problematic" id="id268">:func:`cast`</span></a> function is handy.</p>
<div class="system-message" id="id267">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 854); <em><a href="#id268">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>The <a href="#id269"><span class="problematic" id="id270">:func:`cast`</span></a> function can be used to cast a ctypes instance into a pointer
to a different ctypes data type.  <a href="#id271"><span class="problematic" id="id272">:func:`cast`</span></a> takes two parameters, a ctypes
object that is or can be converted to a pointer of some kind, and a ctypes
pointer type.  It returns an instance of the second argument, which references
the same memory block as the first argument:</p>
<div class="system-message" id="id269">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 856); <em><a href="#id270">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id271">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 856); <em><a href="#id272">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; a = (c_byte * 4)()
&gt;&gt;&gt; cast(a, POINTER(c_int))
&lt;ctypes.LP_c_long object at ...&gt;
&gt;&gt;&gt;
</pre>
<p>So, <a href="#id273"><span class="problematic" id="id274">:func:`cast`</span></a> can be used to assign to the <tt class="docutils literal">values</tt> field of <tt class="docutils literal">Bar</tt> the
structure:</p>
<div class="system-message" id="id273">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 867); <em><a href="#id274">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; bar = Bar()
&gt;&gt;&gt; bar.values = cast((c_byte * 4)(), POINTER(c_int))
&gt;&gt;&gt; print(bar.values[0])
0
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="incomplete-types">
<span id="ctypes-incomplete-types"></span><h2>Incomplete Types</h2>
<p><em>Incomplete Types</em> are structures, unions or arrays whose members are not yet
specified. In C, they are specified by forward declarations, which are defined
later:</p>
<pre class="literal-block">
struct cell; /* forward declaration */

struct cell {
    char *name;
    struct cell *next;
};
</pre>
<p>The straightforward translation into ctypes code would be this, but it does not
work:</p>
<pre class="literal-block">
&gt;&gt;&gt; class cell(Structure):
...     _fields_ = [(&quot;name&quot;, c_char_p),
...                 (&quot;next&quot;, POINTER(cell))]
...
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 2, in cell
NameError: name 'cell' is not defined
&gt;&gt;&gt;
</pre>
<p>because the new <tt class="docutils literal">class cell</tt> is not available in the class statement itself.
In <a href="#id275"><span class="problematic" id="id276">:mod:`ctypes`</span></a>, we can define the <tt class="docutils literal">cell</tt> class and set the <a href="#id277"><span class="problematic" id="id278">:attr:`_fields_`</span></a>
attribute later, after the class statement:</p>
<div class="system-message" id="id275">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 906); <em><a href="#id276">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id277">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 906); <em><a href="#id278">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; class cell(Structure):
...     pass
...
&gt;&gt;&gt; cell._fields_ = [(&quot;name&quot;, c_char_p),
...                  (&quot;next&quot;, POINTER(cell))]
&gt;&gt;&gt;
</pre>
<p>Let's try it. We create two instances of <tt class="docutils literal">cell</tt>, and let them point to each
other, and finally follow the pointer chain a few times:</p>
<pre class="literal-block">
&gt;&gt;&gt; c1 = cell()
&gt;&gt;&gt; c1.name = &quot;foo&quot;
&gt;&gt;&gt; c2 = cell()
&gt;&gt;&gt; c2.name = &quot;bar&quot;
&gt;&gt;&gt; c1.next = pointer(c2)
&gt;&gt;&gt; c2.next = pointer(c1)
&gt;&gt;&gt; p = c1
&gt;&gt;&gt; for i in range(8):
...     print(p.name, end=&quot; &quot;)
...     p = p.next[0]
...
foo bar foo bar foo bar foo bar
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="callback-functions">
<span id="ctypes-callback-functions"></span><h2>Callback functions</h2>
<p><a href="#id279"><span class="problematic" id="id280">:mod:`ctypes`</span></a> allows creating C callable function pointers from Python callables.
These are sometimes called <em>callback functions</em>.</p>
<div class="system-message" id="id279">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 941); <em><a href="#id280">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>First, you must create a class for the callback function. The class knows the
calling convention, the return type, and the number and types of arguments this
function will receive.</p>
<p>The <a href="#id281"><span class="problematic" id="id282">:func:`CFUNCTYPE`</span></a> factory function creates types for callback functions
using the <tt class="docutils literal">cdecl</tt> calling convention. On Windows, the <a href="#id283"><span class="problematic" id="id284">:func:`WINFUNCTYPE`</span></a>
factory function creates types for callback functions using the <tt class="docutils literal">stdcall</tt>
calling convention.</p>
<div class="system-message" id="id281">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 948); <em><a href="#id282">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id283">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 948); <em><a href="#id284">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>Both of these factory functions are called with the result type as first
argument, and the callback functions expected argument types as the remaining
arguments.</p>
<p>I will present an example here which uses the standard C library's
<a href="#id285"><span class="problematic" id="id286">:c:func:`qsort`</span></a> function, that is used to sort items with the help of a callback
function.  <a href="#id287"><span class="problematic" id="id288">:c:func:`qsort`</span></a> will be used to sort an array of integers:</p>
<div class="system-message" id="id285">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 957); <em><a href="#id286">backlink</a></em></p>
Unknown interpreted text role &quot;c:func&quot;.</div>
<div class="system-message" id="id287">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 957); <em><a href="#id288">backlink</a></em></p>
Unknown interpreted text role &quot;c:func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; IntArray5 = c_int * 5
&gt;&gt;&gt; ia = IntArray5(5, 1, 7, 33, 99)
&gt;&gt;&gt; qsort = libc.qsort
&gt;&gt;&gt; qsort.restype = None
&gt;&gt;&gt;
</pre>
<p><a href="#id289"><span class="problematic" id="id290">:func:`qsort`</span></a> must be called with a pointer to the data to sort, the number of
items in the data array, the size of one item, and a pointer to the comparison
function, the callback. The callback will then be called with two pointers to
items, and it must return a negative integer if the first item is smaller than
the second, a zero if they are equal, and a positive integer otherwise.</p>
<div class="system-message" id="id289">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 967); <em><a href="#id290">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>So our callback function receives pointers to integers, and must return an
integer. First we create the <tt class="docutils literal">type</tt> for the callback function:</p>
<pre class="literal-block">
&gt;&gt;&gt; CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
&gt;&gt;&gt;
</pre>
<p>To get started, here is a simple callback that shows the values it gets
passed:</p>
<pre class="literal-block">
&gt;&gt;&gt; def py_cmp_func(a, b):
...     print(&quot;py_cmp_func&quot;, a[0], b[0])
...     return 0
...
&gt;&gt;&gt; cmp_func = CMPFUNC(py_cmp_func)
&gt;&gt;&gt;
</pre>
<p>The result:</p>
<pre class="literal-block">
&gt;&gt;&gt; qsort(ia, len(ia), sizeof(c_int), cmp_func)  # doctest: +LINUX
py_cmp_func 5 1
py_cmp_func 33 99
py_cmp_func 7 33
py_cmp_func 5 7
py_cmp_func 1 7
&gt;&gt;&gt;
</pre>
<p>Now we can actually compare the two items and return a useful result:</p>
<pre class="literal-block">
&gt;&gt;&gt; def py_cmp_func(a, b):
...     print(&quot;py_cmp_func&quot;, a[0], b[0])
...     return a[0] - b[0]
...
&gt;&gt;&gt;
&gt;&gt;&gt; qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX
py_cmp_func 5 1
py_cmp_func 33 99
py_cmp_func 7 33
py_cmp_func 1 7
py_cmp_func 5 7
&gt;&gt;&gt;
</pre>
<p>As we can easily check, our array is sorted now:</p>
<pre class="literal-block">
&gt;&gt;&gt; for i in ia: print(i, end=&quot; &quot;)
...
1 5 7 33 99
&gt;&gt;&gt;
</pre>
<p>The function factories can be used as decorator factories, so we may as well
write:</p>
<pre class="literal-block">
&gt;&gt;&gt; &#64;CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
... def py_cmp_func(a, b):
...     print(&quot;py_cmp_func&quot;, a[0], b[0])
...     return a[0] - b[0]
...
&gt;&gt;&gt; qsort(ia, len(ia), sizeof(c_int), py_cmp_func)
py_cmp_func 5 1
py_cmp_func 33 99
py_cmp_func 7 33
py_cmp_func 1 7
py_cmp_func 5 7
&gt;&gt;&gt;
</pre>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Make sure you keep references to <a href="#id291"><span class="problematic" id="id292">:func:`CFUNCTYPE`</span></a> objects as long as they
are used from C code. <a href="#id293"><span class="problematic" id="id294">:mod:`ctypes`</span></a> doesn't, and if you don't, they may be
garbage collected, crashing your program when a callback is made.</p>
<div class="system-message" id="id291">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1039); <em><a href="#id292">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id293">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1039); <em><a href="#id294">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>Also, note that if the callback function is called in a thread created
outside of Python's control (e.g. by the foreign code that calls the
callback), ctypes creates a new dummy Python thread on every invocation. This
behavior is correct for most purposes, but it means that values stored with
<a href="#id295"><span class="problematic" id="id296">:class:`threading.local`</span></a> will <em>not</em> survive across different callbacks, even when
those calls are made from the same C thread.</p>
<div class="last system-message" id="id295">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1043); <em><a href="#id296">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</div>
</div>
<div class="section" id="accessing-values-exported-from-dlls">
<span id="ctypes-accessing-values-exported-from-dlls"></span><h2>Accessing values exported from dlls</h2>
<p>Some shared libraries not only export functions, they also export variables. An
example in the Python library itself is the <a href="#id297"><span class="problematic" id="id298">:c:data:`Py_OptimizeFlag`</span></a>, an integer
set to 0, 1, or 2, depending on the <a href="#id299"><span class="problematic" id="id300">:option:`-O`</span></a> or <a href="#id301"><span class="problematic" id="id302">:option:`-OO`</span></a> flag given on
startup.</p>
<div class="system-message" id="id297">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1055); <em><a href="#id298">backlink</a></em></p>
Unknown interpreted text role &quot;c:data&quot;.</div>
<div class="system-message" id="id299">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1055); <em><a href="#id300">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<div class="system-message" id="id301">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1055); <em><a href="#id302">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<p><a href="#id303"><span class="problematic" id="id304">:mod:`ctypes`</span></a> can access values like this with the <a href="#id305"><span class="problematic" id="id306">:meth:`in_dll`</span></a> class methods of
the type.  <em>pythonapi</em> is a predefined symbol giving access to the Python C
api:</p>
<div class="system-message" id="id303">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1060); <em><a href="#id304">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id305">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1060); <em><a href="#id306">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; opt_flag = c_int.in_dll(pythonapi, &quot;Py_OptimizeFlag&quot;)
&gt;&gt;&gt; print(opt_flag)
c_long(0)
&gt;&gt;&gt;
</pre>
<p>If the interpreter would have been started with <a href="#id307"><span class="problematic" id="id308">:option:`-O`</span></a>, the sample would
have printed <tt class="docutils literal">c_long(1)</tt>, or <tt class="docutils literal">c_long(2)</tt> if <a href="#id309"><span class="problematic" id="id310">:option:`-OO`</span></a> would have been
specified.</p>
<div class="system-message" id="id307">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1069); <em><a href="#id308">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<div class="system-message" id="id309">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1069); <em><a href="#id310">backlink</a></em></p>
Unknown interpreted text role &quot;option&quot;.</div>
<p>An extended example which also demonstrates the use of pointers accesses the
<a href="#id311"><span class="problematic" id="id312">:c:data:`PyImport_FrozenModules`</span></a> pointer exported by Python.</p>
<div class="system-message" id="id311">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1073); <em><a href="#id312">backlink</a></em></p>
Unknown interpreted text role &quot;c:data&quot;.</div>
<p>Quoting the docs for that value:</p>
<blockquote>
<p>This pointer is initialized to point to an array of <a href="#id313"><span class="problematic" id="id314">:c:type:`struct _frozen`</span></a>
records, terminated by one whose members are all <tt class="docutils literal">NULL</tt> or zero.  When a frozen
module is imported, it is searched in this table.  Third-party code could play
tricks with this to provide a dynamically created collection of frozen modules.</p>
<div class="system-message" id="id313">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1078); <em><a href="#id314">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</blockquote>
<p>So manipulating this pointer could even prove useful. To restrict the example
size, we show only how this table can be read with <a href="#id315"><span class="problematic" id="id316">:mod:`ctypes`</span></a>:</p>
<div class="system-message" id="id315">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1083); <em><a href="#id316">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt;
&gt;&gt;&gt; class struct_frozen(Structure):
...     _fields_ = [(&quot;name&quot;, c_char_p),
...                 (&quot;code&quot;, POINTER(c_ubyte)),
...                 (&quot;size&quot;, c_int)]
...
&gt;&gt;&gt;
</pre>
<p>We have defined the <a href="#id317"><span class="problematic" id="id318">:c:type:`struct _frozen`</span></a> data type, so we can get the pointer
to the table:</p>
<div class="system-message" id="id317">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1095); <em><a href="#id318">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; FrozenTable = POINTER(struct_frozen)
&gt;&gt;&gt; table = FrozenTable.in_dll(pythonapi, &quot;PyImport_FrozenModules&quot;)
&gt;&gt;&gt;
</pre>
<p>Since <tt class="docutils literal">table</tt> is a <tt class="docutils literal">pointer</tt> to the array of <tt class="docutils literal">struct_frozen</tt> records, we
can iterate over it, but we just have to make sure that our loop terminates,
because pointers have no size. Sooner or later it would probably crash with an
access violation or whatever, so it's better to break out of the loop when we
hit the <tt class="docutils literal">NULL</tt> entry:</p>
<pre class="literal-block">
&gt;&gt;&gt; for item in table:
...     if item.name is None:
...         break
...     print(item.name.decode(&quot;ascii&quot;), item.size)
...
_frozen_importlib 31764
_frozen_importlib_external 41499
__hello__ 161
__phello__ -161
__phello__.spam 161
&gt;&gt;&gt;
</pre>
<p>The fact that standard Python has a frozen module and a frozen package
(indicated by the negative <tt class="docutils literal">size</tt> member) is not well known, it is only used
for testing. Try it out with <tt class="docutils literal">import __hello__</tt> for example.</p>
</div>
<div class="section" id="surprises">
<span id="ctypes-surprises"></span><h2>Surprises</h2>
<p>There are some edges in <a href="#id319"><span class="problematic" id="id320">:mod:`ctypes`</span></a> where you might expect something other
than what actually happens.</p>
<div class="system-message" id="id319">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1130); <em><a href="#id320">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>Consider the following example:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; class POINT(Structure):
...     _fields_ = (&quot;x&quot;, c_int), (&quot;y&quot;, c_int)
...
&gt;&gt;&gt; class RECT(Structure):
...     _fields_ = (&quot;a&quot;, POINT), (&quot;b&quot;, POINT)
...
&gt;&gt;&gt; p1 = POINT(1, 2)
&gt;&gt;&gt; p2 = POINT(3, 4)
&gt;&gt;&gt; rc = RECT(p1, p2)
&gt;&gt;&gt; print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)
1 2 3 4
&gt;&gt;&gt; # now swap the two points
&gt;&gt;&gt; rc.a, rc.b = rc.b, rc.a
&gt;&gt;&gt; print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)
3 4 3 4
&gt;&gt;&gt;
</pre>
<p>Hm. We certainly expected the last statement to print <tt class="docutils literal">3 4 1 2</tt>. What
happened? Here are the steps of the <tt class="docutils literal">rc.a, rc.b = rc.b, rc.a</tt> line above:</p>
<pre class="literal-block">
&gt;&gt;&gt; temp0, temp1 = rc.b, rc.a
&gt;&gt;&gt; rc.a = temp0
&gt;&gt;&gt; rc.b = temp1
&gt;&gt;&gt;
</pre>
<p>Note that <tt class="docutils literal">temp0</tt> and <tt class="docutils literal">temp1</tt> are objects still using the internal buffer of
the <tt class="docutils literal">rc</tt> object above. So executing <tt class="docutils literal">rc.a = temp0</tt> copies the buffer
contents of <tt class="docutils literal">temp0</tt> into <tt class="docutils literal">rc</tt> 's buffer.  This, in turn, changes the
contents of <tt class="docutils literal">temp1</tt>. So, the last assignment <tt class="docutils literal">rc.b = temp1</tt>, doesn't have
the expected effect.</p>
<p>Keep in mind that retrieving sub-objects from Structure, Unions, and Arrays
doesn't <em>copy</em> the sub-object, instead it retrieves a wrapper object accessing
the root-object's underlying buffer.</p>
<p>Another example that may behave differently from what one would expect is this:</p>
<pre class="literal-block">
&gt;&gt;&gt; s = c_char_p()
&gt;&gt;&gt; s.value = b&quot;abc def ghi&quot;
&gt;&gt;&gt; s.value
b'abc def ghi'
&gt;&gt;&gt; s.value is s.value
False
&gt;&gt;&gt;
</pre>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Objects instantiated from <a href="#id321"><span class="problematic" id="id322">:class:`c_char_p`</span></a> can only have their value set to bytes
or integers.</p>
<div class="last system-message" id="id321">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1183); <em><a href="#id322">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
</div>
<p>Why is it printing <tt class="docutils literal">False</tt>?  ctypes instances are objects containing a memory
block plus some <a href="#id323"><span class="problematic" id="id324">:term:`descriptor`</span></a>s accessing the contents of the memory.
Storing a Python object in the memory block does not store the object itself,
instead the <tt class="docutils literal">contents</tt> of the object is stored.  Accessing the contents again
constructs a new Python object each time!</p>
<div class="system-message" id="id323">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1186); <em><a href="#id324">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
</div>
<div class="section" id="variable-sized-data-types">
<span id="ctypes-variable-sized-data-types"></span><h2>Variable-sized data types</h2>
<p><a href="#id325"><span class="problematic" id="id326">:mod:`ctypes`</span></a> provides some support for variable-sized arrays and structures.</p>
<div class="system-message" id="id325">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1198); <em><a href="#id326">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<p>The <a href="#id327"><span class="problematic" id="id328">:func:`resize`</span></a> function can be used to resize the memory buffer of an
existing ctypes object.  The function takes the object as first argument, and
the requested size in bytes as the second argument.  The memory block cannot be
made smaller than the natural memory block specified by the objects type, a
<a href="#id329"><span class="problematic" id="id330">:exc:`ValueError`</span></a> is raised if this is tried:</p>
<div class="system-message" id="id327">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1200); <em><a href="#id328">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id329">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1200); <em><a href="#id330">backlink</a></em></p>
Unknown interpreted text role &quot;exc&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; short_array = (c_short * 4)()
&gt;&gt;&gt; print(sizeof(short_array))
8
&gt;&gt;&gt; resize(short_array, 4)
Traceback (most recent call last):
    ...
ValueError: minimum size is 8
&gt;&gt;&gt; resize(short_array, 32)
&gt;&gt;&gt; sizeof(short_array)
32
&gt;&gt;&gt; sizeof(type(short_array))
8
&gt;&gt;&gt;
</pre>
<p>This is nice and fine, but how would one access the additional elements
contained in this array?  Since the type still only knows about 4 elements, we
get errors accessing other elements:</p>
<pre class="literal-block">
&gt;&gt;&gt; short_array[:]
[0, 0, 0, 0]
&gt;&gt;&gt; short_array[7]
Traceback (most recent call last):
    ...
IndexError: invalid index
&gt;&gt;&gt;
</pre>
<p>Another way to use variable-sized data types with <a href="#id331"><span class="problematic" id="id332">:mod:`ctypes`</span></a> is to use the
dynamic nature of Python, and (re-)define the data type after the required size
is already known, on a case by case basis.</p>
<div class="system-message" id="id331">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1232); <em><a href="#id332">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
</div>
</div>
<div class="section" id="ctypes-reference">
<span id="ctypes-ctypes-reference"></span><h1>ctypes reference</h1>
<div class="section" id="finding-shared-libraries">
<span id="ctypes-finding-shared-libraries"></span><h2>Finding shared libraries</h2>
<p>When programming in a compiled language, shared libraries are accessed when
compiling/linking a program, and when the program is run.</p>
<p>The purpose of the <a href="#id333"><span class="problematic" id="id334">:func:`find_library`</span></a> function is to locate a library in a way
similar to what the compiler or runtime loader does (on platforms with several
versions of a shared library the most recent should be loaded), while the ctypes
library loaders act like when a program is run, and call the runtime loader
directly.</p>
<div class="system-message" id="id333">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1251); <em><a href="#id334">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>The <a href="#id335"><span class="problematic" id="id336">:mod:`ctypes.util`</span></a> module provides a function which can help to determine
the library to load.</p>
<div class="system-message" id="id335">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1257); <em><a href="#id336">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1261)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: find_library(name)
   :module: ctypes.util
   :noindex:

   Try to find a library and return a pathname.  *name* is the library name without
   any prefix like *lib*, suffix like ``.so``, ``.dylib`` or version number (this
   is the form used for the posix linker option :option:`!-l`).  If no library can
   be found, returns ``None``.

</pre>
</div>
<p>The exact functionality is system dependent.</p>
<p>On Linux, <a href="#id337"><span class="problematic" id="id338">:func:`find_library`</span></a> tries to run external programs
(<tt class="docutils literal">/sbin/ldconfig</tt>, <tt class="docutils literal">gcc</tt>, <tt class="docutils literal">objdump</tt> and <tt class="docutils literal">ld</tt>) to find the library file.
It returns the filename of the library file.</p>
<div class="system-message" id="id337">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1272); <em><a href="#id338">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1276)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.6
   On Linux, the value of the environment variable ``LD_LIBRARY_PATH`` is used
   when searching for libraries, if a library cannot be found by any other means.

</pre>
</div>
<p>Here are some examples:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes.util import find_library
&gt;&gt;&gt; find_library(&quot;m&quot;)
'libm.so.6'
&gt;&gt;&gt; find_library(&quot;c&quot;)
'libc.so.6'
&gt;&gt;&gt; find_library(&quot;bz2&quot;)
'libbz2.so.1.0'
&gt;&gt;&gt;
</pre>
<p>On OS X, <a href="#id339"><span class="problematic" id="id340">:func:`find_library`</span></a> tries several predefined naming schemes and paths
to locate the library, and returns a full pathname if successful:</p>
<div class="system-message" id="id339">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1291); <em><a href="#id340">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes.util import find_library
&gt;&gt;&gt; find_library(&quot;c&quot;)
'/usr/lib/libc.dylib'
&gt;&gt;&gt; find_library(&quot;m&quot;)
'/usr/lib/libm.dylib'
&gt;&gt;&gt; find_library(&quot;bz2&quot;)
'/usr/lib/libbz2.dylib'
&gt;&gt;&gt; find_library(&quot;AGL&quot;)
'/System/Library/Frameworks/AGL.framework/AGL'
&gt;&gt;&gt;
</pre>
<p>On Windows, <a href="#id341"><span class="problematic" id="id342">:func:`find_library`</span></a> searches along the system search path, and
returns the full pathname, but since there is no predefined naming scheme a call
like <tt class="docutils literal"><span class="pre">find_library(&quot;c&quot;)</span></tt> will fail and return <tt class="docutils literal">None</tt>.</p>
<div class="system-message" id="id341">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1305); <em><a href="#id342">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>If wrapping a shared library with <a href="#id343"><span class="problematic" id="id344">:mod:`ctypes`</span></a>, it <em>may</em> be better to determine
the shared library name at development time, and hardcode that into the wrapper
module instead of using <a href="#id345"><span class="problematic" id="id346">:func:`find_library`</span></a> to locate the library at runtime.</p>
<div class="system-message" id="id343">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1309); <em><a href="#id344">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id345">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1309); <em><a href="#id346">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
</div>
<div class="section" id="loading-shared-libraries">
<span id="ctypes-loading-shared-libraries"></span><h2>Loading shared libraries</h2>
<p>There are several ways to load shared libraries into the Python process.  One
way is to instantiate one of the following classes:</p>
<p class="cdll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0">Instances of this class represent loaded shared libraries. Functions in these
libraries use the standard C calling convention, and are assumed to return
<a href="#id347"><span class="problematic" id="id348">:c:type:`int`</span></a>.</p>
<div class="cdll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id347">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1325); <em><a href="#id348">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="cdll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0">On Windows creating a <a href="#id349"><span class="problematic" id="id350">:class:`CDLL`</span></a> instance may fail even if the DLL name
exists. When a dependent DLL of the loaded DLL is not found, a
<a href="#id351"><span class="problematic" id="id352">:exc:`OSError`</span></a> error is raised with the message <em>&quot;[WinError 126] The
specified module could not be found&quot;.</em> This error message does not contain
the name of the missing DLL because the Windows API does not return this
information making this error hard to diagnose. To resolve this error and
determine which DLL is not found, you need to find the list of dependent
DLLs and determine which one is not found using Windows debugging and
tracing tools.</p>
<div class="cdll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id349">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1329); <em><a href="#id350">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="cdll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id351">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1329); <em><a href="#id352">backlink</a></em></p>
Unknown interpreted text role &quot;exc&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1339)</p>
<p>Unknown directive type &quot;seealso&quot;.</p>
<pre class="literal-block">
.. seealso::

    `Microsoft DUMPBIN tool &lt;https://docs.microsoft.com/cpp/build/reference/dependents&gt;`_
    -- A tool to find DLL dependents.


</pre>
</div>
<p class="oledll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0">Windows only: Instances of this class represent loaded shared libraries,
functions in these libraries use the <tt class="docutils literal">stdcall</tt> calling convention, and are
assumed to return the windows specific <a href="#id353"><span class="problematic" id="id354">:class:`HRESULT`</span></a> code.  <a href="#id355"><span class="problematic" id="id356">:class:`HRESULT`</span></a>
values contain information specifying whether the function call failed or
succeeded, together with additional error code.  If the return value signals a
failure, an <a href="#id357"><span class="problematic" id="id358">:class:`OSError`</span></a> is automatically raised.</p>
<div class="oledll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id353">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1347); <em><a href="#id354">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="oledll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id355">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1347); <em><a href="#id356">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="oledll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id357">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1347); <em><a href="#id358">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="oledll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1354)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.3
   :exc:`WindowsError` used to be raised.
</pre>
</div>
<p class="windll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0">Windows only: Instances of this class represent loaded shared libraries,
functions in these libraries use the <tt class="docutils literal">stdcall</tt> calling convention, and are
assumed to return <a href="#id359"><span class="problematic" id="id360">:c:type:`int`</span></a> by default.</p>
<div class="windll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id359">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1360); <em><a href="#id360">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="windll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0">On Windows CE only the standard calling convention is used, for convenience the
<a href="#id361"><span class="problematic" id="id362">:class:`WinDLL`</span></a> and <a href="#id363"><span class="problematic" id="id364">:class:`OleDLL`</span></a> use the standard calling convention on this
platform.</p>
<div class="windll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id361">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1364); <em><a href="#id362">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="windll-name mode-default-mode handle-none use-errno-false use-last-error-false winmode-0 system-message" id="id363">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1364); <em><a href="#id364">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>The Python <a href="#id365"><span class="problematic" id="id366">:term:`global interpreter lock`</span></a> is released before calling any
function exported by these libraries, and reacquired afterwards.</p>
<div class="system-message" id="id365">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1368); <em><a href="#id366">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<p class="pydll-name mode-default-mode handle-none">Instances of this class behave like <a href="#id367"><span class="problematic" id="id368">:class:`CDLL`</span></a> instances, except that the
Python GIL is <em>not</em> released during the function call, and after the function
execution the Python error flag is checked. If the error flag is set, a Python
exception is raised.</p>
<div class="pydll-name mode-default-mode handle-none system-message" id="id367">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1374); <em><a href="#id368">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="pydll-name mode-default-mode handle-none">Thus, this is only useful to call Python C api functions directly.</p>
<p>All these classes can be instantiated by calling them with at least one
argument, the pathname of the shared library.  If you have an existing handle to
an already loaded shared library, it can be passed as the <tt class="docutils literal">handle</tt> named
parameter, otherwise the underlying platforms <tt class="docutils literal">dlopen</tt> or <tt class="docutils literal">LoadLibrary</tt>
function is used to load the library into the process, and to get a handle to
it.</p>
<p>The <em>mode</em> parameter can be used to specify how the library is loaded.  For
details, consult the <a href="#id369"><span class="problematic" id="id370">:manpage:`dlopen(3)`</span></a> manpage.  On Windows, <em>mode</em> is
ignored.  On posix systems, RTLD_NOW is always added, and is not
configurable.</p>
<div class="system-message" id="id369">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1388); <em><a href="#id370">backlink</a></em></p>
Unknown interpreted text role &quot;manpage&quot;.</div>
<p>The <em>use_errno</em> parameter, when set to true, enables a ctypes mechanism that
allows accessing the system <a href="#id371"><span class="problematic" id="id372">:data:`errno`</span></a> error number in a safe way.
<a href="#id373"><span class="problematic" id="id374">:mod:`ctypes`</span></a> maintains a thread-local copy of the systems <a href="#id375"><span class="problematic" id="id376">:data:`errno`</span></a>
variable; if you call foreign functions created with <tt class="docutils literal">use_errno=True</tt> then the
<a href="#id377"><span class="problematic" id="id378">:data:`errno`</span></a> value before the function call is swapped with the ctypes private
copy, the same happens immediately after the function call.</p>
<div class="system-message" id="id371">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1393); <em><a href="#id372">backlink</a></em></p>
Unknown interpreted text role &quot;data&quot;.</div>
<div class="system-message" id="id373">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1393); <em><a href="#id374">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id375">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1393); <em><a href="#id376">backlink</a></em></p>
Unknown interpreted text role &quot;data&quot;.</div>
<div class="system-message" id="id377">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1393); <em><a href="#id378">backlink</a></em></p>
Unknown interpreted text role &quot;data&quot;.</div>
<p>The function <a href="#id379"><span class="problematic" id="id380">:func:`ctypes.get_errno`</span></a> returns the value of the ctypes private
copy, and the function <a href="#id381"><span class="problematic" id="id382">:func:`ctypes.set_errno`</span></a> changes the ctypes private copy
to a new value and returns the former value.</p>
<div class="system-message" id="id379">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1400); <em><a href="#id380">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id381">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1400); <em><a href="#id382">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>The <em>use_last_error</em> parameter, when set to true, enables the same mechanism for
the Windows error code which is managed by the <a href="#id383"><span class="problematic" id="id384">:func:`GetLastError`</span></a> and
<a href="#id385"><span class="problematic" id="id386">:func:`SetLastError`</span></a> Windows API functions; <a href="#id387"><span class="problematic" id="id388">:func:`ctypes.get_last_error`</span></a> and
<a href="#id389"><span class="problematic" id="id390">:func:`ctypes.set_last_error`</span></a> are used to request and change the ctypes private
copy of the windows error code.</p>
<div class="system-message" id="id383">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1404); <em><a href="#id384">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id385">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1404); <em><a href="#id386">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id387">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1404); <em><a href="#id388">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="system-message" id="id389">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1404); <em><a href="#id390">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p>The <em>winmode</em> parameter is used on Windows to specify how the library is loaded
(since <em>mode</em> is ignored). It takes any value that is valid for the Win32 API
<tt class="docutils literal">LoadLibraryEx</tt> flags parameter. When omitted, the default is to use the flags
that result in the most secure DLL load to avoiding issues such as DLL
hijacking. Passing the full path to the DLL is the safest way to ensure the
correct library and dependencies are loaded.</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1417)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.8
   Added *winmode* parameter.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1421)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: RTLD_GLOBAL
   :noindex:

   Flag to use as *mode* parameter.  On platforms where this flag is not available,
   it is defined as the integer zero.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1428)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: RTLD_LOCAL
   :noindex:

   Flag to use as *mode* parameter.  On platforms where this is not available, it
   is the same as *RTLD_GLOBAL*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1435)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: DEFAULT_MODE
   :noindex:

   The default mode which is used to load shared libraries.  On OSX 10.3, this is
   *RTLD_GLOBAL*, otherwise it is the same as *RTLD_LOCAL*.

</pre>
</div>
<p>Instances of these classes have no public methods.  Functions exported by the
shared library can be accessed as attributes or by index.  Please note that
accessing the function through an attribute caches the result and therefore
accessing it repeatedly returns the same object each time.  On the other hand,
accessing it through an index returns a new object each time:</p>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import CDLL
&gt;&gt;&gt; libc = CDLL(&quot;libc.so.6&quot;)  # On Linux
&gt;&gt;&gt; libc.time == libc.time
True
&gt;&gt;&gt; libc['time'] == libc['time']
False
</pre>
<p>The following public attributes are available, their name starts with an
underscore to not clash with exported function names:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1458)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: PyDLL._handle

   The system handle used to access the library.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1463)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: PyDLL._name

   The name of the library passed in the constructor.

</pre>
</div>
<p>Shared libraries can also be loaded by using one of the prefabricated objects,
which are instances of the <a href="#id391"><span class="problematic" id="id392">:class:`LibraryLoader`</span></a> class, either by calling the
<a href="#id393"><span class="problematic" id="id394">:meth:`LoadLibrary`</span></a> method, or by retrieving the library as attribute of the
loader instance.</p>
<div class="system-message" id="id391">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1467); <em><a href="#id392">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id393">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1467); <em><a href="#id394">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<p class="libraryloader-dlltype">Class which loads shared libraries.  <em>dlltype</em> should be one of the
<a href="#id395"><span class="problematic" id="id396">:class:`CDLL`</span></a>, <a href="#id397"><span class="problematic" id="id398">:class:`PyDLL`</span></a>, <a href="#id399"><span class="problematic" id="id400">:class:`WinDLL`</span></a>, or <a href="#id401"><span class="problematic" id="id402">:class:`OleDLL`</span></a> types.</p>
<div class="libraryloader-dlltype system-message" id="id395">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1475); <em><a href="#id396">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="libraryloader-dlltype system-message" id="id397">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1475); <em><a href="#id398">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="libraryloader-dlltype system-message" id="id399">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1475); <em><a href="#id400">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="libraryloader-dlltype system-message" id="id401">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1475); <em><a href="#id402">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="libraryloader-dlltype"><a href="#id403"><span class="problematic" id="id404">:meth:`__getattr__`</span></a> has special behavior: It allows loading a shared library by
accessing it as attribute of a library loader instance.  The result is cached,
so repeated attribute accesses return the same library each time.</p>
<div class="libraryloader-dlltype system-message" id="id403">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1478); <em><a href="#id404">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="libraryloader-dlltype system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1482)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: LoadLibrary(name)

   Load a shared library into the process and return it.  This method always
   returns a new instance of the library.
</pre>
</div>
<p>These prefabricated library loaders are available:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1490)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: cdll
   :noindex:

   Creates :class:`CDLL` instances.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1496)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: windll
   :noindex:

   Windows only: Creates :class:`WinDLL` instances.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1502)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: oledll
   :noindex:

   Windows only: Creates :class:`OleDLL` instances.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1508)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: pydll
   :noindex:

   Creates :class:`PyDLL` instances.


</pre>
</div>
<p>For accessing the C Python api directly, a ready-to-use Python shared library
object is available:</p>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1517)</p>
<p>Unknown directive type &quot;data&quot;.</p>
<pre class="literal-block">
.. data:: pythonapi
   :noindex:

   An instance of :class:`PyDLL` that exposes Python C API functions as
   attributes.  Note that all these functions are assumed to return C
   :c:type:`int`, which is of course not always the truth, so you have to assign
   the correct :attr:`restype` attribute to use these functions.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1525)</p>
<p>Unknown directive type &quot;audit-event&quot;.</p>
<pre class="literal-block">
.. audit-event:: ctypes.dlopen name ctypes.LibraryLoader

   Loading a library through any of these objects raises an
   :ref:`auditing event &lt;auditing&gt;` ``ctypes.dlopen`` with string argument
   ``name``, the name used to load the library.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1531)</p>
<p>Unknown directive type &quot;audit-event&quot;.</p>
<pre class="literal-block">
.. audit-event:: ctypes.dlsym library,name ctypes.LibraryLoader

   Accessing a function on a loaded library raises an auditing event
   ``ctypes.dlsym`` with arguments ``library`` (the library object) and ``name``
   (the symbol's name as a string or integer).

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1537)</p>
<p>Unknown directive type &quot;audit-event&quot;.</p>
<pre class="literal-block">
.. audit-event:: ctypes.dlsym/handle handle,name ctypes.LibraryLoader

   In cases when only the library handle is available rather than the object,
   accessing a function raises an auditing event ``ctypes.dlsym/handle`` with
   arguments ``handle`` (the raw library handle) and ``name``.

</pre>
</div>
</div>
<div class="section" id="foreign-functions">
<span id="ctypes-foreign-functions"></span><h2>Foreign functions</h2>
<p>As explained in the previous section, foreign functions can be accessed as
attributes of loaded shared libraries.  The function objects created in this way
by default accept any number of arguments, accept any ctypes data instances as
arguments, and return the default result type specified by the library loader.
They are instances of a private class:</p>
<p class="funcptr">Base class for C callable foreign functions.</p>
<p class="funcptr">Instances of foreign functions are also C compatible data types; they
represent C function pointers.</p>
<p class="funcptr">This behavior can be customized by assigning to special attributes of the
foreign function object.</p>
<div class="funcptr system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1565)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: restype

   Assign a ctypes type to specify the result type of the foreign function.
   Use ``None`` for :c:type:`void`, a function not returning anything.

   It is possible to assign a callable Python object that is not a ctypes
   type, in this case the function is assumed to return a C :c:type:`int`, and
   the callable will be called with this integer, allowing further
   processing or error checking.  Using this is deprecated, for more flexible
   post processing or error checking use a ctypes data type as
   :attr:`restype` and assign a callable to the :attr:`errcheck` attribute.

</pre>
</div>
<div class="funcptr system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1577)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: argtypes

   Assign a tuple of ctypes types to specify the argument types that the
   function accepts.  Functions using the ``stdcall`` calling convention can
   only be called with the same number of arguments as the length of this
   tuple; functions using the C calling convention accept additional,
   unspecified arguments as well.

   When a foreign function is called, each actual argument is passed to the
   :meth:`from_param` class method of the items in the :attr:`argtypes`
   tuple, this method allows adapting the actual argument to an object that
   the foreign function accepts.  For example, a :class:`c_char_p` item in
   the :attr:`argtypes` tuple will convert a string passed as argument into
   a bytes object using ctypes conversion rules.

   New: It is now possible to put items in argtypes which are not ctypes
   types, but each item must have a :meth:`from_param` method which returns a
   value usable as argument (integer, string, ctypes instance).  This allows
   defining adapters that can adapt custom objects as function parameters.

</pre>
</div>
<div class="funcptr system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1597)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: errcheck

   Assign a Python function or another callable to this attribute. The
   callable will be called with three or more arguments:

   .. function:: callable(result, func, arguments)
      :noindex:
      :module:

      *result* is what the foreign function returns, as specified by the
      :attr:`restype` attribute.

      *func* is the foreign function object itself, this allows reusing the
      same callable object to check or post process the results of several
      functions.

      *arguments* is a tuple containing the parameters originally passed to
      the function call, this allows specializing the behavior on the
      arguments used.

   The object that this function returns will be returned from the
   foreign function call, but it can also check the result value
   and raise an exception if the foreign function call failed.
</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1622)</p>
<p>Unknown directive type &quot;exception&quot;.</p>
<pre class="literal-block">
.. exception:: ArgumentError

   This exception is raised when a foreign function call cannot convert one of the
   passed arguments.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1628)</p>
<p>Unknown directive type &quot;audit-event&quot;.</p>
<pre class="literal-block">
.. audit-event:: ctypes.seh_exception code foreign-functions

   On Windows, when a foreign function call raises a system exception (for
   example, due to an access violation), it will be captured and replaced with
   a suitable Python exception. Further, an auditing event
   ``ctypes.seh_exception`` with argument ``code`` will be raised, allowing an
   audit hook to replace the exception with its own.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1636)</p>
<p>Unknown directive type &quot;audit-event&quot;.</p>
<pre class="literal-block">
.. audit-event:: ctypes.call_function func_pointer,arguments foreign-functions

   Some ways to invoke foreign function calls may raise an auditing event
   ``ctypes.call_function`` with arguments ``function pointer`` and ``arguments``.

</pre>
</div>
</div>
<div class="section" id="function-prototypes">
<span id="ctypes-function-prototypes"></span><h2>Function prototypes</h2>
<p>Foreign functions can also be created by instantiating function prototypes.
Function prototypes are similar to function prototypes in C; they describe a
function (return type, argument types, calling convention) without defining an
implementation.  The factory functions must be called with the desired result
type and the argument types of the function, and can be used as decorator
factories, and as such, be applied to functions through the <tt class="docutils literal">&#64;wrapper</tt> syntax.
See <a href="#id405"><span class="problematic" id="id406">:ref:`ctypes-callback-functions`</span></a> for examples.</p>
<div class="system-message" id="id405">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1646); <em><a href="#id406">backlink</a></em></p>
Unknown interpreted text role &quot;ref&quot;.</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1655)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)

   The returned function prototype creates functions that use the standard C
   calling convention.  The function will release the GIL during the call.  If
   *use_errno* is set to true, the ctypes private copy of the system
   :data:`errno` variable is exchanged with the real :data:`errno` value before
   and after the call; *use_last_error* does the same for the Windows error
   code.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1665)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)

   Windows only: The returned function prototype creates functions that use the
   ``stdcall`` calling convention, except on Windows CE where
   :func:`WINFUNCTYPE` is the same as :func:`CFUNCTYPE`.  The function will
   release the GIL during the call.  *use_errno* and *use_last_error* have the
   same meaning as above.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1674)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: PYFUNCTYPE(restype, *argtypes)

   The returned function prototype creates functions that use the Python calling
   convention.  The function will *not* release the GIL during the call.

</pre>
</div>
<p>Function prototypes created by these factory functions can be instantiated in
different ways, depending on the type and number of the parameters in the call:</p>
<blockquote>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1683)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: prototype(address)
   :noindex:
   :module:

   Returns a foreign function at the specified address which must be an integer.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1690)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: prototype(callable)
   :noindex:
   :module:

   Create a C callable function (a callback function) from a Python *callable*.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1697)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: prototype(func_spec[, paramflags])
   :noindex:
   :module:

   Returns a foreign function exported by a shared library. *func_spec* must
   be a 2-tuple ``(name_or_ordinal, library)``. The first item is the name of
   the exported function as string, or the ordinal of the exported function
   as small integer.  The second item is the shared library instance.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1707)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: prototype(vtbl_index, name[, paramflags[, iid]])
   :noindex:
   :module:

   Returns a foreign function that will call a COM method. *vtbl_index* is
   the index into the virtual function table, a small non-negative
   integer. *name* is name of the COM method. *iid* is an optional pointer to
   the interface identifier which is used in extended error reporting.

   COM methods use a special calling convention: They require a pointer to
   the COM interface as first argument, in addition to those parameters that
   are specified in the :attr:`argtypes` tuple.

</pre>
</div>
<p>The optional <em>paramflags</em> parameter creates foreign function wrappers with much
more functionality than the features described above.</p>
<p><em>paramflags</em> must be a tuple of the same length as <a href="#id407"><span class="problematic" id="id408">:attr:`argtypes`</span></a>.</p>
<div class="system-message" id="id407">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1723); <em><a href="#id408">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p>Each item in this tuple contains further information about a parameter, it must
be a tuple containing one, two, or three items.</p>
<p>The first item is an integer containing a combination of direction
flags for the parameter:</p>
<blockquote>
<dl class="docutils">
<dt>1</dt>
<dd>Specifies an input parameter to the function.</dd>
<dt>2</dt>
<dd>Output parameter.  The foreign function fills in a value.</dd>
<dt>4</dt>
<dd>Input parameter which defaults to the integer zero.</dd>
</dl>
</blockquote>
<p>The optional second item is the parameter name as string.  If this is specified,
the foreign function can be called with named parameters.</p>
<p>The optional third item is the default value for this parameter.</p>
</blockquote>
<p>This example demonstrates how to wrap the Windows <tt class="docutils literal">MessageBoxW</tt> function so
that it supports default parameters and named arguments. The C declaration from
the windows header file is this:</p>
<pre class="literal-block">
WINUSERAPI int WINAPI
MessageBoxW(
    HWND hWnd,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType);
</pre>
<p>Here is the wrapping with <a href="#id409"><span class="problematic" id="id410">:mod:`ctypes`</span></a>:</p>
<div class="system-message" id="id409">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1756); <em><a href="#id410">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import c_int, WINFUNCTYPE, windll
&gt;&gt;&gt; from ctypes.wintypes import HWND, LPCWSTR, UINT
&gt;&gt;&gt; prototype = WINFUNCTYPE(c_int, HWND, LPCWSTR, LPCWSTR, UINT)
&gt;&gt;&gt; paramflags = (1, &quot;hwnd&quot;, 0), (1, &quot;text&quot;, &quot;Hi&quot;), (1, &quot;caption&quot;, &quot;Hello from ctypes&quot;), (1, &quot;flags&quot;, 0)
&gt;&gt;&gt; MessageBox = prototype((&quot;MessageBoxW&quot;, windll.user32), paramflags)
</pre>
<p>The <tt class="docutils literal">MessageBox</tt> foreign function can now be called in these ways:</p>
<pre class="literal-block">
&gt;&gt;&gt; MessageBox()
&gt;&gt;&gt; MessageBox(text=&quot;Spam, spam, spam&quot;)
&gt;&gt;&gt; MessageBox(flags=2, text=&quot;foo bar&quot;)
</pre>
<p>A second example demonstrates output parameters.  The win32 <tt class="docutils literal">GetWindowRect</tt>
function retrieves the dimensions of a specified window by copying them into
<tt class="docutils literal">RECT</tt> structure that the caller has to supply.  Here is the C declaration:</p>
<pre class="literal-block">
WINUSERAPI BOOL WINAPI
GetWindowRect(
     HWND hWnd,
     LPRECT lpRect);
</pre>
<p>Here is the wrapping with <a href="#id411"><span class="problematic" id="id412">:mod:`ctypes`</span></a>:</p>
<div class="system-message" id="id411">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1779); <em><a href="#id412">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; from ctypes import POINTER, WINFUNCTYPE, windll, WinError
&gt;&gt;&gt; from ctypes.wintypes import BOOL, HWND, RECT
&gt;&gt;&gt; prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
&gt;&gt;&gt; paramflags = (1, &quot;hwnd&quot;), (2, &quot;lprect&quot;)
&gt;&gt;&gt; GetWindowRect = prototype((&quot;GetWindowRect&quot;, windll.user32), paramflags)
&gt;&gt;&gt;
</pre>
<p>Functions with output parameters will automatically return the output parameter
value if there is a single one, or a tuple containing the output parameter
values when there are more than one, so the GetWindowRect function now returns a
RECT instance, when called.</p>
<p>Output parameters can be combined with the <a href="#id413"><span class="problematic" id="id414">:attr:`errcheck`</span></a> protocol to do
further output processing and error checking.  The win32 <tt class="docutils literal">GetWindowRect</tt> api
function returns a <tt class="docutils literal">BOOL</tt> to signal success or failure, so this function could
do the error checking, and raises an exception when the api call failed:</p>
<div class="system-message" id="id413">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1793); <em><a href="#id414">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; def errcheck(result, func, args):
...     if not result:
...         raise WinError()
...     return args
...
&gt;&gt;&gt; GetWindowRect.errcheck = errcheck
&gt;&gt;&gt;
</pre>
<p>If the <a href="#id415"><span class="problematic" id="id416">:attr:`errcheck`</span></a> function returns the argument tuple it receives
unchanged, <a href="#id417"><span class="problematic" id="id418">:mod:`ctypes`</span></a> continues the normal processing it does on the output
parameters.  If you want to return a tuple of window coordinates instead of a
<tt class="docutils literal">RECT</tt> instance, you can retrieve the fields in the function and return them
instead, the normal processing will no longer take place:</p>
<div class="system-message" id="id415">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1806); <em><a href="#id416">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id417">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1806); <em><a href="#id418">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<pre class="literal-block">
&gt;&gt;&gt; def errcheck(result, func, args):
...     if not result:
...         raise WinError()
...     rc = args[1]
...     return rc.left, rc.top, rc.bottom, rc.right
...
&gt;&gt;&gt; GetWindowRect.errcheck = errcheck
&gt;&gt;&gt;
</pre>
</div>
<div class="section" id="utility-functions">
<span id="ctypes-utility-functions"></span><h2>Utility functions</h2>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1827)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: addressof(obj)

   Returns the address of the memory buffer as integer.  *obj* must be an
   instance of a ctypes type.

   .. audit-event:: ctypes.addressof obj ctypes.addressof


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1835)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: alignment(obj_or_type)

   Returns the alignment requirements of a ctypes type. *obj_or_type* must be a
   ctypes type or instance.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1841)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: byref(obj[, offset])

   Returns a light-weight pointer to *obj*, which must be an instance of a
   ctypes type.  *offset* defaults to zero, and must be an integer that will be
   added to the internal pointer value.

   ``byref(obj, offset)`` corresponds to this C code::

      (((char *)&amp;obj) + offset)

   The returned object can only be used as a foreign function call parameter.
   It behaves similar to ``pointer(obj)``, but the construction is a lot faster.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1855)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: cast(obj, type)

   This function is similar to the cast operator in C. It returns a new instance
   of *type* which points to the same memory block as *obj*.  *type* must be a
   pointer type, and *obj* must be an object that can be interpreted as a
   pointer.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1863)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: create_string_buffer(init_or_size, size=None)

   This function creates a mutable character buffer. The returned object is a
   ctypes array of :class:`c_char`.

   *init_or_size* must be an integer which specifies the size of the array, or a
   bytes object which will be used to initialize the array items.

   If a bytes object is specified as first argument, the buffer is made one item
   larger than its length so that the last element in the array is a NUL
   termination character. An integer can be passed as second argument which allows
   specifying the size of the array if the length of the bytes should not be used.

   .. audit-event:: ctypes.create_string_buffer init,size ctypes.create_string_buffer


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1879)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: create_unicode_buffer(init_or_size, size=None)

   This function creates a mutable unicode character buffer. The returned object is
   a ctypes array of :class:`c_wchar`.

   *init_or_size* must be an integer which specifies the size of the array, or a
   string which will be used to initialize the array items.

   If a string is specified as first argument, the buffer is made one item
   larger than the length of the string so that the last element in the array is a
   NUL termination character. An integer can be passed as second argument which
   allows specifying the size of the array if the length of the string should not
   be used.

   .. audit-event:: ctypes.create_unicode_buffer init,size ctypes.create_unicode_buffer


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1896)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: DllCanUnloadNow()

   Windows only: This function is a hook which allows implementing in-process
   COM servers with ctypes.  It is called from the DllCanUnloadNow function that
   the _ctypes extension dll exports.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1903)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: DllGetClassObject()

   Windows only: This function is a hook which allows implementing in-process
   COM servers with ctypes.  It is called from the DllGetClassObject function
   that the ``_ctypes`` extension dll exports.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1910)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: find_library(name)
   :module: ctypes.util

   Try to find a library and return a pathname.  *name* is the library name
   without any prefix like ``lib``, suffix like ``.so``, ``.dylib`` or version
   number (this is the form used for the posix linker option :option:`!-l`).  If
   no library can be found, returns ``None``.

   The exact functionality is system dependent.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1921)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: find_msvcrt()
   :module: ctypes.util

   Windows only: return the filename of the VC runtime library used by Python,
   and by the extension modules.  If the name of the library cannot be
   determined, ``None`` is returned.

   If you need to free memory, for example, allocated by an extension module
   with a call to the ``free(void *)``, it is important that you use the
   function in the same library that allocated the memory.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1933)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: FormatError([code])

   Windows only: Returns a textual description of the error code *code*.  If no
   error code is specified, the last error code is used by calling the Windows
   api function GetLastError.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1940)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: GetLastError()

   Windows only: Returns the last error code set by Windows in the calling thread.
   This function calls the Windows `GetLastError()` function directly,
   it does not return the ctypes-private copy of the error code.

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1946)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: get_errno()

   Returns the current value of the ctypes-private copy of the system
   :data:`errno` variable in the calling thread.

   .. audit-event:: ctypes.get_errno &quot;&quot; ctypes.get_errno

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1953)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: get_last_error()

   Windows only: returns the current value of the ctypes-private copy of the system
   :data:`LastError` variable in the calling thread.

   .. audit-event:: ctypes.get_last_error &quot;&quot; ctypes.get_last_error

</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1960)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: memmove(dst, src, count)

   Same as the standard C memmove library function: copies *count* bytes from
   *src* to *dst*. *dst* and *src* must be integers or ctypes instances that can
   be converted to pointers.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1967)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: memset(dst, c, count)

   Same as the standard C memset library function: fills the memory block at
   address *dst* with *count* bytes of value *c*. *dst* must be an integer
   specifying an address, or a ctypes instance.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1974)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: POINTER(type)

   This factory function creates and returns a new ctypes pointer type. Pointer
   types are cached and reused internally, so calling this function repeatedly is
   cheap. *type* must be a ctypes type.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1981)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: pointer(obj)

   This function creates a new pointer instance, pointing to *obj*. The returned
   object is of the type ``POINTER(type(obj))``.

   Note: If you just want to pass a pointer to an object to a foreign function
   call, you should use ``byref(obj)`` which is much faster.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1990)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: resize(obj, size)

   This function resizes the internal memory buffer of *obj*, which must be an
   instance of a ctypes type.  It is not possible to make the buffer smaller
   than the native size of the objects type, as given by ``sizeof(type(obj))``,
   but it is possible to enlarge the buffer.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 1998)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: set_errno(value)

   Set the current value of the ctypes-private copy of the system :data:`errno`
   variable in the calling thread to *value* and return the previous value.

   .. audit-event:: ctypes.set_errno errno ctypes.set_errno


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2006)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: set_last_error(value)

   Windows only: set the current value of the ctypes-private copy of the system
   :data:`LastError` variable in the calling thread to *value* and return the
   previous value.

   .. audit-event:: ctypes.set_last_error error ctypes.set_last_error


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2015)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: sizeof(obj_or_type)

   Returns the size in bytes of a ctypes type or instance memory buffer.
   Does the same as the C ``sizeof`` operator.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2021)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: string_at(address, size=-1)

   This function returns the C string starting at memory address *address* as a bytes
   object. If size is specified, it is used as size, otherwise the string is assumed
   to be zero-terminated.

   .. audit-event:: ctypes.string_at address,size ctypes.string_at


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2030)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: WinError(code=None, descr=None)

   Windows only: this function is probably the worst-named thing in ctypes. It
   creates an instance of OSError.  If *code* is not specified,
   ``GetLastError`` is called to determine the error code. If *descr* is not
   specified, :func:`FormatError` is called to get a textual description of the
   error.

   .. versionchanged:: 3.3
      An instance of :exc:`WindowsError` used to be created.


</pre>
</div>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2042)</p>
<p>Unknown directive type &quot;function&quot;.</p>
<pre class="literal-block">
.. function:: wstring_at(address, size=-1)

   This function returns the wide character string starting at memory address
   *address* as a string.  If *size* is specified, it is used as the number of
   characters of the string, otherwise the string is assumed to be
   zero-terminated.

   .. audit-event:: ctypes.wstring_at address,size ctypes.wstring_at


</pre>
</div>
</div>
<div class="section" id="data-types">
<span id="ctypes-data-types"></span><h2>Data types</h2>
<p class="cdata">This non-public class is the common base class of all ctypes data types.
Among other things, all ctypes type instances contain a memory block that
hold C compatible data; the address of the memory block is returned by the
<a href="#id419"><span class="problematic" id="id420">:func:`addressof`</span></a> helper function. Another instance variable is exposed as
<a href="#id421"><span class="problematic" id="id422">:attr:`_objects`</span></a>; this contains other Python objects that need to be kept
alive in case the memory block contains pointers.</p>
<div class="cdata system-message" id="id419">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2060); <em><a href="#id420">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="cdata system-message" id="id421">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2060); <em><a href="#id422">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p class="cdata">Common methods of ctypes data types, these are all class methods (to be
exact, they are methods of the <a href="#id423"><span class="problematic" id="id424">:term:`metaclass`</span></a>):</p>
<div class="cdata system-message" id="id423">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2067); <em><a href="#id424">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2070)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: _CData.from_buffer(source[, offset])

   This method returns a ctypes instance that shares the buffer of the
   *source* object.  The *source* object must support the writeable buffer
   interface.  The optional *offset* parameter specifies an offset into the
   source buffer in bytes; the default is zero.  If the source buffer is not
   large enough a :exc:`ValueError` is raised.

   .. audit-event:: ctypes.cdata/buffer pointer,size,offset ctypes._CData.from_buffer

</pre>
</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2080)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: _CData.from_buffer_copy(source[, offset])

   This method creates a ctypes instance, copying the buffer from the
   *source* object buffer which must be readable.  The optional *offset*
   parameter specifies an offset into the source buffer in bytes; the default
   is zero.  If the source buffer is not large enough a :exc:`ValueError` is
   raised.

   .. audit-event:: ctypes.cdata/buffer pointer,size,offset ctypes._CData.from_buffer_copy

</pre>
</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2090)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: from_address(address)

   This method returns a ctypes type instance using the memory specified by
   *address* which must be an integer.

   .. audit-event:: ctypes.cdata address ctypes._CData.from_address

      This method, and others that indirectly call this method, raises an
      :ref:`auditing event &lt;auditing&gt;` ``ctypes.cdata`` with argument
      ``address``.

</pre>
</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2101)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: from_param(obj)

   This method adapts *obj* to a ctypes type.  It is called with the actual
   object used in a foreign function call when the type is present in the
   foreign function's :attr:`argtypes` tuple; it must return an object that
   can be used as a function call parameter.

   All ctypes data types have a default implementation of this classmethod
   that normally returns *obj* if that is an instance of the type.  Some
   types accept other objects as well.

</pre>
</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2112)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: in_dll(library, name)

   This method returns a ctypes type instance exported by a shared
   library. *name* is the name of the symbol that exports the data, *library*
   is the loaded shared library.

</pre>
</div>
<p class="cdata">Common instance variables of ctypes data types:</p>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2120)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _b_base_

   Sometimes ctypes data instances do not own the memory block they contain,
   instead they share part of the memory block of a base object.  The
   :attr:`_b_base_` read-only member is the root ctypes object that owns the
   memory block.

</pre>
</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2127)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _b_needsfree_

   This read-only variable is true when the ctypes data instance has
   allocated the memory block itself, false otherwise.

</pre>
</div>
<div class="cdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2132)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _objects

   This member is either ``None`` or a dictionary containing Python objects
   that need to be kept alive so that the memory block contents is kept
   valid.  This object is only exposed for debugging; never modify the
   contents of this dictionary.
</pre>
</div>
</div>
<div class="section" id="id425">
<span id="ctypes-fundamental-data-types-2"></span><h2>Fundamental data types</h2>
<p class="simplecdata">This non-public class is the base class of all fundamental ctypes data
types. It is mentioned here because it contains the common attributes of the
fundamental ctypes data types.  <a href="#id426"><span class="problematic" id="id427">:class:`_SimpleCData`</span></a> is a subclass of
<a href="#id428"><span class="problematic" id="id429">:class:`_CData`</span></a>, so it inherits their methods and attributes. ctypes data
types that are not and do not contain pointers can now be pickled.</p>
<div class="simplecdata system-message" id="id426">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2147); <em><a href="#id427">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="simplecdata system-message" id="id428">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2147); <em><a href="#id429">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="simplecdata">Instances have a single attribute:</p>
<div class="simplecdata system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2155)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: value

   This attribute contains the actual value of the instance. For integer and
   pointer types, it is an integer, for character types, it is a single
   character bytes object or string, for character pointer types it is a
   Python bytes object or string.

   When the ``value`` attribute is retrieved from a ctypes instance, usually
   a new object is returned each time.  :mod:`ctypes` does *not* implement
   original object return, always a new object is constructed.  The same is
   true for all other ctypes object instances.
</pre>
</div>
<p>Fundamental data types, when returned as foreign function call results, or, for
example, by retrieving structure field members or array items, are transparently
converted to native Python types.  In other words, if a foreign function has a
<a href="#id430"><span class="problematic" id="id431">:attr:`restype`</span></a> of <a href="#id432"><span class="problematic" id="id433">:class:`c_char_p`</span></a>, you will always receive a Python bytes
object, <em>not</em> a <a href="#id434"><span class="problematic" id="id435">:class:`c_char_p`</span></a> instance.</p>
<div class="system-message" id="id430">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2168); <em><a href="#id431">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id432">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2168); <em><a href="#id433">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="system-message" id="id434">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2168); <em><a href="#id435">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<!-- XXX above is false, it actually returns a Unicode string -->
<p>Subclasses of fundamental data types do <em>not</em> inherit this behavior. So, if a
foreign functions <a href="#id436"><span class="problematic" id="id437">:attr:`restype`</span></a> is a subclass of <a href="#id438"><span class="problematic" id="id439">:class:`c_void_p`</span></a>, you will
receive an instance of this subclass from the function call. Of course, you can
get the value of the pointer by accessing the <tt class="docutils literal">value</tt> attribute.</p>
<div class="system-message" id="id436">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2176); <em><a href="#id437">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="system-message" id="id438">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2176); <em><a href="#id439">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p>These are the fundamental ctypes data types:</p>
<p class="c-byte">Represents the C <a href="#id440"><span class="problematic" id="id441">:c:type:`signed char`</span></a> datatype, and interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.</p>
<div class="c-byte system-message" id="id440">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2185); <em><a href="#id441">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-char">Represents the C <a href="#id442"><span class="problematic" id="id443">:c:type:`char`</span></a> datatype, and interprets the value as a single
character.  The constructor accepts an optional string initializer, the
length of the string must be exactly one character.</p>
<div class="c-char system-message" id="id442">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2192); <em><a href="#id443">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-char-p">Represents the C <a href="#id444"><span class="problematic" id="id445">:c:type:`char *`</span></a> datatype when it points to a zero-terminated
string.  For a general character pointer that may also point to binary data,
<tt class="docutils literal">POINTER(c_char)</tt> must be used.  The constructor accepts an integer
address, or a bytes object.</p>
<div class="c-char-p system-message" id="id444">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2199); <em><a href="#id445">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-double">Represents the C <a href="#id446"><span class="problematic" id="id447">:c:type:`double`</span></a> datatype.  The constructor accepts an
optional float initializer.</p>
<div class="c-double system-message" id="id446">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2207); <em><a href="#id447">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-longdouble">Represents the C <a href="#id448"><span class="problematic" id="id449">:c:type:`long double`</span></a> datatype.  The constructor accepts an
optional float initializer.  On platforms where <tt class="docutils literal">sizeof(long double) ==
sizeof(double)</tt> it is an alias to <a href="#id450"><span class="problematic" id="id451">:class:`c_double`</span></a>.</p>
<div class="c-longdouble system-message" id="id448">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2213); <em><a href="#id449">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-longdouble system-message" id="id450">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2213); <em><a href="#id451">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-float">Represents the C <a href="#id452"><span class="problematic" id="id453">:c:type:`float`</span></a> datatype.  The constructor accepts an
optional float initializer.</p>
<div class="c-float system-message" id="id452">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2219); <em><a href="#id453">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-int">Represents the C <a href="#id454"><span class="problematic" id="id455">:c:type:`signed int`</span></a> datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where <tt class="docutils literal">sizeof(int) == sizeof(long)</tt> it is an alias to <a href="#id456"><span class="problematic" id="id457">:class:`c_long`</span></a>.</p>
<div class="c-int system-message" id="id454">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2225); <em><a href="#id455">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-int system-message" id="id456">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2225); <em><a href="#id457">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-int8">Represents the C 8-bit <a href="#id458"><span class="problematic" id="id459">:c:type:`signed int`</span></a> datatype.  Usually an alias for
<a href="#id460"><span class="problematic" id="id461">:class:`c_byte`</span></a>.</p>
<div class="c-int8 system-message" id="id458">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2232); <em><a href="#id459">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-int8 system-message" id="id460">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2232); <em><a href="#id461">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-int16">Represents the C 16-bit <a href="#id462"><span class="problematic" id="id463">:c:type:`signed int`</span></a> datatype.  Usually an alias for
<a href="#id464"><span class="problematic" id="id465">:class:`c_short`</span></a>.</p>
<div class="c-int16 system-message" id="id462">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2238); <em><a href="#id463">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-int16 system-message" id="id464">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2238); <em><a href="#id465">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-int32">Represents the C 32-bit <a href="#id466"><span class="problematic" id="id467">:c:type:`signed int`</span></a> datatype.  Usually an alias for
<a href="#id468"><span class="problematic" id="id469">:class:`c_int`</span></a>.</p>
<div class="c-int32 system-message" id="id466">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2244); <em><a href="#id467">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-int32 system-message" id="id468">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2244); <em><a href="#id469">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-int64">Represents the C 64-bit <a href="#id470"><span class="problematic" id="id471">:c:type:`signed int`</span></a> datatype.  Usually an alias for
<a href="#id472"><span class="problematic" id="id473">:class:`c_longlong`</span></a>.</p>
<div class="c-int64 system-message" id="id470">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2250); <em><a href="#id471">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-int64 system-message" id="id472">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2250); <em><a href="#id473">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-long">Represents the C <a href="#id474"><span class="problematic" id="id475">:c:type:`signed long`</span></a> datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.</p>
<div class="c-long system-message" id="id474">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2256); <em><a href="#id475">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-longlong">Represents the C <a href="#id476"><span class="problematic" id="id477">:c:type:`signed long long`</span></a> datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.</p>
<div class="c-longlong system-message" id="id476">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2262); <em><a href="#id477">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-short">Represents the C <a href="#id478"><span class="problematic" id="id479">:c:type:`signed short`</span></a> datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.</p>
<div class="c-short system-message" id="id478">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2268); <em><a href="#id479">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-size-t">Represents the C <a href="#id480"><span class="problematic" id="id481">:c:type:`size_t`</span></a> datatype.</p>
<div class="c-size-t system-message" id="id480">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2274); <em><a href="#id481">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-ssize-t">Represents the C <a href="#id482"><span class="problematic" id="id483">:c:type:`ssize_t`</span></a> datatype.</p>
<div class="c-ssize-t system-message" id="id482">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2279); <em><a href="#id483">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-ssize-t system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2281)</p>
<p>Unknown directive type &quot;versionadded&quot;.</p>
<pre class="literal-block">
.. versionadded:: 3.2
</pre>
</div>
<p class="c-ubyte">Represents the C <a href="#id484"><span class="problematic" id="id485">:c:type:`unsigned char`</span></a> datatype, it interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.</p>
<div class="c-ubyte system-message" id="id484">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2286); <em><a href="#id485">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-uint">Represents the C <a href="#id486"><span class="problematic" id="id487">:c:type:`unsigned int`</span></a> datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where <tt class="docutils literal">sizeof(int) == sizeof(long)</tt> it is an alias for <a href="#id488"><span class="problematic" id="id489">:class:`c_ulong`</span></a>.</p>
<div class="c-uint system-message" id="id486">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2293); <em><a href="#id487">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-uint system-message" id="id488">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2293); <em><a href="#id489">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-uint8">Represents the C 8-bit <a href="#id490"><span class="problematic" id="id491">:c:type:`unsigned int`</span></a> datatype.  Usually an alias for
<a href="#id492"><span class="problematic" id="id493">:class:`c_ubyte`</span></a>.</p>
<div class="c-uint8 system-message" id="id490">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2300); <em><a href="#id491">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-uint8 system-message" id="id492">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2300); <em><a href="#id493">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-uint16">Represents the C 16-bit <a href="#id494"><span class="problematic" id="id495">:c:type:`unsigned int`</span></a> datatype.  Usually an alias for
<a href="#id496"><span class="problematic" id="id497">:class:`c_ushort`</span></a>.</p>
<div class="c-uint16 system-message" id="id494">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2306); <em><a href="#id495">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-uint16 system-message" id="id496">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2306); <em><a href="#id497">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-uint32">Represents the C 32-bit <a href="#id498"><span class="problematic" id="id499">:c:type:`unsigned int`</span></a> datatype.  Usually an alias for
<a href="#id500"><span class="problematic" id="id501">:class:`c_uint`</span></a>.</p>
<div class="c-uint32 system-message" id="id498">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2312); <em><a href="#id499">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-uint32 system-message" id="id500">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2312); <em><a href="#id501">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-uint64">Represents the C 64-bit <a href="#id502"><span class="problematic" id="id503">:c:type:`unsigned int`</span></a> datatype.  Usually an alias for
<a href="#id504"><span class="problematic" id="id505">:class:`c_ulonglong`</span></a>.</p>
<div class="c-uint64 system-message" id="id502">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2318); <em><a href="#id503">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-uint64 system-message" id="id504">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2318); <em><a href="#id505">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<p class="c-ulong">Represents the C <a href="#id506"><span class="problematic" id="id507">:c:type:`unsigned long`</span></a> datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.</p>
<div class="c-ulong system-message" id="id506">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2324); <em><a href="#id507">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-ulonglong">Represents the C <a href="#id508"><span class="problematic" id="id509">:c:type:`unsigned long long`</span></a> datatype.  The constructor
accepts an optional integer initializer; no overflow checking is done.</p>
<div class="c-ulonglong system-message" id="id508">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2330); <em><a href="#id509">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-ushort">Represents the C <a href="#id510"><span class="problematic" id="id511">:c:type:`unsigned short`</span></a> datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.</p>
<div class="c-ushort system-message" id="id510">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2336); <em><a href="#id511">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-void-p">Represents the C <a href="#id512"><span class="problematic" id="id513">:c:type:`void *`</span></a> type.  The value is represented as integer.
The constructor accepts an optional integer initializer.</p>
<div class="c-void-p system-message" id="id512">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2342); <em><a href="#id513">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-wchar">Represents the C <a href="#id514"><span class="problematic" id="id515">:c:type:`wchar_t`</span></a> datatype, and interprets the value as a
single character unicode string.  The constructor accepts an optional string
initializer, the length of the string must be exactly one character.</p>
<div class="c-wchar system-message" id="id514">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2348); <em><a href="#id515">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-wchar-p">Represents the C <a href="#id516"><span class="problematic" id="id517">:c:type:`wchar_t *`</span></a> datatype, which must be a pointer to a
zero-terminated wide character string.  The constructor accepts an integer
address, or a string.</p>
<div class="c-wchar-p system-message" id="id516">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2355); <em><a href="#id517">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="c-bool">Represent the C <a href="#id518"><span class="problematic" id="id519">:c:type:`bool`</span></a> datatype (more accurately, <a href="#id520"><span class="problematic" id="id521">:c:type:`_Bool`</span></a> from
C99).  Its value can be <tt class="docutils literal">True</tt> or <tt class="docutils literal">False</tt>, and the constructor accepts any object
that has a truth value.</p>
<div class="c-bool system-message" id="id518">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2362); <em><a href="#id519">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="c-bool system-message" id="id520">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2362); <em><a href="#id521">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="hresult">Windows only: Represents a <a href="#id522"><span class="problematic" id="id523">:c:type:`HRESULT`</span></a> value, which contains success or
error information for a function or method call.</p>
<div class="hresult system-message" id="id522">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2369); <em><a href="#id523">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p class="py-object">Represents the C <a href="#id524"><span class="problematic" id="id525">:c:type:`PyObject *`</span></a> datatype.  Calling this without an
argument creates a <tt class="docutils literal">NULL</tt> <a href="#id526"><span class="problematic" id="id527">:c:type:`PyObject *`</span></a> pointer.</p>
<div class="py-object system-message" id="id524">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2375); <em><a href="#id525">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="py-object system-message" id="id526">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2375); <em><a href="#id527">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<p>The <a href="#id528"><span class="problematic" id="id529">:mod:`ctypes.wintypes`</span></a> module provides quite some other Windows specific
data types, for example <a href="#id530"><span class="problematic" id="id531">:c:type:`HWND`</span></a>, <a href="#id532"><span class="problematic" id="id533">:c:type:`WPARAM`</span></a>, or <a href="#id534"><span class="problematic" id="id535">:c:type:`DWORD`</span></a>.  Some
useful structures like <a href="#id536"><span class="problematic" id="id537">:c:type:`MSG`</span></a> or <a href="#id538"><span class="problematic" id="id539">:c:type:`RECT`</span></a> are also defined.</p>
<div class="system-message" id="id528">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2378); <em><a href="#id529">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="system-message" id="id530">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2378); <em><a href="#id531">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id532">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2378); <em><a href="#id533">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id534">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2378); <em><a href="#id535">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id536">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2378); <em><a href="#id537">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
<div class="system-message" id="id538">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2378); <em><a href="#id539">backlink</a></em></p>
Unknown interpreted text role &quot;c:type&quot;.</div>
</div>
<div class="section" id="structured-data-types">
<span id="ctypes-structured-data-types"></span><h2>Structured data types</h2>
<p class="union-args kw">Abstract base class for unions in native byte order.</p>
<p class="bigendianstructure-args kw">Abstract base class for structures in <em>big endian</em> byte order.</p>
<p class="littleendianstructure-args kw">Abstract base class for structures in <em>little endian</em> byte order.</p>
<p>Structures with non-native byte order cannot contain pointer type fields, or any
other data types containing pointer type fields.</p>
<p class="structure-args kw">Abstract base class for structures in <em>native</em> byte order.</p>
<p class="structure-args kw">Concrete structure and union types must be created by subclassing one of these
types, and at least define a <a href="#id540"><span class="problematic" id="id541">:attr:`_fields_`</span></a> class variable. <a href="#id542"><span class="problematic" id="id543">:mod:`ctypes`</span></a> will
create <a href="#id544"><span class="problematic" id="id545">:term:`descriptor`</span></a>s which allow reading and writing the fields by direct
attribute accesses.  These are the</p>
<div class="structure-args kw system-message" id="id540">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2411); <em><a href="#id541">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="structure-args kw system-message" id="id542">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2411); <em><a href="#id543">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="structure-args kw system-message" id="id544">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2411); <em><a href="#id545">backlink</a></em></p>
Unknown interpreted text role &quot;term&quot;.</div>
<div class="structure-args kw system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2417)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _fields_

   A sequence defining the structure fields.  The items must be 2-tuples or
   3-tuples.  The first item is the name of the field, the second item
   specifies the type of the field; it can be any ctypes data type.

   For integer type fields like :class:`c_int`, a third optional item can be
   given.  It must be a small positive integer defining the bit width of the
   field.

   Field names must be unique within one structure or union.  This is not
   checked, only one field can be accessed when names are repeated.

   It is possible to define the :attr:`_fields_` class variable *after* the
   class statement that defines the Structure subclass, this allows creating
   data types that directly or indirectly reference themselves::

      class List(Structure):
          pass
      List._fields_ = [(&quot;pnext&quot;, POINTER(List)),
                       ...
                      ]

   The :attr:`_fields_` class variable must, however, be defined before the
   type is first used (an instance is created, :func:`sizeof` is called on it,
   and so on).  Later assignments to the :attr:`_fields_` class variable will
   raise an AttributeError.

   It is possible to define sub-subclasses of structure types, they inherit
   the fields of the base class plus the :attr:`_fields_` defined in the
   sub-subclass, if any.


</pre>
</div>
<div class="structure-args kw system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2450)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _pack_

   An optional small integer that allows overriding the alignment of
   structure fields in the instance.  :attr:`_pack_` must already be defined
   when :attr:`_fields_` is assigned, otherwise it will have no effect.


</pre>
</div>
<div class="structure-args kw system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2457)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _anonymous_

   An optional sequence that lists the names of unnamed (anonymous) fields.
   :attr:`_anonymous_` must be already defined when :attr:`_fields_` is
   assigned, otherwise it will have no effect.

   The fields listed in this variable must be structure or union type fields.
   :mod:`ctypes` will create descriptors in the structure type that allows
   accessing the nested fields directly, without the need to create the
   structure or union field.

   Here is an example type (Windows)::

      class _U(Union):
          _fields_ = [(&quot;lptdesc&quot;, POINTER(TYPEDESC)),
                      (&quot;lpadesc&quot;, POINTER(ARRAYDESC)),
                      (&quot;hreftype&quot;, HREFTYPE)]

      class TYPEDESC(Structure):
          _anonymous_ = (&quot;u&quot;,)
          _fields_ = [(&quot;u&quot;, _U),
                      (&quot;vt&quot;, VARTYPE)]


   The ``TYPEDESC`` structure describes a COM data type, the ``vt`` field
   specifies which one of the union fields is valid.  Since the ``u`` field
   is defined as anonymous field, it is now possible to access the members
   directly off the TYPEDESC instance. ``td.lptdesc`` and ``td.u.lptdesc``
   are equivalent, but the former is faster since it does not need to create
   a temporary union instance::

      td = TYPEDESC()
      td.vt = VT_PTR
      td.lptdesc = POINTER(some_type)
      td.u.lptdesc = POINTER(some_type)

</pre>
</div>
<p class="structure-args kw">It is possible to define sub-subclasses of structures, they inherit the
fields of the base class.  If the subclass definition has a separate
<a href="#id546"><span class="problematic" id="id547">:attr:`_fields_`</span></a> variable, the fields specified in this are appended to the
fields of the base class.</p>
<div class="structure-args kw system-message" id="id546">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2493); <em><a href="#id547">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<p class="structure-args kw">Structure and union constructors accept both positional and keyword
arguments.  Positional arguments are used to initialize member fields in the
same order as they are appear in <a href="#id548"><span class="problematic" id="id549">:attr:`_fields_`</span></a>.  Keyword arguments in the
constructor are interpreted as attribute assignments, so they will initialize
<a href="#id550"><span class="problematic" id="id551">:attr:`_fields_`</span></a> with the same name, or create new attributes for names not
present in <a href="#id552"><span class="problematic" id="id553">:attr:`_fields_`</span></a>.</p>
<div class="structure-args kw system-message" id="id548">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2498); <em><a href="#id549">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="structure-args kw system-message" id="id550">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2498); <em><a href="#id551">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="structure-args kw system-message" id="id552">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2498); <em><a href="#id553">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
</div>
<div class="section" id="arrays-and-pointers">
<span id="ctypes-arrays-pointers"></span><h2>Arrays and pointers</h2>
<p class="array-args">Abstract base class for arrays.</p>
<p class="array-args">The recommended way to create concrete array types is by multiplying any
<a href="#id554"><span class="problematic" id="id555">:mod:`ctypes`</span></a> data type with a positive integer.  Alternatively, you can subclass
this type and define <a href="#id556"><span class="problematic" id="id557">:attr:`_length_`</span></a> and <a href="#id558"><span class="problematic" id="id559">:attr:`_type_`</span></a> class variables.
Array elements can be read and written using standard
subscript and slice accesses; for slice reads, the resulting object is
<em>not</em> itself an <a href="#id560"><span class="problematic" id="id561">:class:`Array`</span></a>.</p>
<div class="array-args system-message" id="id554">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2515); <em><a href="#id555">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<div class="array-args system-message" id="id556">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2515); <em><a href="#id557">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="array-args system-message" id="id558">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2515); <em><a href="#id559">backlink</a></em></p>
Unknown interpreted text role &quot;attr&quot;.</div>
<div class="array-args system-message" id="id560">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2515); <em><a href="#id561">backlink</a></em></p>
Unknown interpreted text role &quot;class&quot;.</div>
<div class="array-args system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2523)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _length_

     A positive integer specifying the number of elements in the array.
     Out-of-range subscripts result in an :exc:`IndexError`. Will be
     returned by :func:`len`.


</pre>
</div>
<div class="array-args system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2530)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _type_

     Specifies the type of each element in the array.


</pre>
</div>
<p class="array-args">Array subclass constructors accept positional arguments, used to
initialize the elements in order.</p>
<p class="pointer">Private, abstract base class for pointers.</p>
<p class="pointer">Concrete pointer types are created by calling <a href="#id562"><span class="problematic" id="id563">:func:`POINTER`</span></a> with the
type that will be pointed to; this is done automatically by
<a href="#id564"><span class="problematic" id="id565">:func:`pointer`</span></a>.</p>
<div class="pointer system-message" id="id562">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2543); <em><a href="#id563">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="pointer system-message" id="id564">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2543); <em><a href="#id565">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<p class="pointer">If a pointer points to an array, its elements can be read and
written using standard subscript and slice accesses.  Pointer objects
have no size, so <a href="#id566"><span class="problematic" id="id567">:func:`len`</span></a> will raise <a href="#id568"><span class="problematic" id="id569">:exc:`TypeError`</span></a>.  Negative
subscripts will read from the memory <em>before</em> the pointer (as in C), and
out-of-range subscripts will probably crash with an access violation (if
you're lucky).</p>
<div class="pointer system-message" id="id566">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2547); <em><a href="#id567">backlink</a></em></p>
Unknown interpreted text role &quot;func&quot;.</div>
<div class="pointer system-message" id="id568">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2547); <em><a href="#id569">backlink</a></em></p>
Unknown interpreted text role &quot;exc&quot;.</div>
<div class="pointer system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2555)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: _type_

     Specifies the type pointed to.

</pre>
</div>
<div class="pointer system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">ctypes.rst</tt>, line 2559)</p>
<p>Unknown directive type &quot;attribute&quot;.</p>
<pre class="literal-block">
.. attribute:: contents

     Returns the object to which to pointer points.  Assigning to this
     attribute changes the pointer to point to the assigned object.
</pre>
</div>
</div>
</div>
</div>
</body>
</html>
