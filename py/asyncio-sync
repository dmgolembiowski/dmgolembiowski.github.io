<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<title>Synchronization Primitives</title>
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7952 2016-07-26 18:15:59Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

.subscript {
  vertical-align: sub;
  font-size: smaller }

.superscript {
  vertical-align: super;
  font-size: smaller }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

object[type="image/svg+xml"], object[type="application/x-shockwave-flash"] {
  overflow: hidden;
}

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title, .code .error {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left, object.align-left, table.align-left {
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right, object.align-right, table.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

table.align-center {
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: inherit }

/* div.align-center * { */
/*   text-align: left } */

.align-top    {
  vertical-align: top }

.align-middle {
  vertical-align: middle }

.align-bottom {
  vertical-align: bottom }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block, pre.math, pre.code {
  margin-left: 2em ;
  margin-right: 2em }

pre.code .ln { color: grey; } /* line numbers */
pre.code, code { background-color: #eeeeee }
pre.code .comment, code .comment { color: #5C6576 }
pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold }
pre.code .literal.string, code .literal.string { color: #0C5404 }
pre.code .name.builtin, code .name.builtin { color: #352B84 }
pre.code .deleted, code .deleted { background-color: #DEB0A1}
pre.code .inserted, code .inserted { background-color: #A3D289}

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

/* "booktabs" style (no vertical lines) */
table.docutils.booktabs {
  border: 0px;
  border-top: 2px solid;
  border-bottom: 2px solid;
  border-collapse: collapse;
}
table.docutils.booktabs * {
  border: 0px;
}
table.docutils.booktabs th {
  border-bottom: thin solid;
  text-align: left;
}

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="synchronization-primitives">
<span id="asyncio-sync"></span>
<h1 class="title">Synchronization Primitives</h1>

<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 1)</p>
<p>Unknown directive type &quot;currentmodule&quot;.</p>
<pre class="literal-block">
.. currentmodule:: asyncio

</pre>
</div>
<p><strong>Source code:</strong> <a href="#id1"><span class="problematic" id="id2">:source:`Lib/asyncio/locks.py`</span></a></p>
<div class="system-message" id="id1">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 9); <em><a href="#id2">backlink</a></em></p>
Unknown interpreted text role &quot;source&quot;.</div>
<hr class="docutils" />
<p>asyncio synchronization primitives are designed to be similar to
those of the <a href="#id3"><span class="problematic" id="id4">:mod:`threading`</span></a> module with two important caveats:</p>
<div class="system-message" id="id3">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 13); <em><a href="#id4">backlink</a></em></p>
Unknown interpreted text role &quot;mod&quot;.</div>
<ul>
<li><p class="first">asyncio primitives are not thread-safe, therefore they should not
be used for OS thread synchronization (use <a href="#id5"><span class="problematic" id="id6">:mod:`threading`</span></a> for
that);</p>
<div class="system-message" id="id5">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 16); <em><a href="#id6">backlink</a></em></p>
<p>Unknown interpreted text role &quot;mod&quot;.</p>
</div>
</li>
<li><p class="first">methods of these synchronization primitives do not accept the <em>timeout</em>
argument; use the <a href="#id7"><span class="problematic" id="id8">:func:`asyncio.wait_for`</span></a> function to perform
operations with timeouts.</p>
<div class="system-message" id="id7">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 20); <em><a href="#id8">backlink</a></em></p>
<p>Unknown interpreted text role &quot;func&quot;.</p>
</div>
</li>
</ul>
<p>asyncio has the following basic synchronization primitives:</p>
<ul>
<li><p class="first"><a href="#id9"><span class="problematic" id="id10">:class:`Lock`</span></a></p>
<div class="system-message" id="id9">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 26); <em><a href="#id10">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first"><a href="#id11"><span class="problematic" id="id12">:class:`Event`</span></a></p>
<div class="system-message" id="id11">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 27); <em><a href="#id12">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first"><a href="#id13"><span class="problematic" id="id14">:class:`Condition`</span></a></p>
<div class="system-message" id="id13">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 28); <em><a href="#id14">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first"><a href="#id15"><span class="problematic" id="id16">:class:`Semaphore`</span></a></p>
<div class="system-message" id="id15">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 29); <em><a href="#id16">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
<li><p class="first"><a href="#id17"><span class="problematic" id="id18">:class:`BoundedSemaphore`</span></a></p>
<div class="system-message" id="id17">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 30); <em><a href="#id18">backlink</a></em></p>
<p>Unknown interpreted text role &quot;class&quot;.</p>
</div>
</li>
</ul>
<hr class="docutils" />
<div class="section" id="lock">
<h1>Lock</h1>
<p class="lock loop-none">Implements a mutex lock for asyncio tasks.  Not thread-safe.</p>
<p class="lock loop-none">An asyncio lock can be used to guarantee exclusive access to a
shared resource.</p>
<p class="lock loop-none">The preferred way to use a Lock is an <a href="#id19"><span class="problematic" id="id20">:keyword:`async with`</span></a>
statement:</p>
<div class="lock loop-none system-message" id="id19">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 46); <em><a href="#id20">backlink</a></em></p>
Unknown interpreted text role &quot;keyword&quot;.</div>
<pre class="lock loop-none literal-block">
lock = asyncio.Lock()

# ... later
async with lock:
    # access shared state
</pre>
<p class="lock loop-none">which is equivalent to:</p>
<pre class="lock loop-none literal-block">
lock = asyncio.Lock()

# ... later
await lock.acquire()
try:
    # access shared state
finally:
    lock.release()
</pre>
<div class="lock loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 66)</p>
<p>Unknown directive type &quot;deprecated-removed&quot;.</p>
<pre class="literal-block">
.. deprecated-removed:: 3.8 3.10
   The *loop* parameter.

</pre>
</div>
<div class="lock loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 69)</p>
<p>Unknown directive type &quot;coroutinemethod&quot;.</p>
<pre class="literal-block">
.. coroutinemethod:: acquire()

   Acquire the lock.

   This method waits until the lock is *unlocked*, sets it to
   *locked* and returns ``True``.

   When more than one coroutine is blocked in :meth:`acquire`
   waiting for the lock to be unlocked, only one coroutine
   eventually proceeds.

   Acquiring a lock is *fair*: the coroutine that proceeds will be
   the first coroutine that started waiting on the lock.

</pre>
</div>
<div class="lock loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 83)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: release()

   Release the lock.

   When the lock is *locked*, reset it to *unlocked* and return.

   If the lock is *unlocked*, a :exc:`RuntimeError` is raised.

</pre>
</div>
<div class="lock loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 91)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: locked()

   Return ``True`` if the lock is *locked*.
</pre>
</div>
</div>
<div class="section" id="event">
<h1>Event</h1>
<p class="event loop-none">An event object.  Not thread-safe.</p>
<p class="event loop-none">An asyncio event can be used to notify multiple asyncio tasks
that some event has happened.</p>
<p class="event loop-none">An Event object manages an internal flag that can be set to <em>true</em>
with the <a href="#id21"><span class="problematic" id="id22">:meth:`~Event.set`</span></a> method and reset to <em>false</em> with the
<a href="#id23"><span class="problematic" id="id24">:meth:`clear`</span></a> method.  The <a href="#id25"><span class="problematic" id="id26">:meth:`~Event.wait`</span></a> method blocks until the
flag is set to <em>true</em>.  The flag is set to <em>false</em> initially.</p>
<div class="event loop-none system-message" id="id21">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 106); <em><a href="#id22">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="event loop-none system-message" id="id23">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 106); <em><a href="#id24">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="event loop-none system-message" id="id25">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 106); <em><a href="#id26">backlink</a></em></p>
Unknown interpreted text role &quot;meth&quot;.</div>
<div class="event loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 112)</p>
<p>Unknown directive type &quot;deprecated-removed&quot;.</p>
<pre class="literal-block">
.. deprecated-removed:: 3.8 3.10
   The *loop* parameter.

</pre>
</div>
<p class="event loop-none" id="asyncio-example-sync-event">Example:</p>
<pre class="event loop-none literal-block">
async def waiter(event):
    print('waiting for it ...')
    await event.wait()
    print('... got it!')

async def main():
    # Create an Event object.
    event = asyncio.Event()

    # Spawn a Task to wait until 'event' is set.
    waiter_task = asyncio.create_task(waiter(event))

    # Sleep for 1 second and set the event.
    await asyncio.sleep(1)
    event.set()

    # Wait until the waiter task is finished.
    await waiter_task

asyncio.run(main())
</pre>
<div class="event loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 140)</p>
<p>Unknown directive type &quot;coroutinemethod&quot;.</p>
<pre class="literal-block">
.. coroutinemethod:: wait()

   Wait until the event is set.

   If the event is set, return ``True`` immediately.
   Otherwise block until another task calls :meth:`~Event.set`.

</pre>
</div>
<div class="event loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 147)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: set()

   Set the event.

   All tasks waiting for event to be set will be immediately
   awakened.

</pre>
</div>
<div class="event loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 154)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: clear()

   Clear (unset) the event.

   Tasks awaiting on :meth:`~Event.wait` will now block until the
   :meth:`~Event.set` method is called again.

</pre>
</div>
<div class="event loop-none system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 161)</p>
<p>Unknown directive type &quot;method&quot;.</p>
<pre class="literal-block">
.. method:: is_set()

   Return ``True`` if the event is set.
</pre>
</div>
</div>
<div class="section" id="condition">
<h1>Condition</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 169)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;Condition(lock=None, \*, loop=None)&quot;.</p>
<pre class="literal-block">
.. class:: Condition(lock=None, \*, loop=None)

   A Condition object.  Not thread-safe.

   An asyncio condition primitive can be used by a task to wait for
   some event to happen and then get exclusive access to a shared
   resource.

   In essence, a Condition object combines the functionality
   of an :class:`Event` and a :class:`Lock`.  It is possible to have
   multiple Condition objects share one Lock, which allows coordinating
   exclusive access to a shared resource between different tasks
   interested in particular states of that shared resource.

   The optional *lock* argument must be a :class:`Lock` object or
   ``None``.  In the latter case a new Lock object is created
   automatically.


   .. deprecated-removed:: 3.8 3.10
      The *loop* parameter.

   The preferred way to use a Condition is an :keyword:`async with`
   statement::

       cond = asyncio.Condition()

       # ... later
       async with cond:
           await cond.wait()

   which is equivalent to::

       cond = asyncio.Condition()

       # ... later
       await cond.acquire()
       try:
           await cond.wait()
       finally:
           cond.release()

   .. coroutinemethod:: acquire()

      Acquire the underlying lock.

      This method waits until the underlying lock is *unlocked*,
      sets it to *locked* and returns ``True``.

   .. method:: notify(n=1)

      Wake up at most *n* tasks (1 by default) waiting on this
      condition.  The method is no-op if no tasks are waiting.

      The lock must be acquired before this method is called and
      released shortly after.  If called with an *unlocked* lock
      a :exc:`RuntimeError` error is raised.

   .. method:: locked()

      Return ``True`` if the underlying lock is acquired.

   .. method:: notify_all()

      Wake up all tasks waiting on this condition.

      This method acts like :meth:`notify`, but wakes up all waiting
      tasks.

      The lock must be acquired before this method is called and
      released shortly after.  If called with an *unlocked* lock
      a :exc:`RuntimeError` error is raised.

   .. method:: release()

      Release the underlying lock.

      When invoked on an unlocked lock, a :exc:`RuntimeError` is
      raised.

   .. coroutinemethod:: wait()

      Wait until notified.

      If the calling task has not acquired the lock when this method is
      called, a :exc:`RuntimeError` is raised.

      This method releases the underlying lock, and then blocks until
      it is awakened by a :meth:`notify` or :meth:`notify_all` call.
      Once awakened, the Condition re-acquires its lock and this method
      returns ``True``.

   .. coroutinemethod:: wait_for(predicate)

      Wait until a predicate becomes *true*.

      The predicate must be a callable which result will be
      interpreted as a boolean value.  The final value is the
      return value.


</pre>
</div>
</div>
<div class="section" id="semaphore">
<h1>Semaphore</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 273)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;Semaphore(value=1, \*, loop=None)&quot;.</p>
<pre class="literal-block">
.. class:: Semaphore(value=1, \*, loop=None)

   A Semaphore object.  Not thread-safe.

   A semaphore manages an internal counter which is decremented by each
   :meth:`acquire` call and incremented by each :meth:`release` call.
   The counter can never go below zero; when :meth:`acquire` finds
   that it is zero, it blocks, waiting until some task calls
   :meth:`release`.

   The optional *value* argument gives the initial value for the
   internal counter (``1`` by default). If the given value is
   less than ``0`` a :exc:`ValueError` is raised.


   .. deprecated-removed:: 3.8 3.10
      The *loop* parameter.

   The preferred way to use a Semaphore is an :keyword:`async with`
   statement::

       sem = asyncio.Semaphore(10)

       # ... later
       async with sem:
           # work with shared resource

   which is equivalent to::

       sem = asyncio.Semaphore(10)

       # ... later
       await sem.acquire()
       try:
           # work with shared resource
       finally:
           sem.release()

   .. coroutinemethod:: acquire()

      Acquire a semaphore.

      If the internal counter is greater than zero, decrement
      it by one and return ``True`` immediately.  If it is zero, wait
      until a :meth:`release` is called and return ``True``.

   .. method:: locked()

      Returns ``True`` if semaphore can not be acquired immediately.

   .. method:: release()

      Release a semaphore, incrementing the internal counter by one.
      Can wake up a task waiting to acquire the semaphore.

      Unlike :class:`BoundedSemaphore`, :class:`Semaphore` allows
      making more ``release()`` calls than ``acquire()`` calls.


</pre>
</div>
</div>
<div class="section" id="boundedsemaphore">
<h1>BoundedSemaphore</h1>
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 335)</p>
<p>Invalid class attribute value for &quot;class&quot; directive: &quot;BoundedSemaphore(value=1, \*, loop=None)&quot;.</p>
<pre class="literal-block">
.. class:: BoundedSemaphore(value=1, \*, loop=None)

   A bounded semaphore object.  Not thread-safe.

   Bounded Semaphore is a version of :class:`Semaphore` that raises
   a :exc:`ValueError` in :meth:`~Semaphore.release` if it
   increases the internal counter above the initial *value*.


   .. deprecated-removed:: 3.8 3.10
      The *loop* parameter.

</pre>
</div>
<hr class="docutils" />
<div class="system-message">
<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">asyncio-sync.rst</tt>, line 350)</p>
<p>Unknown directive type &quot;versionchanged&quot;.</p>
<pre class="literal-block">
.. versionchanged:: 3.9

   Acquiring a lock using ``await lock`` or ``yield from lock`` and/or
   :keyword:`with` statement (``with await lock``, ``with (yield from
   lock)``) was removed.  Use ``async with lock`` instead.
</pre>
</div>
</div>
</div>
</body>
</html>
